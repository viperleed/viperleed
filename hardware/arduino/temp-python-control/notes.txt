** Windows **

The pre-compiled .dll files that we currently have in here can be downloaded from:

https://www.theimagingsource.com/support/downloads-for-windows/software-development-kits-sdks/tisgrabberdll/

However, it looks like these have not been updated for a long time:
- last release: 3.4.0.51, 2017
- previous one: 3.3.0.12, 2014

The 'source' .dlls (tis_udshl...) are also available precompiled for Visual Studio, together with all the included .h files at

https://www.theimagingsource.com/support/downloads-for-windows/software-development-kits-sdks/icimagingcontrolcpp/

This looks more recent, but may just be very similar to using the tisgrabber.dll stuff.
The first release starts with 3.4.0.2744, 2018. This looks like being the 'continuation' of the c-only code from the previous one, and latest release 3.5.6 came in Oct 2020.
We should discuss exactly what the hell they are doing there, but it looks like they switched to Visual Studio in 2018.


** Linux **

There are downloads available at 
https://www.theimagingsource.com/support/downloads-for-linux/

However, it seems perhaps easier to rely on the source github repo, since it is probably easier to download stuff from there automatically.
https://github.com/TheImagingSource/tiscamera

This also contains several PyQt5 examples that we can build on (also look at the IC-Imaging-Control-Samples repo for windows examples and Linux-tiscamera-Programming-Samples for Linux ones). The Linux examples, unfortunately, are all based on PyGObject [LGPLv2.1+ --> OK] (which, in turn needs GTK). This would increase our dependencies. It has to be figured out if it possible to do this via ctypes, so one would not need to write two completely different codes.

Interstingly, there seems to be a way with ctypes (see tiscamera/tools/tcam-gigetool/controller.py), but it looks like the stuff in there only does part of the job that we would need (contains only the bare methods to read/write registers). (tcam-gigetool.py appears to be a command-line tool to list available cameras with their IPs/MACs/..., upload new firmware, set IP/mask/name/... and similar)

Looks like many of the functions that are available in tisgrabber.dll are also defined in:
- tiscamera/src/CaptureDevice
- tiscamera/src/CaptureDeviceImpl (actual implementation of the previous ones)

At present, the following libraries that are only available on POSIX are used:
- <sys/ioctl.h> in /src/utils.cpp. Defines function tcam_xioctl(), used in V421Device.cpp and v421_ulis.cpp  -- this looks very hard to replace, but it is unclear if mingw has porting code that may allow to bypass this. I did not find a sys/ioctl.h header in mingw. This may be a bit problematic.
- <unistd.h> in /src/DeviceIndex.cpp. Mingw should have it, and should allow porting code. Alternatively, also look at this: https://stackoverflow.com/questions/341817/is-there-a-replacement-for-unistd-h-for-windows-visual-c
- <dlfcn.h> (load dll-like stuff in POSIX) in /src/BackendLoader.cpp, /src/LibraryHandle.h and .cpp. There appears to be a wrapper for this (https://github.com/dlfcn-win32/dlfcn-win32), but it also may be that mingw handles it.
- /src/image_base_defines.h includes <wdm.h> and <windef.h>. The latter seems to be a library provided by mingw. Thus, probably compilation with mingw may work.
- <../dutils/base/base_types.h>, also included with <wdm.h> and <windef.h> is nowhere to be found (there is no dutils folder in the parent!)
- <aravis/aravis_api.h>, <libusb/libusb_api.h>, <v4l2/v4l2_api.h> These are the concrete device implementations. It looks like aravis is the GigE-camera interface.
- aravis uses <sys/ipc.h>, <sys/shm.h>, <sys/msg.h>, <sys/sem.h> that are not available in MinGW. Also relies on the external github repo AravisProject/aravis (via <arv.h>).