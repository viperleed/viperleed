[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'
# TODO: check version of setuptools
# TODO: take a look at https://docs.pytest.org/en/7.1.x/explanation/goodpractices.html
# for good practices suggested by pytest on the builder

[project]
name = 'viperleed'
requires-python = '>=3.7'
dynamic = ['version']
readme = 'README.md'
dependencies = [
    'numpy',
    'wrapt',
    'quicktions',
    'scipy',
    'sklearn',
    'matplotlib',
    'psutil',
    ]

[project.license]
# TODO: add license information

[project.optional-dependencies]
GUI = [
    'PyQt5',
    'mplcairo',
    ]
hardware = [
    'requests',
    ]
dev = [
    'line_profiler',
    'sphinx',
    'pytest',
    ]

[tool.pytest.ini_options]
addopts = [
    '--import-mode=importlib',
    ]
pythonpath = [
    '.', '..'
    ]
# Turn all warnings into errors. See also "How to capture warnings"
filterwarnings = ["error",]
required_plugins = [
    'pytest-cases>=3.8.1',  # 3.8.1 fixes some ScopeMismatch
    'pytest-subtests'
    ]
xfail_strict = true


[tool.pylint.master]
extension-pkg-whitelist = ['PyQt5', 'quicktions']
extension-pkg-allow-list = ['PyQt5', 'quicktions']
load-plugins = [
    'pylint.extensions.bad_builtin',
    'pylint.extensions.broad_try_clause',
    'pylint.extensions.check_elif',
    'pylint.extensions.code_style',
    'pylint.extensions.comparison_placement',
    'pylint.extensions.confusing_elif',
    'pylint.extensions.consider_refactoring_into_while_condition',
    'pylint.extensions.consider_ternary_expression',
    'pylint.extensions.dict_init_mutate',
    'pylint.extensions.docparams',
    'pylint.extensions.docstyle',
    'pylint.extensions.dunder',
    'pylint.extensions.empty_comment',
    'pylint.extensions.for_any_all',
    'pylint.extensions.magic_value',
    'pylint.extensions.mccabe',
    'pylint.extensions.overlapping_exceptions',
    'pylint.extensions.private_import',
    'pylint.extensions.redefined_variable_type',
    'pylint.extensions.set_membership',
    ]
# It would be nice to have this set, but there are many language
# features (e.g., equals in f-strings) that are simply not checked
# even if this is set.
# py-version = '3.7'

[tool.pylint.basic]
no-docstring-rgx = '^(?!__init__$)_'
# The regexes below undo the changes in pylint 3.0 concerning
# two-letter-long names. The regexes are the only ones that
# were changed in github.com/pylint-dev/pylint/pull/8813. Note
# that DEFAULT_NAME_RGX is the one used for function, method,
# attr, argument, and variable. The long regexs are all the
# same, and match lower_camel_case.
# See github.com/pylint-dev/pylint/releases/tag/v3.0.0
class-rgx = '[^\W\da-z][^\W_]+$'
class-attribute-rgx = '([^\W\dA-Z][^\WA-Z]{2,}|_[^\WA-Z]*|__[^\WA-Z\d_][^\WA-Z]+__)$'
function-rgx = '([^\W\dA-Z][^\WA-Z]{2,}|_[^\WA-Z]*|__[^\WA-Z\d_][^\WA-Z]+__)$'
method-rgx = '([^\W\dA-Z][^\WA-Z]{2,}|_[^\WA-Z]*|__[^\WA-Z\d_][^\WA-Z]+__)$'
attr-rgx = '([^\W\dA-Z][^\WA-Z]{2,}|_[^\WA-Z]*|__[^\WA-Z\d_][^\WA-Z]+__)$'
argument-rgx = '([^\W\dA-Z][^\WA-Z]{2,}|_[^\WA-Z]*|__[^\WA-Z\d_][^\WA-Z]+__)$'
variable-rgx = '([^\W\dA-Z][^\WA-Z]{2,}|_[^\WA-Z]*|__[^\WA-Z\d_][^\WA-Z]+__)$'

[tool.pylint.main]
check-quote-consistency = 'yes'

[tool.pylint.format]
max-line-length = 80

[tool.pylint.messages_control]
enable = ['useless-suppression',
          'use-implicit-booleaness-not-comparison-to-zero',
          'use-implicit-booleaness-not-comparison-to-string']
disable = [
	'logging-fstring-interpolation',
	'consider-using-assignment-expr',  # We want to support 3.7 too
	]

[tool.pylint.reports]
output-format = 'colorized'
msg-template = '"{module} - L{line:4d}: {msg_id:5s}: {msg} ({symbol})"'
