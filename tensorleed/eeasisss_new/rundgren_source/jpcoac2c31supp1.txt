                       Supplemental Material

     Low-energy electron diffraction with energy-invariant carrier-wave
         wavenumber modulated by exchange-correlation interaction

        John Rundgren,1, Bo E. Sernelius,2, and Wolfgang Moritz,3 

  1,Department of Physics, KTH Royal Institute of Technology, 10691 Stockholm,
                                 Sweden
     2,Department of Physics, Chemistry and Biology, Linköping University,
                           58183 Linköping, Sweden
3,Department of Earth and Environmental Sciences, Ludwig-Maximilians-University,
                   Theresienstrasse 41, 80333 Munich, Germany

=======================================================================
      SM1_EEAS_phase_shift_code:
-----------------------------------------------------------------------
     _eeasisss_README.txt (Windows 10):
       1. major files:
          /user/<username>/documents/MS/SM1_EEAS_phase_shift_code, contains SM1.tgz,
            back-tared into SM1.txt and .f90, 
            disentangled into EEAS files by name search;
          /user/<username>/atlib for chgdenCu, etc;
          /user/<username>/bin for eeasisss.exe, hf.exe, etc;
       2. do eeasisss_compil.cmd 
            on eeasisss_main.f90, eeasisss_init.f90, eeasisss.f90, and eeas.f90;
       3. do eeasisss_run.cmd 
            on inputX -> logX, PS.uv.xy, Vxc0Einc, etc, for a test on Cu(111)TMB,
            first, do check existing chgden in /user/<username>/atlib;
       4. good luck.

  !=======================================================================
  !This program is free software under the terms of the GNU General Public
  !License as published by the Free Software Foundation.
  !Author: John O. Rundgren, jru@KTH.se ,
  !        KTH Royal Institute of Technology, Stockholm, Sweden.
  !Version: 28 March 2021.
  !-----------------------------------------------------------------------
  program eeasisss_main
  !This program requires compiler adhering to Fortran 2003 standard.
  implicit none
  integer :: argc, iarg
  character(len=127) :: argv, input_file, log_file, output_dir, atom_dir
  character(len=127) :: prefix
  interface
    subroutine eeasisss(inpfile, logfile, outdir, atdir)
    character(len=127) :: inpfile, logfile, outdir, atdir
    end subroutine
  end interface

  !Set default arguments:
  input_file = 'inputX'
  log_file   = 'logX'
  output_dir = './'
  atom_dir   = '/users/olof/atlib/'  !windows 10 with user name olof.
  !Accessing file whose name begins with '~/' :
  if(atom_dir(1:2)=='~/')then
    call getenv('HOME',prefix)
    atom_dir=trim(prefix)//atom_dir(2:len_trim(atom_dir))
  endif
 
  !Check if any arguments are found.
  argc = command_argument_count()
  iarg=1
  !loop across options.
  do while(iarg <= argc)
    call get_command_argument(iarg, argv) 
    selectcase(adjustl(argv))
      case("--help", "-h")
write(*,*)"Object files are ~/bin/eeasisss.x and ~/bin/eeas.x, "
write(*,*)"working directory is ./ ."
write(*,*)"===================================================================="
write(*,*)"--help or -h shows working space organization:"
write(*,*)"FILES"
write(*,*)"--input, -i <name of input file>, default is inputX ."
write(*,*)"--log, -l <name of log file>, default is logX ."
write(*,*)"DIRECTORIES"
write(*,*)"--output_dir, -o <path to log file and phase shifts>, "
write(*,*)"  default is ./result/ ."
write(*,*)"--atom_dir, -a <path to charge density files>, default is ~/atlib/ ."
write(*,*)"--------------------------------------------------------------------"
write(*,*)"Please contact John Rundgren <jru@KTH.se> for queries and comments."
        stop
      case("--input", "-i")
        if(iarg+1 .le. argc)then
          call get_command_argument(iarg+1, argv)
          input_file = adjustl(argv)
          iarg = iarg + 1
        endif
      case("--log", "-l")
        if(iarg+1 .le. argc)then
          call get_command_argument(iarg+1, argv)
          log_file = adjustl(argv)
          iarg = iarg + 1
        endif
      case("--output_dir", "-o")
        if(iarg+1 .le. argc)then
          call get_command_argument(iarg+1, argv)
          output_dir = adjustl(argv)
          iarg = iarg + 1
        endif
      case("--atom_dir", "-a")
        if(iarg+1 .le. argc)then
          call get_command_argument(iarg+1, argv)
          atom_dir = adjustl(argv)
          iarg = iarg + 1
        endif
    endselect
    iarg = iarg + 1
  end do
  call eeasisss(input_file,log_file,output_dir,atom_dir)
  stop
  end program eeasisss_main
!------------------------------------------------------------------------------
!=========================================================================
  !This program is free software under the terms of the GNU General Public
  !License as published by the Free Software Foundation.
  !Author: John O. Rundgren, jru@KTH.se ,
  !        KTH Royal Institute of Technology, Stockholm, Sweden.
  !Version: 28 March 2021.
  !-----------------------------------------------------------------------
  subroutine EEASiSSS(input_file,log_file,output_dir,atom_dir)

  !Elastic Electron-Atom Scattering in Solids and Solid Surfaces,
  !author: John Rundgren, jru@kth.se .
  !The author appreciates acknowledgement in publications by citation:
  !J. Rundgren, Phys.Rev.B68,125405(2003),
  !             Phys.Rev.B76,195441(2007).
  !use ifport

  use param,only : dp,z,outdir,atdir,lmax,nthread,Chg,Pot,WF,SpinPS, &
    idZA,idElemA,relerr,abserr,linux,windows

  use maths,only : ipol,pois,iofx,sph_av

  use space,only : NeighborShells,NBR,nshell,nieq,neq,rx,dx,nx,nxx, &
    nlat,ad,ia,rmt,rmtovl,rmin,rmax

  use enrgy,only : Free_Atom_Overlap,rho,rs,eev,ne,v0ev,emv0,xcfac, &
    Vnist,Vcry,VcryR,Vcry0

  use sdata,only : nsp,nsr,sp,sr,sdat,sdat1

  use Eparallel,only : mkdirport,eeas_pll

  use DifferentialEvolution,only : DEM,NP,refresh,VTR,bestval,nfeval,itval

  implicit none
  character(len=*), intent(in) :: input_file,output_dir,atom_dir
  character(len=*) :: log_file
  character(len=2) :: ci
  character(len=4) :: cie
  character(len=127) :: txt
  integer :: iter,ie,ir,isys,i,j,l,NPfac
  integer,allocatable :: nxR(:)
  real(dp) :: v0coef(8),acc
  real(dp),allocatable :: Vxc0(:),XCmin(:),XCmax(:),bestmem_XC(:), &
    RelOvlp(:),psu(:,:,:),psd(:,:,:),psl(:,:,:),psu1(:,:,:),psd1(:,:,:), &
    eps(:,:),a(:)
  real(dp),parameter :: rydb=13.60569172d0
  external errMT
  !
  write(outdir,'(127(" "))')
  outdir = trim(output_dir)
  write(atdir,'(127(" "))')
  atdir = trim(atom_dir)
  !
  !OPEN LOG FILE.
  open(61,file=trim(outdir)//trim(log_file),status='unknown')
  write(61,'(2a)')'log_file: ',trim(outdir)//trim(log_file)
  write(61,'(a/80("-"))')'READ inputX:'
  !
  !INPUT.
  call StructureAndMethods(input_file)
  !
  !SCATTERING POTENTIALS.
  call NeighborShells
  !call NBR
  call Free_Atom_Overlap
  !
  !eev,emv0,v0ev allocated in StructureAndMethods.
  allocate(rmt(nieq),Vcry(nxx,nieq),VcryR(nieq), &
    Vxc0(ne),nxR(nieq),RelOvlp(nieq), &
    psu(ne,0:lmax,nieq),psd(ne,0:lmax,nieq),psl(ne,0:lmax,nieq), &
    psu1(ne,0:lmax,nieq),psd1(ne,0:lmax,nieq), &
    eps(0:lmax,nieq),a(ne) )
  !
  !COULOMBIC POTENTIAL INITIATED.
  write(61,'(/20("===="))')
  write(61,'(a)')'CRYSTAL POTENTIAL: MT radii and potential levels'
  write(61,'(20("----"))')
  do ir=1,nieq
    Vcry(1:nx(ir),ir) = Vnist(1:nx(ir),ir)
  enddo
  write(61,822)'rmax(B)',(rmax(ir),ir=1,nieq)
  write(61,822)'rmin(B)',(rmin(ir),ir=1,nieq)
  write(61,822)'rmtovl',(rmtovl(ir),ir=1,nieq)
  !DEM PARAMETRS.
  NPfac=max(10,nieq)
  NP=NPfac*nieq
  allocate(XCmin(nieq),XCmax(nieq),bestmem_XC(nieq))
  XCmax=rmax
  XCmin=rmin
  refresh=-1; VTR=0.0001d0
  !DO DEM LOOP.
  do iter=1,2
    write(61,'(/a,i0,a)')'eeasiss ITERATION ',iter
    call DEM(errMT,XCmin,XCmax,bestmem_XC,nieq)
    if(bestval>=1.d+33)then
      write(61,'(a)')'DEM failed, fitness = infty, stop.'; stop
    endif
    !NEW rmt.
    rmt=bestmem_XC
    do ir=1,nieq
      RelOvlp(ir)=(rmt(ir)+rmt(ia(2,ir)))/ad(2,ir)-1.d0
    enddo
    write(61,825)'fitness =',bestval*rydb
    write(61,810)'#calls,#improvements=',nfeval,itval
    write(61,820)'atom'  ,(idElemA(ir),ir=1,nieq)
    write(61,820)'NNatom',(idElemA(ia(2,ir)),ir=1,nieq)
    write(61,822)'rmt(B)',(rmt(ir),ir=1,nieq)
    write(61,822)'rmtNN(B)',(rmt(ia(2,ir)),ir=1,nieq)
    write(61,822)'RelOvlp(B)',(RelOvlp(ir),ir=1,nieq)
    !Calculating VcryR and Vcry0.
    do ir=1,nieq
      VcryR(ir) = ipol(rmt(ir),nx(ir),rx(1,ir),dx(ir),Vcry(1,ir),'Vcry')
    enddo
    Vcry0 = sum(neq*VcryR)/dble(nlat)
    !Normalization to no MT-to-interstice potential steps.
    do ir=1,nieq
      Vcry(1:nx(ir),ir) = Vcry(1:nx(ir),ir) - (VcryR(ir) - Vcry0)
    enddo
  enddo !iter
  write(61,'(a)')'No MT-to-interstice potential steps.'
  !ENDDO DEM LOOP.
  !
  !Carrier potential Vcry (E invariant) normalized to Vcry0 = 0.
  do ir=1,nieq
    Vcry(1:nx(ir),ir) = Vcry(1:nx(ir),ir) - Vcry0
    VcryR(ir) = ipol(rmt(ir),nx(ir),rx(1,ir),dx(ir),Vcry(1,ir),'Vcry')
  enddo
  write(61,822)'VcryR(eV)',(VcryR(ir)*rydb,ir=1,nieq)
  Vcry0 = sum(neq*VcryR)/dble(nlat)
  write(61,823)'Vcry0(eV) = ',Vcry0*rydb
  write(61,*)
  810 format(a,2(1x,i0),a,es9.2,1x,es9.2)
  820 format(a/(10(3x,a)))
  822 format(a/(10f8.4:))
  922 format(a/(10i8:))
  823 format(a,f0.4,2(2x,f0.4))
  825 format(a,es7.0,a,es7.0)
  902 format(2es14.6)
  !COULOMBIC POTENTIAL FINISHED.
  !
  write(61,'(a)')'nxR(ir) enclosing rmt(ir).'
  do ir=1,nieq
    nxR(ir) = iofx(rmt(ir),rx(1,ir),1,nx(ir))
  enddo
  write(61,922)'nxR',(nxR(ir),ir=1,nieq)
  if(Pot=='y')then
    do ir=1,nieq
      open(10,file=trim(outdir)//'/'//'Vcry.'//idZA(ir),status='unknown')
      do i=1,nxR(ir)
        if(Vcry(i,ir)*rydb > -100.d0)then
          write(10,902) rx(i,ir),Vcry(i,ir)*rydb 
        endif
      enddo
    enddo
  endif
  if(Chg=='y')then
    do ir=1,nieq
    open(10,file=trim(outdir)//'/'//'rho.'//idZA(ir),status='unknown')
      do i=1,nxR(ir)
        write(10,902) rx(i,ir),rho(i,ir)
      enddo
    enddo
    do ir=1,nieq
    open(10,file=trim(outdir)//'/'//'rs.'//idZA(ir),status='unknown')
      do i=1,nxR(ir)
        write(10,902) rx(i,ir),rs(i,ir)
      enddo
    enddo
  endif
  !
  !SELF-ENERGY.
  sdat=reshape(sdat1,shape=(/nsp,nsr/))
goto 1001
  !plot of 'spx'//trim(ci) by means of xmgrace.
  do i=1,17
    write(ci,'(i0)') i
    open(62,file='spx'//trim(ci),status='unknown')    
    write(62,'(2f9.5)') (sp(j),sdat(j,i),j=1,151)
  enddo
  close(62)
1001 continue
  !
  write(61,'(/a)')'eeasisss: write files 1414 to eeas.'
  open(1414,file='uinp1',form='unformatted',status='unknown')
  write(1414) nxx,nieq,ne,nlat,nshell,nsp,nsr,nthread,lmax
  !
  open(1414,file='uinp2',form='unformatted',status='unknown')
  write(1414) outdir,Pot,WF,idElemA,idZA,neq,nx,dx,rx,ad,ia, &
    sp,sr,sdat,eev,Vcry,Vcry0,rmt,nxR,z,rho,rs,xcfac,relerr,abserr 
  close(1414)
  write(61,'(a)')'eeasisss: files 1414 written.'
  !
  !ELASTIC ELECTRON-ATOM SCATTERING in PARALLEL.
  call eeas_pll(nthread)
  !
  !EEASiSSS reads EEAS.
  write(61,'(/20("===="))')
  write(61,'(a)')'EEAS'
  write(61,'(20("----"))')
  !logfile.
  do ie=1,ne
    write(cie,'(i0)') ie
    !logfile.
    open(19,file='ulog'//trim(cie),status='unknown')
    do
      read(19,'(a)',end=1) txt
      write(61,'(a)') trim(txt)
    enddo
    1 continue
  enddo
  close(19)
  !data.
  do ie=1,ne
    write(cie,'(i0)') ie
    open(20,file='udat'//trim(cie),status='unknown',access='stream') 
    read(20) Vxc0(ie), &
             ((psu(ie,l,ir),l=0,lmax),ir=1,nieq), &
             ((psd(ie,l,ir),l=0,lmax),ir=1,nieq), &
             ((psu1(ie,l,ir),l=0,lmax),ir=1,nieq), &
             ((psd1(ie,l,ir),l=0,lmax),ir=1,nieq)
  enddo
  close(20)
  !
  write(61,'(/20("===="))')
  write(61,'(a)')'PS accuracy'
  write(61,'(20("----"))')
  write(61,'(a,es6.0,a,es6.0)') &
    'ODE tolerances, relerr=',relerr,' abserr=',abserr
  write(61,'(a,i2)')'#phase shifts=',lmax+1
  write(61,'(a)')'PS accuracy on subset ie,kappa:'
  write(61,'(a)')'ir'
!difference vs spin and ie.
  do ir=1,nieq
    do l=0,lmax
      do ie=1,ne
        a(ie)=0.d0
        a(ie)=max(a(ie),abs(psu(ie,l,ir))-abs(psu1(ie,l,ir)))
        a(ie)=max(a(ie),abs(psd(ie,l,ir))-abs(psd1(ie,l,ir)))
      enddo
      eps(l,ir)=maxval(a) 
    enddo
  enddo
  do ir=1,nieq
    write(61,'(/i2,16(1x,es6.0):)') ir,(eps(l,ir),l=0,lmax)
  enddo
  write(61,'(20("----"))')
!difference vs l and ir.
  acc=0.d0
  do ir=1,nieq
    do l=0,lmax
      acc=max(acc,eps(l,ir))
    enddo
  enddo
  write(61,'(a,1x,es6.0)')'PS accuracy on the set ir,l,ie,kappa:',acc
  write(61,'(20("----"))')
  !
  !ENERGY GRID in vacuum and in crystal.
  v0ev(:)=Vxc0(:)*rydb
  emv0(:)=eev(:)-v0ev(:)
  !
  !Vxc0Einc.
  open(63,file=trim(outdir)//'/Vxc0Einc',status='replace')
  write(63,930) (eev(i),v0ev(i),i=1,ne)
  write(61,'(/a)')'Vxc0Einc written.'
  write(61,*)
  !
  !Vxc0EincAprx.
  if(ne>=10)then
    call Vxc0EincAprx(Vxc0,v0coef)
    write(61,'(/a)')'Vxc0EincAprx written (Aprx for approximation).'
  else
    write(61,'(/a)')'ne<10, no Vxc0EincAprx calc.'
  endif
  930 format(2es14.6)
  !
  !PHASE SHIFTS.
  !Jumps of pi removed from the phaseshift versus energy curves.
  !psl = spin averaged = spinless phase shift.
  call PSnojump(psu,psd)
  do ir=1,nieq
    psl(1:ne,0,ir)=psu(1:ne,0,ir)
    do l=1,lmax
      do i=1,ne
        psl(i,l,ir)=((l+1)*psu(i,l,ir)+l*psd(i,l,ir))/(l+l+1)
      enddo
    enddo
  enddo
  !
  call PStab('sl',psl,v0coef)
  if(SpinPS=='y')then
    call PStab('su',psu,v0coef)
    call PStab('sd',psd,v0coef)
  endif
  write(61,'(/a)')'PStab written.'
  !
  !Cleaning up.
  if(windows)then
    isys = SYSTEM('del uinp*')
    isys = SYSTEM('del ulog*')
    isys = SYSTEM('del udat*')
    isys = SYSTEM('del eeas.cmd')
    do i=1,nthread
      write(ci,'(i0)') i
      isys = SYSTEM('rmdir /S /Q '//trim('thread'//ci))
    enddo
  elseif(linux)then
    isys = SYSTEM('rm uinp*')
    isys = SYSTEM('rm ulog*')
    isys = SYSTEM('rm udat*')
    isys = SYSTEM('rm eeas.sh')
    do i=1,nthread
      write(ci,'(i0)') i
      isys = SYSTEM('rmdir -r '//trim('thread'//ci))
    enddo
  endif
  !
  write(61,'(/a)')'eeasisss end stop.'
  stop
  end subroutine EEASiSSS
  !-------------------------------------------------------------------
  subroutine errMT(X,fitness)
  use param,only : dp
  use maths,only : ipol
  use space,only : nieq,neq,nlat,ad,ia,nx,rx,dx,rmtovl
  use enrgy,only : Vcry,VcryR,Vcry0
  implicit none
  integer  :: ir
  real(dp) :: X(nieq),harvest,fitness
  intrinsic random_number
  !
  !rmtovl in percent of ad(2,ir).
  do ir=1,nieq
    if(ad(2,ir)*(1.d0+rmtovl(ir))-X(ir)-X(ia(2,ir)) < 0.d0)then
      call random_number(harvest)
      fitness=(1.d0+harvest)*1.d+33
      return
    endif
  enddo
  do ir=1,nieq
    VcryR(ir) = ipol(X(ir),nx(ir),rx(1,ir),dx(ir),Vcry(1,ir),'Vcry')
  enddo
  Vcry0 = sum(neq*VcryR)/dble(nlat)
  fitness = maxval(abs(VcryR-Vcry0))
  return
  end subroutine errMT
  !---------------------------------------------------------------------
  subroutine StructureAndMethods(input_file)
  use param,only : dp,Elem,z,compound,idZ,idA,idZA,idElemA,bos,SpinPS, &
    Chg,Pot,WF,lmax,nthread,eev1,eev2,emesh,relerr,abserr

  use space,only : rc,rk,dx,nx,nieq,neq,ieq,nlat,rmin,rmax,volUC,rmtovl

  use enrgy,only : eev,ne,v0ev,emv0,xcfac

  use DifferentialEvolution,only : method,itermax,strategy,F_XC,F_CR,CR_XC

  implicit none
  character(len=*), intent(in) :: input_file
  character(len=127) :: txt
  integer :: i,ir,j
  real(dp) :: UOL,rcc1,rcc2,rcc3,rcX(3,3)
  real(dp),allocatable :: rk_tmp(:,:)
  real(dp),parameter :: bohr=0.5291772083d0
  !  
 open(5,file=trim(input_file),status='unknown')
 read(5,*) txt(1:10)
   write(61,'(a)') txt(1:10)          !STRUCTURE:
 read(5,'(a)') compound
   compound=adjustl(trim(compound))   !CRYSTAL.
   write(61,'(a)') trim(compound)
 read(5,'(a)') txt
   write(61,'(a)') trim(txt)          !DIRECTORY.
 !
 !Bohr units of length inside crystal.
 !UOL = unit converter:
 !Bohr units = UOL * Researcher's units at input.
 read(5,*) UOL
   write(61,200) UOL
 200 format('UOL=',f10.6,', Bohr units of length inside crystal.')
 !
 !rc(i,j)=i'th coordinate of the j'th unit cell vector (B).
 write(61,'(a)')"UC vectors (input units)"
 do j=1,3
   read(5,*) rcX(1:3,j)
   write(61,'(3f12.7)') (rcX(i,j),i=1,3)
 enddo
 rc=rcX*UOL
 write(61,'(a)')'UC vectors (B)'
 write(61,'(3(3f12.7/))') ((rc(i,j),i=1,3),j=1,3)
 !
 !nieq    =number of ineqivalent atoms in unit cell,
 !neq(ir) =number of equivalent atoms of type ir,
 !nlat    =number of lattice points in unit cell,
 !z(ir)   =atomic number of type ir.
 read(5,*) nieq
 !
 allocate(z(nieq),neq(nieq),dx(nieq),idZA(nieq),idElemA(nieq),nx(nieq), &
   rmin(nieq),rmax(nieq),ieq(nieq),rmtovl(nieq),xcfac(nieq), &
   rk_tmp(3,1000),idZ(nieq),idA(nieq))
 nlat=0
 !rmin, rmax in Bohr.
 do ir=1,nieq
   read(5,*) neq(ir),idZ(ir),idA(ir)
   z(ir)=dble(idZ(ir))
   !
   !atom identifiers.
   write(idZA(ir), '(i0,a,i0)') idZ(ir),'.',idA(ir)
   write(idElemA(ir),'( a,a,i0)') trim(Elem(idZ(ir))),'.',idA(ir)
   !
   write(61,203) ir,neq(ir)
   203 format(i0, 2x,i0, 2x,a)
   !
   !inequivalent lattice points.
   do j=1,neq(ir)
     nlat=nlat+1
     if(nlat>1000)then
       write(61,'(a)')'nlat>dimension 1000, stop'; stop
     endif
     read(5,*) rk_tmp(1:3,nlat)
     rk_tmp(1:3,nlat)=rk_tmp(1:3,nlat)*UOL
     write(61,205) rk_tmp(1:3,nlat)*bohr,rk_tmp(1:3,nlat)
   enddo
 enddo
 205 format(3f9.4,' Ang',2x,3f9.4,' Bohr')
 !
 do ir=1,nieq
   read(5,*)     idA(ir),rmin(ir),rmax(ir),rmtovl(ir),xcfac(ir)
   write(61,210) idA(ir),rmin(ir),rmax(ir),rmtovl(ir),xcfac(ir),&
                 trim(Elem(idZ(ir)))
 enddo
 210 format(i2,4f8.4,2x,a)
!
 !OPTIONS.
  read(5,*) txt
    write(61,'(a)') trim(txt)
  read(5,*) bos
    write(61,'(2a)')'bos==',bos
    if(.not.(bos=='b'.or.bos=='s'))goto 3
  read(5,*) SpinPS
    write(61,'(2a)')'SpinPS==',SpinPS
    if(.not.(SpinPS=='y'.or.SpinPS=='n'))goto 3    
  read(5,*) Chg
    write(61,'(2a)')'Chg==',Chg
    if(.not.(Chg=='y'.or.Chg=='n'))goto 3    
  read(5,*) Pot
    write(61,'(2a)')'Pot==',Pot
    if(.not.(Pot=='y'.or.Pot=='n'))goto 3
  read(5,*) WF
    write(61,'(2a)')'WF==',WF
    if(.not.(WF=='y'.or.WF=='n'))goto 3
  goto 4
  3 write(61,'(a)')'stop, incorrect input character'; stop
  4 continue
  !
  read(5,*) eev1,eev2,emesh
    write(61,'(3(a,f0.0))')'eev1=',eev1,', eev2=',eev2,', emesh=',emesh
  read(5,*) nthread,lmax
    write(61,'(2(a,i0))')'nthread=',nthread,', lmax=',lmax
  read(5,*) relerr,abserr
    write(61,'(2(a,es6.0))')'relerr=',relerr,', abserr=',abserr
  read(5,*)
    write(61,'(a)')'DIFFERENTIAL EVOLUTION'
  read(5,*) F_XC,CR_XC
    write(61,'(a,2f6.2)')'F_XC, CR_XC=',F_XC,CR_XC
  read(5,*) method
    write(61,'(a,3i2)')'method=',method
  read(5,*) strategy,F_CR
    write(61,'(a,i3,f6.2)')'strategy, F_CR=',strategy,F_CR
  read(5,*) itermax
    write(61,'(a,1x,i0)')'itermax=',itermax
  close(5)
 !
 write(61,'(/a,i3)')'#atoms in UC=',nlat
 allocate(rk(1:3,nlat))
 do j=1,nlat
   rk(1:3,j)=rk_tmp(1:3,j)
 enddo
 deallocate(rk_tmp)
 !volUC = volume of unit cell, where "unit cell" signifies:
 !for bulk, crystallographic unit cell;
 !for slab, crystallographic unit cell inclusive vacuum slab;
 !rcc1 and rcc2 || to the surface.
 rcc1=rc(2,1)*rc(3,2)-rc(3,1)*rc(2,2)
 rcc2=rc(3,1)*rc(1,2)-rc(1,1)*rc(3,2)
 rcc3=rc(1,1)*rc(2,2)-rc(2,1)*rc(1,2)
 volUC=abs(rc(1,3)*rcc1+rc(2,3)*rcc2+rc(3,3)*rcc3)
 write(61,'(a,f8.2)')'volUC (B**3)=',volUC
  !
  !UNIFORM ENERGY GRID.
  ne=1+nint((eev2-eev1)/emesh)
  allocate(eev(ne),v0ev(ne),emv0(ne))
  do i=1,ne
    eev(i)=eev1+(i-1)*emesh
  enddo
  return
 end subroutine StructureAndMethods
 !----------------------------------------------------------------------
  subroutine PSnojump(psu,psd)
  !Author: John Rundgren (2016).
  use param,only : dp,lmax
  use space,only : nieq
  use enrgy,only : ne
  implicit none
  integer :: ir,l,i,npi
  real(dp) :: psu(ne,0:lmax,nieq),psd(ne,0:lmax,nieq),d
  real(dp),parameter :: pi=acos(-1.d0),pih=pi*0.5d0
  do ir=1,nieq
    do l=0,lmax
      if(l==0)then
        if(psu(1,0,ir)>pih) psu(1,0,ir)=psu(1,0,ir)-pi
      endif
      do i=2,ne
        npi=0
        d=psu(i,l,ir)-psu(i-1,l,ir)
        if(abs(d)>epsilon(1.d0)) npi=nint(d/pi)
        psu(i,l,ir)=psu(i,l,ir)-npi*pi
        !
        npi=0
        d=psd(i,l,ir)-psd(i-1,l,ir)
        if(abs(d)>epsilon(1.d0)) npi=nint(d/pi)
        psd(i,l,ir)=psd(i,l,ir)-npi*pi
      enddo
      if(l>0)then
        !both PS curves running close together.
        if(abs(psu(1,l,ir)-psd(1,l,ir))>pih)then
          if(psu(1,l,ir)<=0.d0) psd(1:ne,l,ir)=psd(1:ne,l,ir)-pi
          if(psu(1,l,ir)> 0.d0) psd(1:ne,l,ir)=psd(1:ne,l,ir)+pi
        endif
      endif
    enddo
  enddo
  return
  end subroutine PSnojump
  !--------------------------------------------------------------------    
  subroutine errVxc0(X,fitness)
  use param,only : dp
  use enrgy,only : ne,eev,v0ev
  implicit none
  integer  :: i
  real(dp) :: X(4),fitness,errv
  errv=0.d0
  do i=1,ne
    errv=errv+(v0ev(i)-max( x(1)+x(2)/sqrt(eev(i)+x(3)), X(4) ))**2
  enddo
  fitness=sqrt(errv/ne)
  return
  end subroutine errVxc0
  !----------------------------------------------------------------------
  subroutine Vxc0EincAprx(Vxc0,v0coef)
  !V0Einca is V0=a+b/sqrt(E+c) for E above minimum V0(E).
  use param,only : dp,outdir
  use enrgy,only : ne,eev
  use DifferentialEvolution,only : DEM,NP,method,itermax,strategy,refresh, &
                                   F_XC,F_CR,CR_XC,VTR,bestval,nfeval,itval
  implicit none
  integer :: i
  integer,parameter :: Dim_XC=4
  real(dp) :: XCmin(Dim_XC),XCmax(Dim_XC),bestmem_XC(Dim_XC)
  real(dp) :: Vxc0(ne),v0coef(4),v0tmp(ne),Vxc1
  real(dp),parameter :: rydb=13.60569172d0
  external errVxc0
  !
  NP=10*Dim_XC
  Vxc1 = minval(Vxc0)*rydb
  XCmax(1) = 0.5d0
  XCmin(1) = Vxc1
    XCmax(2) =  -2.d0
    XCmin(2) = -80.d0
      XCmax(3) = 20.d0
      XCmin(3) =  2.d0
        XCmax(4) = Vxc1+2.0d0
        XCmin(4) = Vxc1
  F_XC=0.5d0;  CR_XC=0.8d0
  method=(/0,1,0/)
  strategy=2; F_CR=0.8d0
  itermax=4000; refresh=-1
  VTR=0.0001d0
  call DEM(errVxc0,XCmin,XCmax,bestmem_XC,Dim_XC)
  if(bestval>=1.d+33)then
    write(61,'(a)')'errVxc0 failed, fitness too large, stop.'
    stop
  endif
  v0coef(1:4)=bestmem_XC(1:4)
  !logX of Vxc0EincAprx.
  write(61,910)'#calls,#improvements =',nfeval,itval
  write(61,921)'v0max  =',XCmax(1:4)
  write(61,921)'v0coef =',v0coef(1:4)
  write(61,921)'v0min  =',XCmin(1:4)
  write(61,'(a,f0.2)')'Vxc0(1)-Vxc0(ne) (eV) = ',(Vxc0(1)-Vxc0(ne))*rydb
  !Vxc0EincAprx plot.
  open(64,file=trim(outdir)//'/Vxc0EincAprx_v0coef',status='unknown')
  write(64,921)'v0coef =',v0coef(1:4)
  do i=1,ne
    v0tmp(i)=max( v0coef(1)+v0coef(2)/sqrt(eev(i)+v0coef(3)), v0coef(4) )
  enddo
  open(64,file=trim(outdir)//'/Vxc0EincAprx',status='unknown')
  write(64,930) (eev(i),v0tmp(i),i=1,ne)
  close(64)
  910 format(a,2(1x,i0),a,es9.2,1x,es9.2)
  921 format(a,4f9.4)
  930 format(2es14.6)
  return
  end subroutine Vxc0EincAprx
  !----------------------------------------------------------------------
  subroutine PStab(tag,delta,v0coef)
  use param,only : dp,outdir,SpinPS,lmax,idZA
  use space,only : nieq
  use enrgy,only : ne,emv0
  implicit none
  character :: tag*2,pid*80,xid*80
  integer :: i,ir,l
  real(dp) :: delta(ne,0:lmax,nieq),v0coef(8)
  !
  !phase shift table PS.
  do ir=1,nieq
    if(tag=='sl')then
      pid='PS.'//trim(idZA(ir))//'.txt'
      xid='px.'//idZA(ir)
      open(40,file=trim(outdir)//'/'//trim(pid),status='replace')
!!!   open(41,file=trim(outdir)//'/'//trim(xid),status='replace')
      write(40,'(i0,1x,4(1x,f0.2),2x,a)') lmax+1,v0coef(1:4)
      do i=1,ne
        write(40,910) emv0(i),(delta(i,l,ir),l=0,lmax)
!!!     write(41,910) emv0(i),(delta(i,l,ir),l=0,min(lmax,9))
      enddo
      close(40)  !!!; close(41)
    elseif(tag=='su'.and.SpinPS=='y')then
      pid='PS.su.'//idZA(ir)
      open(40,file=trim(outdir)//'/'//trim(pid),status='replace')
      do i=1,ne
        write(40,910) emv0(i),(delta(i,l,ir),l=0,lmax)
      enddo
      close(40)
    elseif(tag=='sd'.and.SpinPS=='y')then
      pid='PS.sd.'//idZA(ir)
      open(40,file=trim(outdir)//'/'//trim(pid),status='replace')
      do i=1,ne
        write(40,910) emv0(i),(delta(i,l,ir),l=0,lmax)
      enddo
      close(40)
    endif
  enddo
  return
  910 format(f9.5,20(f9.5:))
  end subroutine PStab
  !----------------------------------------------------------------------
 !=======================================================================
  !This program is free software under the terms of the GNU General Public
  !License as published by the Free Software Foundation.
  !Author: John O. Rundgren, jru@KTH.se ,
  !        KTH Royal Institute of Technology, Stockholm, Sweden.
  !Version: 28 March 2021.
 !-----------------------------------------------------------------------
 module param
 !double precision definition.
 integer,parameter :: dp=selected_real_kind(15,307)
 !
 !I/O items.
 character(len=127) :: logfil,outdir,atdir
 integer :: logunit,thread
 !
 !basic constants.
 real(dp),allocatable :: z(:)
 character(len=2),parameter :: Elem(92)=(/&
 'H ','He','Li','Be','B ','C ','N ','O ','F ','Ne','Na','Mg','Al','Si',&
 'P ','S ','Cl','Ar','K ','Ca','Sc','Ti','V ','Cr','Mn','Fe','Co','Ni',&
 'Cu','Zn','Ga','Ge','As','Se','Br','Kr','Rb','Sr','Y ','Zr','Nb','Mo',&
 'Tc','Ru','Rh','Pd','Ag','Cd','In','Sn','Sb','Te','I ','Xe','Cs','Ba',&
 'La','Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb',&
 'Lu','Hf','Ta','W ','Re','Os','Ir','Pt','Au','Hg','Tl','Pb','Bi','Po',&
 'At','Rn','Fr','Ra','Ac','Th','Pa','U '/)
  real(dp),parameter :: bohr=0.5291772083d0,rydb=13.60569172d0

 !select program operations.
 character(len=1) :: bos,SpinPS,Chg,Pot,WF
 character(len=80) :: compound
 logical,parameter :: linux=.false., windows=.true. 

 !Energy input.
 !emesh = mesh of uniform energy grid
 integer  :: lmax,nthread
 real(dp) :: eev1,eev2,emesh,relerr,abserr

 !idZ(ir)     = nuclear number,
 !idA(ir)     = atom A's number in logfile print-out,
 !idZA(ir)    = atom identifier = idZ(ir)//'.'//idA(ir)
 !idElemA(ir) = Elem identifier = Elem(nint(idZ(ir)))//'.'//idA(ir),
 !            see subroutine(StructureAndMethods)
 integer,allocatable :: idZ(:),idA(:)
 character,allocatable :: idZA(:)*5,idElemA(:)*5
end module param

!======================================================================
module maths
use param,only : dp
contains
  !--------------------------------------------------------------------   
  subroutine trapez(rx,dx,nx,f,j1,j2,s)
  !integration by trapezoidal rule.
  !interval [j1,j2] is subinterval of [1,nx].
  implicit none
  integer :: nx,j1,j2,i
  real(dp) :: rx(nx),f(nx),s(nx),dx,dxh,a1,a2
  dxh=dx*0.5d0
  s(j1)=0; a1=f(j1)*rx(j1)
  do i=j1+1,j2
    a2=f(i)*rx(i)
    s(i)=s(i-1)+a1+a2
    a1=a2
  enddo
  s(j1:j2)=s(j1:j2)*dxh
  return
  end subroutine trapez
  !--------------------------------------------------------------------   
  function sph_av(rs,R,rx,dx,nx)
  !spherical average by spherical trapezoidal rule.
  implicit none
  integer :: nx,i
  real(dp) :: sph_av,rs(nx),R,rx(nx),f(nx),s(nx),dx,dxh,a1,a2,p
  !position of R in exponential grid.
  p = (log(R/rx(1)))/dx + 1.d0
  i = int(p)
  !position of R relative to next lower grid point i.
  p = p-i
  dxh=dx*0.5d0
  !rx**2 for spherical average and **1 for exponential grid.
  do i=1,nx
    f(i) = rs(i)*rx(i)**3
  enddo
  s(1) = 0.d0
  a1 = f(1)
  do i=2,nx-1
    a2 = f(i)
    s(i) = s(i-1)+a1+a2
    a1 =a2
  enddo
  a2 = f(nx-1) + (f(nx)-f(nx-1)) * p/(rx(nx)-rx(nx-1))
  s(nx) = s(nx-1)+a1+a2
  s(1:nx) = s(1:nx)*dxh
  !4*pi in nominator and denominator is cancelled.
  sph_av = s(nx) * 3.d0/R**3
  return
  end function sph_av
  !------------------------------------------------------------------- 
  subroutine pois(rx,dx,nx,z,rho4pir2,V)
  !integrating Poissson's equation calculating V.
  implicit none
  integer :: nx,i
  real(dp) :: rx(nx),dx,z,rho4pir2(nx),V(nx)
  real(dp) :: a1,a2,b1,b2,c,Q(nx),s(nx)
  c=0.5d0*dx
  Q(1)=0.d0; a1=rho4pir2(1)*rx(1)
  s(1)=0.d0; b1=rho4pir2(1)
  do i=2,nx
    a2=rho4pir2(i)*rx(i)
    Q(i)=Q(i-1)+a1+a2
    a1=a2
    b2=rho4pir2(i)
    s(i)=s(i-1)+b1+b2
    b1=b2
  enddo
  Q=Q*c
  s=s*c
  V=2.d0*(Q/rx-s+s(nx)-z/rx) !in Ry.
  return
  end subroutine pois
  !-------------------------------------------------------------------
  function ipol(x,nx,r,d,f,messg)
  use param,only : dp
  implicit none
  integer  :: nx,i1  
  real(dp) :: ipol,x,r(nx),d,f(nx),p1,p
  character(len=*) :: messg
  !ipol is exponential-grid lagrangian 3-point interpolation.
  !Ref.: Abramowitz and Stegun, Sec. 25.2.11.
  !
  if(x-r(nx)>0.d0)then
    write(611,900)'egl3 stop: x-r(nx),r(nx)=',x-r(nx),r(nx)
    write(611,902)'error location: ',messg
    stop
  endif
  p1=(log(x/r(1)))/d+1.d0
  i1=nint(p1)
  if(i1==nx) i1=i1-1
  p=p1-i1
  ipol = &
  0.5d0*p*(p-1.d0)*f(i1-1)+(1.d0-p*p)*f(i1)+0.5d0*p*(p+1.d0)*f(i1+1)
  return
  900 format(a,es9.2,f7.4)
  902 format(2a)
  end function ipol
  !-----------------------------------------------------------------
  !finding subscript .ge. that of x in array a.
  function iofx(x,a,la,ha)
  implicit none
  integer :: iofx,i,il,ih,la,ha
  real(dp) :: x,a(la:ha)
  il=la; ih=ha
1 if(ih-il>1)then
    i=(ih+il)/2
    if(a(i)>x)then; ih=i; else; il=i; endif
    goto 1
  endif 
  iofx=ih    
  return
  end function iofx
end module maths

!==============================================================================
module space
use param,only : dp
implicit none
!nieq   = # inequivalent atoms in the structure,
!neq(i) = # equivalent atoms for i=1:nieq,
!nlat   = # lattice points in the unit cell,
!nshell = # neighbor atomic shells, >= 2,
integer,parameter :: nshell=8
integer :: nieq,nlat
integer,allocatable :: neq(:),ieq(:)
!rx(i,ir)  )= radial grid rx(i,ir)=r(1,ir)*exp(dx(ir)*(i-1)),
!             where ir=1:nieq and i=1:nx(ir),

!rmt(:)  = MT radius,
!rmtovl  = overlap exterior to NN distance ad(2,:),
!rmin(:) = min MT radius,
!rmax(:) = max MT radius,
!rx(:,:) = radial grid,
!dx(:)   = logarithmic increment in radial grid,
!nx(:)   = (input) # grid points in atomic calculation,
!        = (calc.) outermost grid point determined by superposition z,
!nxx     = max nx(:).
!real(dp) :: rmtovl
real(dp),allocatable :: rx(:,:),dx(:),rmin(:),rmax(:),rmt(:),rmtovl(:)
integer,allocatable  :: nx(:)
integer :: nxx
!unit cell,
!rcX(i,j)=the i'th coordinate of the j'th axis of the unit cell,
!rk(i,j) =the i'th coordinate of the j'th atom in the unit cell,
!volUC   =volume of unit cell (inclusive vacuum slab),
!volXC   =volume of bulk unit cell (filled with crystal electrons).
!neighbors in crystal,
!  ia(j) = atomic type in j'th shell,
!  na(j) = number of atoms in j'th shell,
!  ad(j) = distance to j'th shell,
!  ncon  = number of shells included,
integer,allocatable ::  na(:,:),ia(:,:),ncon(:)
real(dp),allocatable :: rk(:,:),ad(:,:)
real(dp) :: rc(3,3),volUC,volXC
contains
 !----------------------------------------------------------------------
 !NEIGHBOR_SHELLS is nearest neighbor data for atoms in a crystal
 !structure.
 !Ref.: A. Barbieri and M.A. Van Hove, Phase shift calculation package,
 !      http://www.icts.hkbu.edu.hk/vanhove/
 !The main part is a fortran90 editon of subroutine NBR.

 !input:
 !rc(i,j) =the i'th coordinate of the j'th axis of the unit cell,
 !rk(i,j) =the i'th coordinate of the j'th atom in the unit cell,
 !neq(ir) =the number of equivalent atoms of type ir.
 !output:
 !ia(j,ir)=the type of atoms in the j'th neighbor shell,
 !na(j,ir)=the number of atoms in the j'th shell,
 !ad(j,ir)=the radius of the j'th shell,
 !ncon(ir)=no. of ir type shells.
 subroutine NeighborShells
 use param,only : dp
 use param,only : z,Elem
 implicit none
 integer :: j,jr,jjr,k,kr,ic,iic,jjc,jc,ir,nc,kc,i,jx,jy,jz
 real(dp) :: rj(3),dr,r,a,b
 real(dp),parameter :: bohr=0.5291772083d0
 real(dp),parameter :: rlimit=15.d0
 !
 allocate(ad(nshell,nieq),na(nshell,nieq),ia(nshell,nieq),ncon(nieq))
 ia=0
 na=0
 ad=1.d+33
 do jx=-nshell,nshell
  do jy=-nshell,nshell
    do jz=-nshell,nshell
      do j=1,3
        rj(j)=jx*rc(j,1)+jy*rc(j,2)+jz*rc(j,3)
      enddo
      !rj is current unit cell origin. for each atom in this unit cell,
      !find displacement r from kr-type atom in basic unit cell.
      j=0
      do jr=1,nieq
        do jjr=1,neq(jr)
          j=j+1
          k=1
          do kr=1,nieq
            r=sqrt((rj(1)+rk(1,j)-rk(1,k))**2+&
                   (rj(2)+rk(2,j)-rk(2,k))**2+&
                   (rj(3)+rk(3,j)-rk(3,k))**2 )
            !fixed limit for r.
            if(r>rlimit)then
              k=k+neq(kr)
              cycle
            endif
            !compare r with nearest neighbor distances already found.
            ic=0
            do
              ic=ic+1
              if(ic>nshell)then
                k=k+neq(kr)
                exit
              endif
              dr=r-ad(ic,kr)
              if(dr >= 1.d-03)then
                cycle
              elseif(abs(dr) < 1.d-04)then
                if(ia(ic,kr)/=jr)then
                  cycle
                else
                  na(ic,kr)=na(ic,kr)+1
                  k=k+neq(kr)
                  exit
                endif
              elseif(dr <= -1.d-04)then
                if(ic<nshell)then
                  iic=ic+1
                  do jjc=iic,nshell
                    jc=nshell+iic-jjc
                    ia(jc,kr)=ia(jc-1,kr)
                    na(jc,kr)=na(jc-1,kr)
                    ad(jc,kr)=ad(jc-1,kr)
                  enddo
                endif
                ia(ic,kr)=jr
                na(ic,kr)=1
                ad(ic,kr)=r
                k=k+neq(kr)
                exit
              endif
            enddo !ic
          enddo !kr
        enddo !jjr
      enddo !jr
    enddo !jz
  enddo !jy
 enddo !jx
 do ir=1,nieq
   ncon(ir)=0
   do ic=1,nshell
     if(na(ic,ir)==0) cycle
     ncon(ir)=ncon(ir)+1
   enddo
 enddo
 !display.
 write(61,'(/a)')'NNshells from JR.'
 do ir=1,nieq
  j=0
  do i=2,ncon(ir)
    j=j+na(i,ir)  !j counts the neighbors about atom ir.
  enddo
  write(61,'(72("="))')
  write(61,200) ir,Elem(nint(z(ir))),ncon(ir)-1,j
  nc=ncon(ir)
  ic=(nc-1)/8+1
  kc=0
  do i=1,ic
    jc=kc+1
    kc=min(nc,kc+8)
    write(61,208) (ia(j,ir),Elem(nint(z(ia(j,ir)))),j=jc,kc)
    write(61,206) (na(j,ir),j=jc,kc)
    write(61,204) (ad(j,ir),j=jc,kc)
    write(61,202) (ad(j,ir)*bohr,j=jc,kc)
    write(61,*)
  enddo !i
  write(61,'(a,20i2)')'ia',(ia(j,ir),j=1,kc)
  write(61,'(a,20i2)')'na',(na(j,ir),j=1,kc)
  write(61,*)
 enddo !ir
 !
 write(61,'(a)')'NN distances (B).'
 write(61,212) (i,i=1,nieq)
 write(61,214) (ad(2,i),i=1,nieq)
 return
 !
 !calculating volXC.
 !dz of volUC.
 a=rc(3,3)-rc(3,1)
 !dz of volXC.
 b=maxval(rk(3,:))-minval(rk(3,:))+0.5d0*(ad(2,1)+ad(2,nieq))
 volXC=volUC*(b/a)
 write(61,'(/a,2(1x,f0.2))')'volUC,volXC(B**3) =',volUC,volXC
 return
 200 format('   atom   ',i2,'.',a,i6,' neighbor shells,',i3,' neighbors')
 202 format('dist.(A)',10f8.4:)
 204 format('dist.(B)',10f8.4:)
 206 format('  number ',10(3x,i2,3x:))
 208 format('      NN  ',10(i2,'.',a,3x:))
 212 format(10(2x,i2,4x:))
 214 format(10(f8.4:))
 end subroutine NeighborShells
!----------------------------------------------------------------------
      SUBROUTINE NBR !(IA,NA,AD,NCON,NRR,NR,RC,RK,N,RMAX,MC)
      use param,only : dp
      use param,only : z,Elem
      implicit none
      integer :: MC,LIMC,NR,NC,I,IIC,IC,IR,J,JJC,JX,JY,JZ,K,KC,KR, &
        ITC,JJR,JC,JNR,JR
      real(dp),parameter :: bohr=0.5291772083d0
      real(dp) :: RAD,A1,A2,A3,RCMIN,RMAX,AS,AX,AY,AZ,R,RJ(3),DR
     !DIMENSION IA(MC,NR),NA(MC,NR),AD(MC,NR),NCON(NR),NRR(NR)
     !dimension rj(3),RC(3,3),RK(3,nlat)
     !NR=nieq
     !NRR(NR)=neq(nieq)
     !MC=nshell = 20 !Barbieri-VanHove
  !allocate(ad(nshell,nieq),na(nshell,nieq),ia(nshell,nieq),ncon(nieq))
!
!  ROUTINE TO SUPPLY NEAREST NEIGHBOUR DATA FOR ATOMS IN
!  A CRYSTAL STRUCTURE, GIVEN?
!  RC(I,J)? THE I'TH COORDINATE OF THE J'TH AXIS OF THE UNIT CELL
!  RK(I,J)? THE I'TH COORDINATE OF THE J'TH ATOM IN THE UNIT CELL
!  NRR(IR)? THE NUMBER OF TYPE-IR ATOMS IN THE UNIT CELL
!  THE INFORMATION RETURNED, FOR A TYPE-IR ATOM, IS
!  NCON(IR)? THE NUMBER OF NEAREST NEIGHBOUR SHELLS OF A TYPE-IR
!  ATOM INCLUDED, OUT TO A DISTANCE OF RMAX, BUT .LE. MC
!  IA(J,IR)? THE TYPE OF ATOMS IN THE J'TH NEIGHBOURING SHELL
!  NA(J,IR)? THE NUMBER OF ATOMS IN THE J'TH SHELL
!  AD(J,IR)? THE RADIUS OF THE J'TH SHELL
!
!  INITIALISATION
      RAD(A1,A2,A3)=SQRT(A1*A1+A2*A2+A3*A3)
      MC=nshell
      NR=nieq
      rmax=10.d0
      RCMIN=1.0E6
      DO 1 I=1,3
1     RCMIN=min(RCMIN,RAD(RC(1,I),RC(2,I),RC(3,I)))
      DO 2 IR=1,NR
      DO 2 IC=1,MC
      IA(IC,IR)=0
      NA(IC,IR)=0
2     AD(IC,IR)=1.0d06
!  SEARCH OVER ADJACENT UNIT CELLS TO INCLUDE MC NEAREST NEIGHBOURS
      ITC=INT(RMAX/RCMIN)+1
      LIMC=ITC+ITC+1
      AS=-FLOAT(ITC+1)
      AX=AS
      DO 10 JX=1,LIMC
      AX=AX+1.0d0
      AY=AS
      DO 10 JY=1,LIMC
      AY=AY+1.0d0
      AZ=AS
      DO 10 JZ=1,LIMC
      AZ=AZ+1.0d0
      DO 3 J=1,3
3     RJ(J)=AX*RC(J,1)+AY*RC(J,2)+AZ*RC(J,3)
!  RJ IS CURRENT UNIT CELL ORIGIN.  FOR EACH ATOM IN THIS UNIT CELL
!  FIND DISPLACEMENT R FROM KR-TYPE ATOM IN BASIC UNIT CELL
      J=0
      DO 10 JR=1,NR
      JNR=neq(JR)  !NRR=neq
      DO 10 JJR=1,JNR
      J=J+1
      K=1
      DO 9 KR=1,NR
      R=RAD(RJ(1)+RK(1,J)-RK(1,K), &
            RJ(2)+RK(2,J)-RK(2,K), &
            RJ(3)+RK(3,J)-RK(3,K))
      IF(R.GT.RMAX)GOTO 9
!  COMPARE R WITH NEAREST NEIGHBOUR DISTANCES ALREADY FOUND
      IC=0
4     IC=IC+1
      IF(IC.GT.MC) GOTO 9
      DR=R-AD(IC,KR)
      IF(ABS(DR).LT.1.0d-04) DR=0.0d0
      IF(DR) 6,5,4
5     IF(IA(IC,KR).NE.JR) GOTO 4
      NA(IC,KR)=NA(IC,KR)+1
      GOTO 9
6     IF(IC.EQ.MC) GOTO 8
      IIC=IC+1
      DO 7 JJC=IIC,MC
      JC=MC+IIC-JJC
      IA(JC,KR)=IA(JC-1,KR)
      NA(JC,KR)=NA(JC-1,KR)
7     AD(JC,KR)=AD(JC-1,KR)
8     IA(IC,KR)=JR
      NA(IC,KR)=1
      AD(IC,KR)=R
9     K=K+neq(KR)  !NRR=neq
10     CONTINUE
      DO 12 IR=1,NR
      NCON(IR)=0
      DO 11 IC=1,MC
      IF(NA(IC,IR).EQ.0) GOTO 12
11    NCON(IR)=NCON(IR)+1
12    CONTINUE
 !display.
 write(61,'(/a)')'NBshells from BVH.'
 do ir=1,nieq
   write(61,'(80("-"))')
   j=0
   do i=2,ncon(ir)
     j=j+na(i,ir)  !j counts the neighbors about atom ir.
   enddo
   write(61,200) ir,Elem(nint(z(ir))),ncon(ir)-1,j
   nc=ncon(ir)
   ic=(nc-1)/8+1
   kc=0
   do i=1,min(ic,nshell)
     jc=kc+1
     kc=min(nc,kc+8)
     write(61,208) (ia(j,ir),Elem(nint(z(ia(j,ir)))),j=jc,kc)
     write(61,206) (na(j,ir),j=jc,kc)
     write(61,204) (ad(j,ir),j=jc,kc)
     write(61,202) (ad(j,ir)*bohr,j=jc,kc)
     write(61,*)
   enddo
   write(61,'(a,20i2)')'ia',(ia(j,ir),j=1,kc)
   write(61,'(a,20i2)')'na',(na(j,ir),j=1,kc)
   write(61,*)
 enddo
 200 format('   atom   ',i2,'.',a,i6,' neighbor shells,',i3,' neighbors')
 202 format('dist.(A)',10f8.4:)
 204 format('dist.(B)',10f8.4:)
 206 format('  number ',10(3x,i2,3x:))
 208 format('      NN  ',10(i2,'.',a,3x:))
      RETURN
      END subroutine NBR
end module space
!==============================================================================
module enrgy
use param,only : dp,z,lmax,eev1,eev2,emesh,linux,windows
use space,only : rx,dx,nx,rmt,ad,ia,neq,nlat
implicit none
!Vnist = initial atomic potential corresponding to rho,
!      = tends to zero at radius infty, Ref. Eric Shirley, NIST,
real(dp) :: Vcry0
real(dp),allocatable :: atrho4pir2(:,:),rho(:,:),rs(:,:),&
  QvsR(:,:),Vnist(:,:),Vcry(:,:),VcryR(:)
!
!Energy grid items.
!eev(1:ne) = energy grid (in eV),
!eev1,eev2 = energy interval for phase shift calculation,
!emv0      = Einc-V0(inner potential),
!m         = energy position of V0 dip,
!xcfac     = correction factor on Vxc.
integer  :: ne,m,kappa,iatom
real(dp) :: Einc
real(dp),allocatable :: eev(:),emv0(:),v0ev(:),xcfac(:)
!
!Phase shift quantum numbers etc.
!iatom =atom subscript,
!kappa =spin-orbit coupling quantum number (dirac eq.):
!      =-l-1, l=0,1,2,... and =l, l=1,2,...(dirac eq.),
!      =l, l=0,1,2,... (schroedinger eq.),
!
!anu = atomic mass of chemical elements (1:92).
real(dp),dimension(92),parameter :: anu=(/&
  1.d0,  4.d0,  7.d0,  9.d0, 11.d0, 12.d0, 14.d0, 16.d0, 19.d0, 20.d0, 23.d0, 24.d0, 27.d0, 28.d0,&
 31.d0, 32.d0, 35.d0, 40.d0, 39.d0, 40.d0, 45.d0, 48.d0, 51.d0, 52.d0, 55.d0, 56.d0, 59.d0, 59.d0,&
 64.d0, 65.d0, 70.d0, 73.d0, 75.d0, 79.d0, 80.d0, 84.d0, 85.d0, 88.d0, 89.d0, 91.d0, 93.d0, 96.d0,&
 98.d0,101.d0,103.d0,106.d0,108.d0,112.d0,115.d0,119.d0,122.d0,128.d0,127.d0,131.d0,133.d0,137.d0,&
139.d0,140.d0,141.d0,144.d0,145.d0,150.d0,152.d0,157.d0,159.d0,163.d0,165.d0,167.d0,169.d0,173.d0,&
175.d0,178.d0,181.d0,184.d0,186.d0,190.d0,192.d0,195.d0,197.d0,201.d0,204.d0,207.d0,209.d0,209.d0,&
210.d0,222.d0,223.d0,226.d0,227.d0,232.d0,231.d0,238.d0/)
contains
 !----------------------------------------------------------------------
 subroutine Free_Atom_Overlap
 !Free_Atom_Overlap uses overlapping scatterers whose radii rmt are 
 !variables fitted to experimental intensity spectra.
 !its scattering potential and charge density (P&CD) is a free-atom
 !P&CD.
 use param,only : atdir,outdir,Chg,Pot,idZA,Elem
 use maths,only : trapez,pois,iofx
 use space,only : rx,dx,nx,nxx,nieq
 implicit none
 character :: atm*2
 integer  :: i,ir
 integer,allocatable :: mx(:)
 real(dp) :: HFrmin,HFrmax,r1,a
 real(dp),allocatable :: HFz(:)
 real(dp),parameter :: thrd=1.d0/3.d0,rydb=13.60569172d0
 real(dp),parameter :: pi=acos(-1.d0),fpi=4.d0*pi
 !
 !CHARGE DENSITY data, first run.
 !hf and eeasisss share directory atdir for chgden files.
 write(61,*)
 do ir=1,nieq
   atm=Elem(nint(z(ir)))
   open(50,file=trim(atdir)//'chgden'//trim(atm),status='old')
   read(50,*)
   read(50,*) z(ir),nx(ir),HFrmin,HFrmax
   close(50)
   write(61,898)'z,nx,HFrmin,HFrmax',z(ir),nx(ir),HFrmin,Hfrmax
   r1=HFrmin*(HFrmax/HFrmin)**(1.d0/dble(nx(ir)))
   dx(ir)=(log(HFrmax/HFrmin))/nx(ir)
   write(61,899)'r1,dx ',r1,dx(ir)
 enddo
 !
 !DEFINITION OF ARRAY SPACE from program HF.
 !inside entry: HFz,atrho4pir2
 !goes to eeas: rx.
 nxx=maxval(nx)
 allocate(HFz(nxx),rx(nxx,nieq),atrho4pir2(nxx,nieq),rho(nxx,nieq), &
   rs(nxx,nieq),Vnist(nxx,nieq),mx(nieq))
 do ir=1,nieq
   do i=1,nx(ir)
     rx(i,ir)=r1*exp(dx(ir)*dble(i-1))
   enddo
 enddo
 !
 !CHARGE DENSITY data, second run.
 write(61,'(/a)')"isuper from Shirley's Hartree-Fock program"
 do ir=1,nieq
   atm=Elem(nint(z(ir)))
   open(50,file=trim(atdir)//'chgden'//trim(atm),status='old')
   read(50,*)
   read(50,*) z(ir),nx(ir),HFrmin,HFrmax
   do i=1,nx(ir)
     read(50,*) a,atrho4pir2(i,ir)
   enddo
   close(50)
   !check nuclear charge Z.
   call trapez(rx(1,ir),dx(ir),nx(ir),atrho4pir2(1,ir),1,nx(ir),HFz)
   write(61,901) ir,z(ir),HFz(nx(ir))
   if(abs(z(ir)-HFz(nx(ir))) > 0.08)then
     write(61,'(a)')'stop'; stop
   endif
   !avoiding numerical noise of large-radius atrho4pir2.
   do i=nx(ir),nx(ir)/2,-1
     if(atrho4pir2(i,ir) > 1.d-12)then
       mx(ir)=i
       exit
     endif
   enddo
 enddo
 close(10)
 !
 !radial size of "noise-free" atrho4pir2; Ref.: E.Shirley, hf.f90 code. 
 i=minval(mx)
 nx=i
 write(61,'(/a)')'Noise-free atrho4pir2 after E.Shirley.'
 write(61,'(a,20(1x,i0))')'nx =',nx(1:nieq)
 !
 !check atrho4pir2.
 if(Chg=='x')then
   do ir=1,nieq
     open(10,file=trim(outdir)//'/'//'atrho4pir2.'//idZA(ir),status='unknown')
     write(10,902) (rx(i,ir),atrho4pir2(i,ir),i=1,nx(ir))
   enddo
 endif
 !
 !POTENTIAL Vnist.
 do ir=1,nieq
   call pois(rx(1,ir),dx(ir),nx(ir),z(ir),atrho4pir2(1,ir),Vnist(1,ir))
   !do normalization to zero of large-radius "noise-free" Vnist.
   a = Vnist(nx(ir),ir)
   Vnist(1:nx(ir),ir) = Vnist(1:nx(ir),ir) - a
   !enddo normalization.
 enddo
 !check Vnist.
 if(Pot=='y')then
   do ir=1,nieq
     open(10,file=trim(outdir)//'/'//'Vnist.'//idZA(ir),status='unknown')
     do i=nx(ir),1,-1
       a=Vnist(i,ir)*rydb; write(10,902) rx(i,ir),a; if(a<-10.d0) exit
     enddo
     close(10)
   enddo
 endif
 901 format('atom ',i2,' z=',f9.6,' HFz=',f13.10)
 902 format(2es14.6)
 !
 !EXCHANGE-CORRELATION: rs.
 !rs = radius of sphere accommodating a single electron, 
 !rs satisfying (4pi/3)*rs**3 = 1./rho.
 do ir=1,nieq
   do i=1,nx(ir)
     rho(i,ir)=atrho4pir2(i,ir)/(fpi*rx(i,ir)**2)
     rs(i,ir)=( (0.75d0/pi)/rho(i,ir) )**thrd
   enddo
 enddo
 close(50)
 898 format(a,f5.1,i5,2es22.14)
 899 format(a,2es22.14)
 return
 end subroutine Free_Atom_Overlap
end module enrgy
!=========================================================================================================================
module sdata
use param,only : dp
implicit none 
!Self-energy data by the courtesy of B.E.Sernelius.
!Ref.: K.W.Shung, B.E.Sernelius, and G.D.Mahan, PRB 36,4499 (1987).
integer,parameter :: nsr=17,nsp=151
real(dp),dimension(nsr),parameter :: sr=(/&
0.00d0,0.01d0,0.02d0,0.05d0,0.10d0,0.20d0,0.30d0,0.40d0,0.50d0,0.70d0,1.00d0,1.50d0,2.00d0,3.00d0,&
4.00d0,5.00d0,6.00d0/)
real(dp),dimension(nsp),parameter :: sp=(/&
0.00d0,0.02d0,0.04d0,0.06d0,0.08d0,0.10d0,0.12d0,0.14d0,0.16d0,0.18d0,0.20d0,0.22d0,0.24d0,0.26d0,&
0.28d0,0.30d0,0.32d0,0.34d0,0.36d0,0.38d0,0.40d0,0.42d0,0.44d0,0.46d0,0.48d0,0.50d0,0.52d0,0.54d0,&
0.56d0,0.58d0,0.60d0,0.62d0,0.64d0,0.66d0,0.68d0,0.70d0,0.72d0,0.74d0,0.76d0,0.78d0,0.80d0,0.82d0,&
0.84d0,0.86d0,0.88d0,0.90d0,0.92d0,0.94d0,0.96d0,0.98d0,1.00d0,1.02d0,1.04d0,1.06d0,1.08d0,1.10d0,&
1.12d0,1.14d0,1.16d0,1.18d0,1.20d0,1.22d0,1.24d0,1.26d0,1.28d0,1.30d0,1.32d0,1.34d0,1.36d0,1.38d0,&
1.40d0,1.42d0,1.44d0,1.46d0,1.48d0,1.50d0,1.52d0,1.54d0,1.56d0,1.58d0,1.60d0,1.62d0,1.64d0,1.66d0,&
1.68d0,1.70d0,1.72d0,1.74d0,1.76d0,1.78d0,1.80d0,1.82d0,1.84d0,1.86d0,1.88d0,1.90d0,1.92d0,1.94d0,&
1.96d0,1.98d0,2.00d0,2.02d0,2.04d0,2.06d0,2.08d0,2.10d0,2.12d0,2.14d0,2.16d0,2.18d0,2.20d0,2.22d0,&
2.24d0,2.26d0,2.28d0,2.30d0,2.32d0,2.34d0,2.36d0,2.38d0,2.40d0,2.42d0,2.44d0,2.46d0,2.48d0,2.50d0,&
2.52d0,2.54d0,2.56d0,2.58d0,2.60d0,2.62d0,2.64d0,2.66d0,2.68d0,2.70d0,2.72d0,2.74d0,2.76d0,2.78d0,&
2.80d0,2.82d0,2.84d0,2.86d0,2.88d0,2.90d0,2.92d0,2.94d0,2.96d0,2.98d0,3.00d0/)
!
real(dp),dimension(nsp,nsr) :: sdat
real(dp),dimension(nsp*nsr),parameter :: sdat1=(/&
-0.66340d0,-0.66330d0,-0.66310d0,-0.66260d0,-0.66200d0,-0.66120d0,-0.66020d0,-0.65910d0,-0.65770d0,-0.65620d0,-0.65450d0,&
-0.65260d0,-0.65050d0,-0.64830d0,-0.64580d0,-0.64320d0,-0.64030d0,-0.63720d0,-0.63400d0,-0.63050d0,-0.62680d0,-0.62290d0,&
-0.61880d0,-0.61450d0,-0.60990d0,-0.60500d0,-0.60000d0,-0.59460d0,-0.58900d0,-0.58310d0,-0.57700d0,-0.57050d0,-0.56370d0,&
-0.55660d0,-0.54920d0,-0.54130d0,-0.53310d0,-0.52450d0,-0.51540d0,-0.50580d0,-0.49570d0,-0.48500d0,-0.47370d0,-0.46160d0,&
-0.44870d0,-0.43480d0,-0.41970d0,-0.40310d0,-0.38440d0,-0.36250d0,-0.33170d0,-0.30140d0,-0.28060d0,-0.26330d0,-0.24850d0,&
-0.23530d0,-0.22350d0,-0.21290d0,-0.20310d0,-0.19420d0,-0.18590d0,-0.17820d0,-0.17110d0,-0.16450d0,-0.15820d0,-0.15240d0,&
-0.14690d0,-0.14180d0,-0.13690d0,-0.13230d0,-0.12790d0,-0.12380d0,-0.11990d0,-0.11620d0,-0.11260d0,-0.10930d0,-0.10610d0,&
-0.10300d0,-0.10010d0,-0.09727d0,-0.09459d0,-0.09203d0,-0.08958d0,-0.08722d0,-0.08496d0,-0.08280d0,-0.08071d0,-0.07870d0,&
-0.07678d0,-0.07493d0,-0.07314d0,-0.07142d0,-0.06977d0,-0.06817d0,-0.06662d0,-0.06513d0,-0.06369d0,-0.06230d0,-0.06096d0,&
-0.05965d0,-0.05840d0,-0.05718d0,-0.05600d0,-0.05486d0,-0.05375d0,-0.05267d0,-0.05163d0,-0.05062d0,-0.04964d0,-0.04869d0,&
-0.04777d0,-0.04687d0,-0.04600d0,-0.04515d0,-0.04433d0,-0.04353d0,-0.04275d0,-0.04199d0,-0.04125d0,-0.04054d0,-0.03984d0,&
-0.03916d0,-0.03849d0,-0.03785d0,-0.03722d0,-0.03660d0,-0.03600d0,-0.03542d0,-0.03485d0,-0.03429d0,-0.03375d0,-0.03322d0,&
-0.03270d0,-0.03220d0,-0.03170d0,-0.03122d0,-0.03075d0,-0.03029d0,-0.02984d0,-0.02940d0,-0.02897d0,-0.02855d0,-0.02814d0,&
-0.02773d0,-0.02734d0,-0.02696d0,-0.02658d0,-0.02621d0,-0.02585d0,-0.02549d0,-0.02515d0,-0.61980d0,-0.61970d0,-0.61950d0,&
-0.61920d0,-0.61870d0,-0.61800d0,-0.61720d0,-0.61620d0,-0.61500d0,-0.61360d0,-0.61210d0,-0.61040d0,-0.60840d0,-0.60630d0,&
-0.60400d0,-0.60150d0,-0.59880d0,-0.59590d0,-0.59280d0,-0.58950d0,-0.58600d0,-0.58220d0,-0.57830d0,-0.57410d0,-0.56970d0,&
-0.56500d0,-0.56010d0,-0.55500d0,-0.54960d0,-0.54390d0,-0.53790d0,-0.53170d0,-0.52510d0,-0.51820d0,-0.51100d0,-0.50340d0,&
-0.49550d0,-0.48710d0,-0.47830d0,-0.46910d0,-0.45940d0,-0.44910d0,-0.43830d0,-0.42690d0,-0.41490d0,-0.40230d0,-0.38920d0,&
-0.37560d0,-0.36180d0,-0.34750d0,-0.33290d0,-0.31990d0,-0.30740d0,-0.29630d0,-0.28700d0,-0.27060d0,-0.25900d0,-0.24830d0,&
-0.23830d0,-0.22900d0,-0.22050d0,-0.21250d0,-0.20500d0,-0.19800d0,-0.19150d0,-0.18530d0,-0.17950d0,-0.17400d0,-0.16880d0,&
-0.16390d0,-0.15930d0,-0.15490d0,-0.15060d0,-0.14660d0,-0.14280d0,-0.13920d0,-0.13570d0,-0.13240d0,-0.12920d0,-0.12620d0,&
-0.12330d0,-0.12050d0,-0.11780d0,-0.11520d0,-0.11270d0,-0.11030d0,-0.10800d0,-0.10580d0,-0.10370d0,-0.10170d0,-0.09967d0,&
-0.09776d0,-0.09591d0,-0.09412d0,-0.09240d0,-0.09073d0,-0.08911d0,-0.08754d0,-0.08603d0,-0.08456d0,-0.08314d0,-0.08176d0,&
-0.08042d0,-0.07912d0,-0.07786d0,-0.07663d0,-0.07544d0,-0.07428d0,-0.07316d0,-0.07206d0,-0.07100d0,-0.06996d0,-0.06895d0,&
-0.06797d0,-0.06701d0,-0.06608d0,-0.06517d0,-0.06429d0,-0.06343d0,-0.06259d0,-0.06177d0,-0.06097d0,-0.06018d0,-0.05942d0,&
-0.05860d0,-0.05794d0,-0.05723d0,-0.05653d0,-0.05585d0,-0.05518d0,-0.05453d0,-0.05389d0,-0.05327d0,-0.05266d0,-0.05206d0,&
-0.05147d0,-0.05090d0,-0.05034d0,-0.04979d0,-0.04925d0,-0.04873d0,-0.04821d0,-0.04773d0,-0.04723d0,-0.04675d0,-0.04628d0,&
-0.04581d0,-0.04536d0,-0.04493d0,-0.04450d0,-0.04407d0,-0.60270d0,-0.60270d0,-0.60250d0,-0.60210d0,-0.60170d0,-0.60110d0,&
-0.60030d0,-0.59930d0,-0.59820d0,-0.59690d0,-0.59540d0,-0.59380d0,-0.59190d0,-0.58990d0,-0.58770d0,-0.58530d0,-0.58270d0,&
-0.57980d0,-0.57680d0,-0.57360d0,-0.57020d0,-0.56650d0,-0.56270d0,-0.55860d0,-0.55430d0,-0.54970d0,-0.54490d0,-0.53990d0,&
-0.53450d0,-0.52900d0,-0.52310d0,-0.51700d0,-0.51050d0,-0.50380d0,-0.49670d0,-0.48930d0,-0.48150d0,-0.47330d0,-0.46480d0,&
-0.45580d0,-0.44640d0,-0.43660d0,-0.42630d0,-0.41570d0,-0.40470d0,-0.39340d0,-0.38190d0,-0.37030d0,-0.35840d0,-0.34630d0,&
-0.33390d0,-0.32240d0,-0.31130d0,-0.30100d0,-0.29130d0,-0.28190d0,-0.27220d0,-0.26220d0,-0.25250d0,-0.24330d0,-0.23470d0,&
-0.22660d0,-0.21900d0,-0.21190d0,-0.20520d0,-0.19880d0,-0.19290d0,-0.18730d0,-0.18190d0,-0.17690d0,-0.17210d0,-0.16750d0,&
-0.16320d0,-0.15900d0,-0.15510d0,-0.15130d0,-0.14770d0,-0.14430d0,-0.14100d0,-0.13790d0,-0.13480d0,-0.13190d0,-0.12910d0,&
-0.12650d0,-0.12390d0,-0.12140d0,-0.11900d0,-0.11670d0,-0.11450d0,-0.11230d0,-0.11030d0,-0.10830d0,-0.10630d0,-0.10450d0,&
-0.10270d0,-0.10090d0,-0.09924d0,-0.09760d0,-0.09601d0,-0.09440d0,-0.09297d0,-0.09150d0,-0.09012d0,-0.08875d0,-0.08742d0,&
-0.08613d0,-0.08488d0,-0.08366d0,-0.08247d0,-0.08132d0,-0.08019d0,-0.07910d0,-0.07803d0,-0.07699d0,-0.07598d0,-0.07499d0,&
-0.07403d0,-0.07309d0,-0.07218d0,-0.07128d0,-0.07041d0,-0.06956d0,-0.06872d0,-0.06791d0,-0.06712d0,-0.06634d0,-0.06558d0,&
-0.06484d0,-0.06411d0,-0.06340d0,-0.06271d0,-0.06203d0,-0.06136d0,-0.06071d0,-0.06008d0,-0.05945d0,-0.05884d0,-0.05824d0,&
-0.05765d0,-0.05707d0,-0.05651d0,-0.05596d0,-0.05541d0,-0.05488d0,-0.05435d0,-0.05384d0,-0.05333d0,-0.05284d0,-0.05235d0,&
-0.05187d0,-0.05141d0,-0.57140d0,-0.57130d0,-0.57110d0,-0.57080d0,-0.57040d0,-0.56980d0,-0.56910d0,-0.56820d0,-0.56720d0,&
-0.56600d0,-0.56470d0,-0.56310d0,-0.56140d0,-0.55950d0,-0.55750d0,-0.55520d0,-0.55280d0,-0.55010d0,-0.54730d0,-0.54430d0,&
-0.54100d0,-0.53760d0,-0.53390d0,-0.53000d0,-0.52590d0,-0.52160d0,-0.51700d0,-0.51220d0,-0.50720d0,-0.50190d0,-0.49630d0,&
-0.49050d0,-0.48440d0,-0.47800d0,-0.47130d0,-0.46440d0,-0.45710d0,-0.44960d0,-0.44180d0,-0.43380d0,-0.42560d0,-0.41710d0,&
-0.40860d0,-0.39990d0,-0.39120d0,-0.38240d0,-0.37350d0,-0.36440d0,-0.35530d0,-0.34590d0,-0.33650d0,-0.32740d0,-0.31860d0,&
-0.31020d0,-0.30230d0,-0.29460d0,-0.28780d0,-0.28130d0,-0.27630d0,-0.26990d0,-0.26200d0,-0.25410d0,-0.24650d0,-0.23920d0,&
-0.23230d0,-0.22580d0,-0.21950d0,-0.21360d0,-0.20800d0,-0.20260d0,-0.19750d0,-0.19270d0,-0.18800d0,-0.18360d0,-0.17940d0,&
-0.17540d0,-0.17150d0,-0.16780d0,-0.16430d0,-0.16090d0,-0.15760d0,-0.15450d0,-0.15150d0,-0.14860d0,-0.14580d0,-0.14320d0,&
-0.14060d0,-0.13810d0,-0.13570d0,-0.13330d0,-0.13110d0,-0.12890d0,-0.12680d0,-0.12480d0,-0.12280d0,-0.12090d0,-0.11910d0,&
-0.11730d0,-0.11550d0,-0.11390d0,-0.11220d0,-0.11060d0,-0.10910d0,-0.10760d0,-0.10610d0,-0.10470d0,-0.10330d0,-0.10200d0,&
-0.10070d0,-0.09939d0,-0.09815d0,-0.09694d0,-0.09575d0,-0.09460d0,-0.09348d0,-0.09238d0,-0.09131d0,-0.09026d0,-0.08924d0,&
-0.08825d0,-0.08727d0,-0.08632d0,-0.08539d0,-0.08448d0,-0.08359d0,-0.08272d0,-0.08186d0,-0.08103d0,-0.08021d0,-0.07941d0,&
-0.07863d0,-0.07786d0,-0.07711d0,-0.07638d0,-0.07566d0,-0.07495d0,-0.07425d0,-0.07357d0,-0.07290d0,-0.07225d0,-0.07161d0,&
-0.07098d0,-0.07036d0,-0.06975d0,-0.06915d0,-0.06857d0,-0.06799d0,-0.06743d0,-0.06687d0,-0.06633d0,-0.06579d0,-0.54000d0,&
-0.54000d0,-0.53980d0,-0.53950d0,-0.53910d0,-0.53850d0,-0.53780d0,-0.53700d0,-0.53600d0,-0.53490d0,-0.53370d0,-0.53230d0,&
-0.53070d0,-0.52890d0,-0.52700d0,-0.52490d0,-0.52270d0,-0.52020d0,-0.51760d0,-0.51480d0,-0.51170d0,-0.50850d0,-0.50510d0,&
-0.50150d0,-0.49770d0,-0.49370d0,-0.48940d0,-0.48500d0,-0.48030d0,-0.47540d0,-0.47030d0,-0.46500d0,-0.45950d0,-0.45380d0,&
-0.44790d0,-0.44180d0,-0.43560d0,-0.42920d0,-0.42270d0,-0.41620d0,-0.40950d0,-0.40290d0,-0.39620d0,-0.38940d0,-0.38260d0,&
-0.37580d0,-0.36880d0,-0.36180d0,-0.35470d0,-0.34740d0,-0.34010d0,-0.33300d0,-0.32610d0,-0.31940d0,-0.31310d0,-0.30700d0,&
-0.30140d0,-0.29600d0,-0.29120d0,-0.28650d0,-0.28240d0,-0.28030d0,-0.27580d0,-0.26920d0,-0.26250d0,-0.25590d0,-0.24950d0,&
-0.24330d0,-0.23740d0,-0.23170d0,-0.22630d0,-0.22110d0,-0.21610d0,-0.21140d0,-0.20680d0,-0.20250d0,-0.19830d0,-0.19430d0,&
-0.19050d0,-0.18680d0,-0.18330d0,-0.17990d0,-0.17660d0,-0.17350d0,-0.17050d0,-0.16750d0,-0.16470d0,-0.16200d0,-0.15940d0,&
-0.15680d0,-0.15440d0,-0.15200d0,-0.14970d0,-0.14750d0,-0.14530d0,-0.14320d0,-0.14120d0,-0.13920d0,-0.13730d0,-0.13550d0,&
-0.13370d0,-0.13190d0,-0.13020d0,-0.12850d0,-0.12690d0,-0.12530d0,-0.12380d0,-0.12230d0,-0.12090d0,-0.11950d0,-0.11810d0,&
-0.11670d0,-0.11540d0,-0.11410d0,-0.11290d0,-0.11170d0,-0.11050d0,-0.10930d0,-0.10820d0,-0.10700d0,-0.10590d0,-0.10490d0,&
-0.10380d0,-0.10280d0,-0.10180d0,-0.10080d0,-0.09988d0,-0.09894d0,-0.09802d0,-0.09712d0,-0.09623d0,-0.09537d0,-0.09452d0,&
-0.09369d0,-0.09287d0,-0.09207d0,-0.09129d0,-0.09051d0,-0.08976d0,-0.08902d0,-0.08829d0,-0.08757d0,-0.08687d0,-0.08618d0,&
-0.08550d0,-0.08483d0,-0.08417d0,-0.08353d0,-0.08289d0,-0.08227d0,-0.08166d0,-0.50230d0,-0.50220d0,-0.50210d0,-0.50180d0,&
-0.50140d0,-0.50090d0,-0.50020d0,-0.49940d0,-0.49860d0,-0.49750d0,-0.49640d0,-0.49510d0,-0.49370d0,-0.49210d0,-0.49040d0,&
-0.48860d0,-0.48650d0,-0.48440d0,-0.48200d0,-0.47960d0,-0.47690d0,-0.47410d0,-0.47110d0,-0.46800d0,-0.46470d0,-0.46120d0,&
-0.45760d0,-0.45390d0,-0.44990d0,-0.44590d0,-0.44170d0,-0.43750d0,-0.43310d0,-0.42860d0,-0.42410d0,-0.41950d0,-0.41490d0,&
-0.41020d0,-0.40560d0,-0.40090d0,-0.39610d0,-0.39140d0,-0.38660d0,-0.38180d0,-0.37690d0,-0.37200d0,-0.36700d0,-0.36190d0,&
-0.35670d0,-0.35150d0,-0.34620d0,-0.34100d0,-0.33600d0,-0.33110d0,-0.32640d0,-0.32190d0,-0.31770d0,-0.31370d0,-0.30990d0,&
-0.30640d0,-0.30310d0,-0.30040d0,-0.29800d0,-0.29590d0,-0.29480d0,-0.29560d0,-0.28990d0,-0.28420d0,-0.27840d0,-0.27260d0,&
-0.26680d0,-0.26130d0,-0.25590d0,-0.25070d0,-0.24570d0,-0.24090d0,-0.23630d0,-0.23190d0,-0.22760d0,-0.22350d0,-0.21960d0,&
-0.21580d0,-0.21210d0,-0.20860d0,-0.20520d0,-0.20190d0,-0.19880d0,-0.19570d0,-0.19270d0,-0.18990d0,-0.18710d0,-0.18440d0,&
-0.18180d0,-0.17930d0,-0.17690d0,-0.17450d0,-0.17220d0,-0.17000d0,-0.16780d0,-0.16570d0,-0.16370d0,-0.16170d0,-0.15970d0,&
-0.15780d0,-0.15600d0,-0.15420d0,-0.15250d0,-0.15080d0,-0.14910d0,-0.14750d0,-0.14590d0,-0.14440d0,-0.14280d0,-0.14140d0,&
-0.13990d0,-0.13850d0,-0.13720d0,-0.13580d0,-0.13450d0,-0.13320d0,-0.13200d0,-0.13070d0,-0.12950d0,-0.12830d0,-0.12720d0,&
-0.12600d0,-0.12490d0,-0.12380d0,-0.12280d0,-0.12170d0,-0.12070d0,-0.11970d0,-0.11870d0,-0.11770d0,-0.11680d0,-0.11590d0,&
-0.11490d0,-0.11400d0,-0.11320d0,-0.11230d0,-0.11140d0,-0.11060d0,-0.10980d0,-0.10900d0,-0.10820d0,-0.10740d0,-0.10660d0,&
-0.10590d0,-0.10510d0,-0.10440d0,-0.10370d0,-0.47820d0,-0.47810d0,-0.47800d0,-0.47770d0,-0.47730d0,-0.47680d0,-0.47620d0,&
-0.47550d0,-0.47470d0,-0.47370d0,-0.47270d0,-0.47150d0,-0.47020d0,-0.46880d0,-0.46720d0,-0.46560d0,-0.46380d0,-0.46180d0,&
-0.45980d0,-0.45760d0,-0.45530d0,-0.45280d0,-0.45030d0,-0.44760d0,-0.44480d0,-0.44190d0,-0.43880d0,-0.43570d0,-0.43250d0,&
-0.42920d0,-0.42590d0,-0.42250d0,-0.41900d0,-0.41550d0,-0.41200d0,-0.40850d0,-0.40490d0,-0.40130d0,-0.39780d0,-0.39410d0,&
-0.39050d0,-0.38690d0,-0.38320d0,-0.37940d0,-0.37560d0,-0.37180d0,-0.36780d0,-0.36380d0,-0.35980d0,-0.35560d0,-0.35150d0,&
-0.34740d0,-0.34340d0,-0.33950d0,-0.33580d0,-0.33220d0,-0.32880d0,-0.32560d0,-0.32260d0,-0.31970d0,-0.31700d0,-0.31480d0,&
-0.31270d0,-0.31080d0,-0.30940d0,-0.30850d0,-0.30780d0,-0.30900d0,-0.30780d0,-0.30260d0,-0.29710d0,-0.29160d0,-0.28610d0,&
-0.28070d0,-0.27540d0,-0.27030d0,-0.26540d0,-0.26060d0,-0.25610d0,-0.25160d0,-0.24740d0,-0.24330d0,-0.23930d0,-0.23550d0,&
-0.23180d0,-0.22830d0,-0.22480d0,-0.22150d0,-0.21830d0,-0.21520d0,-0.21210d0,-0.20920d0,-0.20640d0,-0.20370d0,-0.20100d0,&
-0.19840d0,-0.19590d0,-0.19350d0,-0.19110d0,-0.18880d0,-0.18650d0,-0.18440d0,-0.18220d0,-0.18020d0,-0.17810d0,-0.17620d0,&
-0.17430d0,-0.17240d0,-0.17060d0,-0.16880d0,-0.16700d0,-0.16530d0,-0.16370d0,-0.16210d0,-0.16050d0,-0.15890d0,-0.15740d0,&
-0.15590d0,-0.15450d0,-0.15310d0,-0.15170d0,-0.15030d0,-0.14900d0,-0.14770d0,-0.14640d0,-0.14520d0,-0.14390d0,-0.14270d0,&
-0.14150d0,-0.14040d0,-0.13920d0,-0.13810d0,-0.13700d0,-0.13600d0,-0.13490d0,-0.13390d0,-0.13280d0,-0.13180d0,-0.13090d0,&
-0.12990d0,-0.12890d0,-0.12800d0,-0.12710d0,-0.12620d0,-0.12530d0,-0.12440d0,-0.12360d0,-0.12270d0,-0.12190d0,-0.12110d0,&
-0.12030d0,-0.46080d0,-0.46080d0,-0.46060d0,-0.46040d0,-0.46000d0,-0.45960d0,-0.45900d0,-0.45830d0,-0.45760d0,-0.45670d0,&
-0.45580d0,-0.45470d0,-0.45350d0,-0.45220d0,-0.45090d0,-0.44940d0,-0.44780d0,-0.44610d0,-0.44430d0,-0.44240d0,-0.44040d0,&
-0.43830d0,-0.43610d0,-0.43380d0,-0.43140d0,-0.42900d0,-0.42650d0,-0.42390d0,-0.42130d0,-0.41870d0,-0.41600d0,-0.41320d0,&
-0.41050d0,-0.40770d0,-0.40490d0,-0.40210d0,-0.39930d0,-0.39650d0,-0.39370d0,-0.39080d0,-0.38790d0,-0.38500d0,-0.38200d0,&
-0.37900d0,-0.37590d0,-0.37280d0,-0.36960d0,-0.36640d0,-0.36300d0,-0.35970d0,-0.35620d0,-0.35290d0,-0.34960d0,-0.34640d0,&
-0.34330d0,-0.34040d0,-0.33760d0,-0.33490d0,-0.33240d0,-0.33000d0,-0.32780d0,-0.32590d0,-0.32420d0,-0.32260d0,-0.32130d0,&
-0.32040d0,-0.31960d0,-0.31940d0,-0.31990d0,-0.32140d0,-0.32150d0,-0.31610d0,-0.31090d0,-0.30550d0,-0.30020d0,-0.29490d0,&
-0.28980d0,-0.28480d0,-0.28000d0,-0.27530d0,-0.27080d0,-0.26640d0,-0.26220d0,-0.25820d0,-0.25420d0,-0.25040d0,-0.24680d0,&
-0.24320d0,-0.23980d0,-0.23640d0,-0.23320d0,-0.23010d0,-0.22700d0,-0.22410d0,-0.22130d0,-0.21850d0,-0.21580d0,-0.21320d0,&
-0.21060d0,-0.20810d0,-0.20570d0,-0.20340d0,-0.20110d0,-0.19890d0,-0.19670d0,-0.19460d0,-0.19250d0,-0.19050d0,-0.18860d0,&
-0.18660d0,-0.18480d0,-0.18290d0,-0.18110d0,-0.17940d0,-0.17770d0,-0.17600d0,-0.17440d0,-0.17280d0,-0.17120d0,-0.16970d0,&
-0.16820d0,-0.16670d0,-0.16530d0,-0.16390d0,-0.16250d0,-0.16110d0,-0.15980d0,-0.15850d0,-0.15720d0,-0.15600d0,-0.15470d0,&
-0.15350d0,-0.15230d0,-0.15120d0,-0.15000d0,-0.14890d0,-0.14780d0,-0.14670d0,-0.14560d0,-0.14460d0,-0.14360d0,-0.14260d0,&
-0.14160d0,-0.14060d0,-0.13960d0,-0.13870d0,-0.13770d0,-0.13680d0,-0.13590d0,-0.13500d0,-0.13410d0,-0.44770d0,-0.44760d0,&
-0.44750d0,-0.44730d0,-0.44690d0,-0.44650d0,-0.44600d0,-0.44540d0,-0.44470d0,-0.44390d0,-0.44310d0,-0.44210d0,-0.44100d0,&
-0.43990d0,-0.43870d0,-0.43740d0,-0.43600d0,-0.43450d0,-0.43290d0,-0.43130d0,-0.42960d0,-0.42780d0,-0.42590d0,-0.42400d0,&
-0.42210d0,-0.42000d0,-0.41800d0,-0.41590d0,-0.41380d0,-0.41160d0,-0.40940d0,-0.40720d0,-0.40500d0,-0.40280d0,-0.40060d0,&
-0.39830d0,-0.39610d0,-0.39380d0,-0.39150d0,-0.38920d0,-0.38690d0,-0.38450d0,-0.38210d0,-0.37960d0,-0.37700d0,-0.37450d0,&
-0.37180d0,-0.36910d0,-0.36630d0,-0.36350d0,-0.36060d0,-0.35780d0,-0.35510d0,-0.35240d0,-0.34980d0,-0.34730d0,-0.34500d0,&
-0.34270d0,-0.34060d0,-0.33860d0,-0.33680d0,-0.33510d0,-0.33370d0,-0.33230d0,-0.33130d0,-0.33050d0,-0.32970d0,-0.32950d0,&
-0.32960d0,-0.32980d0,-0.33100d0,-0.33440d0,-0.33210d0,-0.32670d0,-0.32150d0,-0.31630d0,-0.31110d0,-0.30600d0,-0.30100d0,&
-0.29610d0,-0.29140d0,-0.28680d0,-0.28240d0,-0.27810d0,-0.27400d0,-0.27000d0,-0.26610d0,-0.26230d0,-0.25870d0,-0.25520d0,&
-0.25170d0,-0.24840d0,-0.24520d0,-0.24210d0,-0.23910d0,-0.23610d0,-0.23330d0,-0.23050d0,-0.22780d0,-0.22520d0,-0.22260d0,&
-0.22010d0,-0.21770d0,-0.21530d0,-0.21300d0,-0.21080d0,-0.20860d0,-0.20640d0,-0.20430d0,-0.20230d0,-0.20030d0,-0.19840d0,&
-0.19650d0,-0.19460d0,-0.19280d0,-0.19100d0,-0.18930d0,-0.18760d0,-0.18590d0,-0.18430d0,-0.18270d0,-0.18110d0,-0.17950d0,&
-0.17800d0,-0.17660d0,-0.17510d0,-0.17370d0,-0.17230d0,-0.17090d0,-0.16960d0,-0.16830d0,-0.16700d0,-0.16570d0,-0.16450d0,&
-0.16330d0,-0.16210d0,-0.16090d0,-0.15970d0,-0.15860d0,-0.15750d0,-0.15640d0,-0.15530d0,-0.15420d0,-0.15320d0,-0.15210d0,&
-0.15110d0,-0.15010d0,-0.14910d0,-0.14810d0,-0.14720d0,-0.14630d0,-0.42930d0,-0.42920d0,-0.42910d0,-0.42890d0,-0.42870d0,&
-0.42830d0,-0.42790d0,-0.42740d0,-0.42690d0,-0.42620d0,-0.42560d0,-0.42480d0,-0.42400d0,-0.42310d0,-0.42220d0,-0.42120d0,&
-0.42010d0,-0.41910d0,-0.41790d0,-0.41670d0,-0.41550d0,-0.41430d0,-0.41300d0,-0.41170d0,-0.41030d0,-0.40900d0,-0.40760d0,&
-0.40620d0,-0.40480d0,-0.40340d0,-0.40200d0,-0.40060d0,-0.39920d0,-0.39770d0,-0.39630d0,-0.39480d0,-0.39330d0,-0.39180d0,&
-0.39030d0,-0.38880d0,-0.38720d0,-0.38550d0,-0.38390d0,-0.38220d0,-0.38040d0,-0.37860d0,-0.37670d0,-0.37470d0,-0.37270d0,&
-0.37070d0,-0.36860d0,-0.36660d0,-0.36460d0,-0.36260d0,-0.36070d0,-0.35890d0,-0.35720d0,-0.35560d0,-0.35400d0,-0.35260d0,&
-0.35130d0,-0.35010d0,-0.34910d0,-0.34810d0,-0.34740d0,-0.34680d0,-0.34630d0,-0.34620d0,-0.34620d0,-0.34630d0,-0.34670d0,&
-0.34740d0,-0.34850d0,-0.35060d0,-0.35660d0,-0.35290d0,-0.34720d0,-0.34200d0,-0.33690d0,-0.33180d0,-0.32680d0,-0.32200d0,&
-0.31720d0,-0.31260d0,-0.30810d0,-0.30370d0,-0.29950d0,-0.29540d0,-0.29140d0,-0.28760d0,-0.28380d0,-0.28020d0,-0.27670d0,&
-0.27320d0,-0.26990d0,-0.26670d0,-0.26350d0,-0.26050d0,-0.25750d0,-0.25460d0,-0.25180d0,-0.24900d0,-0.24630d0,-0.24370d0,&
-0.24120d0,-0.23870d0,-0.23630d0,-0.23390d0,-0.23160d0,-0.22930d0,-0.22710d0,-0.22500d0,-0.22290d0,-0.22080d0,-0.21880d0,&
-0.21680d0,-0.21490d0,-0.21300d0,-0.21120d0,-0.20940d0,-0.20760d0,-0.20590d0,-0.20410d0,-0.20250d0,-0.20080d0,-0.19920d0,&
-0.19770d0,-0.19610d0,-0.19460d0,-0.19310d0,-0.19160d0,-0.19020d0,-0.18880d0,-0.18740d0,-0.18600d0,-0.18470d0,-0.18340d0,&
-0.18210d0,-0.18080d0,-0.17960d0,-0.17840d0,-0.17710d0,-0.17600d0,-0.17480d0,-0.17360d0,-0.17250d0,-0.17140d0,-0.17030d0,&
-0.16920d0,-0.16810d0,-0.16710d0,-0.41320d0,-0.41320d0,-0.41310d0,-0.41300d0,-0.41280d0,-0.41260d0,-0.41230d0,-0.41200d0,&
-0.41160d0,-0.41120d0,-0.41080d0,-0.41030d0,-0.40980d0,-0.40920d0,-0.40870d0,-0.40810d0,-0.40750d0,-0.40680d0,-0.40620d0,&
-0.40550d0,-0.40490d0,-0.40420d0,-0.40350d0,-0.40280d0,-0.40210d0,-0.40150d0,-0.40080d0,-0.40010d0,-0.39940d0,-0.39870d0,&
-0.39800d0,-0.39730d0,-0.39660d0,-0.39590d0,-0.39520d0,-0.39450d0,-0.39370d0,-0.39290d0,-0.39210d0,-0.39130d0,-0.39040d0,&
-0.38950d0,-0.38850d0,-0.38750d0,-0.38650d0,-0.38540d0,-0.38420d0,-0.38300d0,-0.38180d0,-0.38050d0,-0.37920d0,-0.37790d0,&
-0.37660d0,-0.37530d0,-0.37410d0,-0.37290d0,-0.37190d0,-0.37080d0,-0.36990d0,-0.36900d0,-0.36820d0,-0.36750d0,-0.36690d0,&
-0.36640d0,-0.36600d0,-0.36580d0,-0.36560d0,-0.36560d0,-0.36580d0,-0.36600d0,-0.36650d0,-0.36700d0,-0.36770d0,-0.36860d0,&
-0.36980d0,-0.37140d0,-0.37390d0,-0.37810d0,-0.38520d0,-0.37700d0,-0.37110d0,-0.36580d0,-0.36070d0,-0.35570d0,-0.35090d0,&
-0.34610d0,-0.34150d0,-0.33700d0,-0.33260d0,-0.32830d0,-0.32410d0,-0.32010d0,-0.31620d0,-0.31240d0,-0.30860d0,-0.30500d0,&
-0.30150d0,-0.29810d0,-0.29480d0,-0.29150d0,-0.28840d0,-0.28530d0,-0.28230d0,-0.27940d0,-0.27650d0,-0.27370d0,-0.27100d0,&
-0.26840d0,-0.26580d0,-0.26320d0,-0.26080d0,-0.25830d0,-0.25600d0,-0.25370d0,-0.25140d0,-0.24920d0,-0.24700d0,-0.24490d0,&
-0.24280d0,-0.24080d0,-0.23880d0,-0.23680d0,-0.23490d0,-0.23300d0,-0.23120d0,-0.22940d0,-0.22760d0,-0.22580d0,-0.22410d0,&
-0.22240d0,-0.22080d0,-0.21920d0,-0.21760d0,-0.21600d0,-0.21450d0,-0.21300d0,-0.21150d0,-0.21000d0,-0.20860d0,-0.20720d0,&
-0.20580d0,-0.20440d0,-0.20310d0,-0.20180d0,-0.20040d0,-0.19920d0,-0.19790d0,-0.19670d0,-0.19540d0,-0.19420d0,-0.19300d0,&
-0.40190d0,-0.40190d0,-0.40190d0,-0.40180d0,-0.40180d0,-0.40170d0,-0.40160d0,-0.40150d0,-0.40130d0,-0.40120d0,-0.40110d0,&
-0.40090d0,-0.40080d0,-0.40060d0,-0.40050d0,-0.40040d0,-0.40020d0,-0.40010d0,-0.40000d0,-0.39990d0,-0.39980d0,-0.39970d0,&
-0.39960d0,-0.39960d0,-0.39950d0,-0.39950d0,-0.39940d0,-0.39940d0,-0.39940d0,-0.39940d0,-0.39930d0,-0.39930d0,-0.39930d0,&
-0.39920d0,-0.39920d0,-0.39910d0,-0.39900d0,-0.39890d0,-0.39880d0,-0.39860d0,-0.39840d0,-0.39820d0,-0.39790d0,-0.39760d0,&
-0.39720d0,-0.39680d0,-0.39640d0,-0.39590d0,-0.39540d0,-0.39480d0,-0.39420d0,-0.39360d0,-0.39310d0,-0.39250d0,-0.39200d0,&
-0.39150d0,-0.39100d0,-0.39060d0,-0.39020d0,-0.38990d0,-0.38970d0,-0.38950d0,-0.38940d0,-0.38930d0,-0.38930d0,-0.38950d0,&
-0.38960d0,-0.39000d0,-0.39040d0,-0.39090d0,-0.39150d0,-0.39210d0,-0.39280d0,-0.39360d0,-0.39460d0,-0.39560d0,-0.39680d0,&
-0.39820d0,-0.40000d0,-0.40220d0,-0.40520d0,-0.40980d0,-0.42080d0,-0.41930d0,-0.41160d0,-0.40520d0,-0.39960d0,-0.39430d0,&
-0.38920d0,-0.38430d0,-0.37950d0,-0.37490d0,-0.37040d0,-0.36610d0,-0.36180d0,-0.35770d0,-0.35360d0,-0.34970d0,-0.34590d0,&
-0.34210d0,-0.33850d0,-0.33500d0,-0.33150d0,-0.32810d0,-0.32480d0,-0.32160d0,-0.31850d0,-0.31540d0,-0.31240d0,-0.30950d0,&
-0.30660d0,-0.30390d0,-0.30110d0,-0.29840d0,-0.29580d0,-0.29330d0,-0.29080d0,-0.28830d0,-0.28590d0,-0.28350d0,-0.28120d0,&
-0.27900d0,-0.27670d0,-0.27460d0,-0.27240d0,-0.27030d0,-0.26830d0,-0.26630d0,-0.26430d0,-0.26230d0,-0.26040d0,-0.25850d0,&
-0.25670d0,-0.25490d0,-0.25310d0,-0.25130d0,-0.24960d0,-0.24790d0,-0.24630d0,-0.24460d0,-0.24300d0,-0.24140d0,-0.23990d0,&
-0.23830d0,-0.23680d0,-0.23530d0,-0.23380d0,-0.23240d0,-0.23100d0,-0.22960d0,-0.22820d0,-0.39990d0,-0.39990d0,-0.39990d0,&
-0.39990d0,-0.39990d0,-0.39990d0,-0.39990d0,-0.40000d0,-0.40000d0,-0.40000d0,-0.40010d0,-0.40020d0,-0.40020d0,-0.40030d0,&
-0.40040d0,-0.40060d0,-0.40070d0,-0.40090d0,-0.40110d0,-0.40130d0,-0.40150d0,-0.40170d0,-0.40200d0,-0.40230d0,-0.40260d0,&
-0.40290d0,-0.40320d0,-0.40350d0,-0.40380d0,-0.40420d0,-0.40450d0,-0.40480d0,-0.40520d0,-0.40550d0,-0.40580d0,-0.40610d0,&
-0.40640d0,-0.40660d0,-0.40690d0,-0.40710d0,-0.40720d0,-0.40740d0,-0.40750d0,-0.40760d0,-0.40770d0,-0.40770d0,-0.40770d0,&
-0.40760d0,-0.40750d0,-0.40740d0,-0.40720d0,-0.40710d0,-0.40690d0,-0.40680d0,-0.40670d0,-0.40660d0,-0.40650d0,-0.40650d0,&
-0.40650d0,-0.40650d0,-0.40660d0,-0.40670d0,-0.40690d0,-0.40720d0,-0.40750d0,-0.40780d0,-0.40820d0,-0.40880d0,-0.40940d0,&
-0.41000d0,-0.41080d0,-0.41160d0,-0.41240d0,-0.41330d0,-0.41420d0,-0.41520d0,-0.41630d0,-0.41750d0,-0.41890d0,-0.42050d0,&
-0.42220d0,-0.42430d0,-0.42680d0,-0.43000d0,-0.43430d0,-0.44120d0,-0.45510d0,-0.44820d0,-0.44070d0,-0.43400d0,-0.42790d0,&
-0.42230d0,-0.41700d0,-0.41190d0,-0.40700d0,-0.40230d0,-0.39780d0,-0.39330d0,-0.38900d0,-0.38480d0,-0.38080d0,-0.37680d0,&
-0.37290d0,-0.36910d0,-0.36550d0,-0.36190d0,-0.35840d0,-0.35490d0,-0.35160d0,-0.34830d0,-0.34510d0,-0.34200d0,-0.33890d0,&
-0.33590d0,-0.33300d0,-0.33010d0,-0.32730d0,-0.32460d0,-0.32190d0,-0.31930d0,-0.31670d0,-0.31410d0,-0.31170d0,-0.30920d0,&
-0.30680d0,-0.30450d0,-0.30220d0,-0.29990d0,-0.29770d0,-0.29550d0,-0.29340d0,-0.29130d0,-0.28920d0,-0.28720d0,-0.28520d0,&
-0.28320d0,-0.28130d0,-0.27940d0,-0.27750d0,-0.27570d0,-0.27390d0,-0.27210d0,-0.27040d0,-0.26870d0,-0.26700d0,-0.26530d0,&
-0.26370d0,-0.26200d0,-0.26040d0,-0.25890d0,-0.25730d0,-0.40670d0,-0.40670d0,-0.40680d0,-0.40680d0,-0.40690d0,-0.40700d0,&
-0.40720d0,-0.40730d0,-0.40750d0,-0.40780d0,-0.40800d0,-0.40830d0,-0.40860d0,-0.40890d0,-0.40930d0,-0.40970d0,-0.41010d0,&
-0.41060d0,-0.41100d0,-0.41150d0,-0.41210d0,-0.41260d0,-0.41320d0,-0.41380d0,-0.41440d0,-0.41500d0,-0.41570d0,-0.41630d0,&
-0.41700d0,-0.41760d0,-0.41830d0,-0.41900d0,-0.41970d0,-0.42030d0,-0.42100d0,-0.42160d0,-0.42230d0,-0.42290d0,-0.42360d0,&
-0.42420d0,-0.42470d0,-0.42530d0,-0.42590d0,-0.42640d0,-0.42690d0,-0.42730d0,-0.42780d0,-0.42820d0,-0.42860d0,-0.42890d0,&
-0.42930d0,-0.42960d0,-0.43000d0,-0.43030d0,-0.43070d0,-0.43100d0,-0.43140d0,-0.43180d0,-0.43230d0,-0.43270d0,-0.43320d0,&
-0.43370d0,-0.43430d0,-0.43490d0,-0.43550d0,-0.43620d0,-0.43690d0,-0.43770d0,-0.43850d0,-0.43940d0,-0.44030d0,-0.44130d0,&
-0.44230d0,-0.44340d0,-0.44440d0,-0.44550d0,-0.44670d0,-0.44790d0,-0.44920d0,-0.45050d0,-0.45200d0,-0.45350d0,-0.45520d0,&
-0.45700d0,-0.45900d0,-0.46120d0,-0.46380d0,-0.46690d0,-0.47050d0,-0.47510d0,-0.48150d0,-0.49340d0,-0.50360d0,-0.49810d0,&
-0.49100d0,-0.48400d0,-0.47730d0,-0.47090d0,-0.46500d0,-0.45940d0,-0.45400d0,-0.44890d0,-0.44400d0,-0.43920d0,-0.43460d0,&
-0.43020d0,-0.42590d0,-0.42170d0,-0.41760d0,-0.41360d0,-0.40980d0,-0.40600d0,-0.40230d0,-0.39870d0,-0.39520d0,-0.39170d0,&
-0.38840d0,-0.38510d0,-0.38190d0,-0.37870d0,-0.37560d0,-0.37260d0,-0.36970d0,-0.36670d0,-0.36390d0,-0.36110d0,-0.35840d0,&
-0.35570d0,-0.35300d0,-0.35050d0,-0.34790d0,-0.34540d0,-0.34300d0,-0.34050d0,-0.33820d0,-0.33590d0,-0.33360d0,-0.33130d0,&
-0.32910d0,-0.32690d0,-0.32480d0,-0.32270d0,-0.32060d0,-0.31860d0,-0.31660d0,-0.31460d0,-0.31260d0,-0.31070d0,-0.30880d0,&
-0.30700d0,-0.30510d0,-0.41860d0,-0.41860d0,-0.41870d0,-0.41880d0,-0.41890d0,-0.41910d0,-0.41920d0,-0.41950d0,-0.41970d0,&
-0.42000d0,-0.42040d0,-0.42070d0,-0.42110d0,-0.42150d0,-0.42200d0,-0.42250d0,-0.42300d0,-0.42360d0,-0.42410d0,-0.42480d0,&
-0.42540d0,-0.42610d0,-0.42680d0,-0.42750d0,-0.42820d0,-0.42900d0,-0.42970d0,-0.43050d0,-0.43130d0,-0.43210d0,-0.43290d0,&
-0.43370d0,-0.43450d0,-0.43540d0,-0.43620d0,-0.43700d0,-0.43780d0,-0.43860d0,-0.43940d0,-0.44020d0,-0.44100d0,-0.44180d0,&
-0.44250d0,-0.44320d0,-0.44400d0,-0.44470d0,-0.44530d0,-0.44600d0,-0.44660d0,-0.44730d0,-0.44790d0,-0.44850d0,-0.44910d0,&
-0.44970d0,-0.45030d0,-0.45090d0,-0.45160d0,-0.45220d0,-0.45290d0,-0.45360d0,-0.45430d0,-0.45500d0,-0.45580d0,-0.45660d0,&
-0.45740d0,-0.45830d0,-0.45920d0,-0.46010d0,-0.46110d0,-0.46210d0,-0.46320d0,-0.46430d0,-0.46540d0,-0.46650d0,-0.46770d0,&
-0.46890d0,-0.47010d0,-0.47130d0,-0.47260d0,-0.47400d0,-0.47540d0,-0.47690d0,-0.47840d0,-0.48010d0,-0.48180d0,-0.48360d0,&
-0.48550d0,-0.48770d0,-0.49010d0,-0.49270d0,-0.49560d0,-0.49900d0,-0.50300d0,-0.50780d0,-0.51420d0,-0.52380d0,-0.54550d0,&
-0.54160d0,-0.53660d0,-0.53010d0,-0.52330d0,-0.51660d0,-0.51000d0,-0.50370d0,-0.49760d0,-0.49190d0,-0.48630d0,-0.48100d0,&
-0.47590d0,-0.47100d0,-0.46620d0,-0.46160d0,-0.45720d0,-0.45280d0,-0.44860d0,-0.44450d0,-0.44060d0,-0.43670d0,-0.43290d0,&
-0.42920d0,-0.42560d0,-0.42200d0,-0.41860d0,-0.41520d0,-0.41190d0,-0.40860d0,-0.40550d0,-0.40240d0,-0.39930d0,-0.39630d0,&
-0.39340d0,-0.39050d0,-0.38770d0,-0.38490d0,-0.38220d0,-0.37950d0,-0.37690d0,-0.37430d0,-0.37180d0,-0.36930d0,-0.36680d0,&
-0.36440d0,-0.36200d0,-0.35970d0,-0.35740d0,-0.35520d0,-0.35290d0,-0.35070d0,-0.34860d0,-0.34650d0,-0.34440d0,-0.43170d0,&
-0.43170d0,-0.43180d0,-0.43190d0,-0.43200d0,-0.43220d0,-0.43240d0,-0.43270d0,-0.43290d0,-0.43330d0,-0.43360d0,-0.43400d0,&
-0.43440d0,-0.43490d0,-0.43540d0,-0.43590d0,-0.43650d0,-0.43710d0,-0.43770d0,-0.43840d0,-0.43900d0,-0.43970d0,-0.44050d0,&
-0.44120d0,-0.44200d0,-0.44280d0,-0.44360d0,-0.44450d0,-0.44530d0,-0.44620d0,-0.44700d0,-0.44790d0,-0.44880d0,-0.44970d0,&
-0.45060d0,-0.45150d0,-0.45240d0,-0.45330d0,-0.45420d0,-0.45500d0,-0.45590d0,-0.45680d0,-0.45770d0,-0.45850d0,-0.45930d0,&
-0.46020d0,-0.46100d0,-0.46180d0,-0.46260d0,-0.46330d0,-0.46410d0,-0.46490d0,-0.46560d0,-0.46640d0,-0.46720d0,-0.46790d0,&
-0.46870d0,-0.46950d0,-0.47040d0,-0.47120d0,-0.47210d0,-0.47290d0,-0.47380d0,-0.47470d0,-0.47570d0,-0.47670d0,-0.47770d0,&
-0.47870d0,-0.47980d0,-0.48090d0,-0.48210d0,-0.48320d0,-0.48440d0,-0.48560d0,-0.48680d0,-0.48810d0,-0.48940d0,-0.49060d0,&
-0.49200d0,-0.49340d0,-0.49480d0,-0.49620d0,-0.49770d0,-0.49930d0,-0.50090d0,-0.50260d0,-0.50440d0,-0.50640d0,-0.50840d0,&
-0.51060d0,-0.51290d0,-0.51540d0,-0.51820d0,-0.52120d0,-0.52470d0,-0.52870d0,-0.53330d0,-0.53910d0,-0.54690d0,-0.55950d0,&
-0.57810d0,-0.57410d0,-0.57020d0,-0.56420d0,-0.55790d0,-0.55130d0,-0.54480d0,-0.53830d0,-0.53200d0,-0.52590d0,-0.52000d0,&
-0.51430d0,-0.50880d0,-0.50350d0,-0.49840d0,-0.49350d0,-0.48870d0,-0.48400d0,-0.47950d0,-0.47510d0,-0.47090d0,-0.46680d0,&
-0.46270d0,-0.45880d0,-0.45490d0,-0.45120d0,-0.44750d0,-0.44390d0,-0.44040d0,-0.43700d0,-0.43370d0,-0.43040d0,-0.42720d0,&
-0.42400d0,-0.42090d0,-0.41790d0,-0.41490d0,-0.41200d0,-0.40910d0,-0.40630d0,-0.40350d0,-0.40080d0,-0.39810d0,-0.39550d0,&
-0.39290d0,-0.39040d0,-0.38790d0,-0.38540d0,-0.38300d0,-0.38060d0,-0.37820d0,-0.44480d0,-0.44480d0,-0.44490d0,-0.44500d0,&
-0.44510d0,-0.44530d0,-0.44550d0,-0.44570d0,-0.44600d0,-0.44640d0,-0.44670d0,-0.44710d0,-0.44760d0,-0.44800d0,-0.44860d0,&
-0.44910d0,-0.44970d0,-0.45030d0,-0.45090d0,-0.45160d0,-0.45220d0,-0.45300d0,-0.45370d0,-0.45450d0,-0.45530d0,-0.45610d0,&
-0.45690d0,-0.45780d0,-0.45860d0,-0.45950d0,-0.46040d0,-0.46130d0,-0.46220d0,-0.46310d0,-0.46410d0,-0.46500d0,-0.46590d0,&
-0.46690d0,-0.46780d0,-0.46870d0,-0.46970d0,-0.47060d0,-0.47150d0,-0.47240d0,-0.47330d0,-0.47420d0,-0.47510d0,-0.47600d0,&
-0.47690d0,-0.47780d0,-0.47860d0,-0.47950d0,-0.48030d0,-0.48120d0,-0.48210d0,-0.48300d0,-0.48390d0,-0.48480d0,-0.48570d0,&
-0.48660d0,-0.48760d0,-0.48850d0,-0.48950d0,-0.49050d0,-0.49150d0,-0.49260d0,-0.49370d0,-0.49480d0,-0.49590d0,-0.49710d0,&
-0.49830d0,-0.49950d0,-0.50080d0,-0.50200d0,-0.50330d0,-0.50460d0,-0.50590d0,-0.50720d0,-0.50860d0,-0.51000d0,-0.51140d0,&
-0.51290d0,-0.51440d0,-0.51590d0,-0.51750d0,-0.51910d0,-0.52090d0,-0.52270d0,-0.52460d0,-0.52660d0,-0.52860d0,-0.53080d0,&
-0.53320d0,-0.53570d0,-0.53850d0,-0.54150d0,-0.54470d0,-0.54850d0,-0.55270d0,-0.55760d0,-0.56360d0,-0.57120d0,-0.58280d0,&
-0.60870d0,-0.60460d0,-0.60110d0,-0.59620d0,-0.59040d0,-0.58430d0,-0.57800d0,-0.57160d0,-0.56520d0,-0.55890d0,-0.55270d0,&
-0.54670d0,-0.54080d0,-0.53520d0,-0.52960d0,-0.52430d0,-0.51910d0,-0.51410d0,-0.50930d0,-0.50450d0,-0.49990d0,-0.49550d0,&
-0.49110d0,-0.48690d0,-0.48270d0,-0.47870d0,-0.47480d0,-0.47090d0,-0.46720d0,-0.46350d0,-0.45990d0,-0.45640d0,-0.45300d0,&
-0.44960d0,-0.44630d0,-0.44310d0,-0.43990d0,-0.43680d0,-0.43370d0,-0.43070d0,-0.42780d0,-0.42490d0,-0.42210d0,-0.41930d0,&
-0.41650d0,-0.41380d0,-0.41120d0,-0.40860d0/)
end module sdata

!==============================================================================
module Eparallel
use param,only : linux,windows
implicit none
contains
  !-------------------------------------------------------------------
  subroutine mkdirport(DIRECTORY)
  !use ifport
  implicit none
  character(len=*) :: DIRECTORY
  integer :: isys
  !mkdirport is portable mkdir for ifort and gfortran.
    open(19,file=DIRECTORY//'/fictive',status='replace',err=1)
    close(19)
    if(windows) isys=SYSTEM('del '//DIRECTORY//'/fictive')
    if(linux)   isys=SYSTEM('rm  '//DIRECTORY//'/fictive')
    return
  1 isys=SYSTEM('mkdir '//DIRECTORY)
    return
  end subroutine mkdirport
  !-------------------------------------------------------------------
  subroutine eeas_pll(nthread)
  !use ifport
  implicit none
  integer :: nthread,isys,i
  character :: ci*3,fil*80
  !
  !executes program eeas in parallel.
  do i=1,nthread
    write(ci,'(i0)') i
    call mkdirport('thread'//trim(ci))
    write(61,'(2a)')'DIRECTORY = ','thread'//trim(ci)
    !
    fil='thread'//trim(ci)//'/threadno'
    open(20,file=trim(fil),status='unknown')
    write(20,'(i0)') i
    close(20)
  enddo
  !
  if(windows)then
    !eeas.exe storage: C:\eeas.exe;
    !eeas.cmd composed in "." directory of inputX.
    open(21,file='eeas.cmd',status='unknown')
    do i=1,nthread
      write(ci,'(i0)') i
      write(21,'(a)') 'cd '//trim('thread'//ci) !go to "thread_i"
      if(i<nthread)then
        write(21,'(a)') '\eeas.exe &'
      else
        write(21,'(a)') '\eeas.exe'
      endif
      write(21,'(a)') 'cd ..\'                  !go back to "."
    enddo
    close(21)
    !eeas.cmd working in "." directory of inputX.
    isys = SYSTEM('eeas.cmd')
    return
  elseif(linux)then
    !eeas.exe storage: ~/bin/eeas.exe ;
    !eeas.sh composed in "." of inputX.
    open(21,file='eeas.sh',status='unknown')
    write(21,'(a)') '#!/bin/bash'
    do i=1,nthread
      write(ci,'(i0)') i
      write(21,'(a)') 'cd '//trim('thread'//ci) !go to "thread_i"
      if(i<nthread)then
        write(21,'(a)') '~/bin/eeas.exe &'
      else
        write(21,'(a)') '~/bin/eeas.exe'
      endif
      write(21,'(a)') 'cd ../'                  !go back to "."
    enddo
    write(21,'(a)') 'wait'
    write(21,'(a)') '#'
    close(21)
    isys = SYSTEM('chmod +x eeas.sh')
    !eeas.sh working in "." of inputX.
    isys = SYSTEM('eeas.sh')
    return
  endif
  end subroutine eeas_pll
end module Eparallel

!==============================================================================
module DifferentialEvolution
  use param,only : dp
  implicit none

! subroutine DEM(errsub,XCmin,XCmax,bestmem_XC,Dim_XC)
! Differential Evolution for Optimal Control Problems.
!
! Written by Dr. Feng-Sheng Wang, Department of Chemical Engineering,
! National Chung Cheng University, Chia-Yi 621, Taiwan. 
! Ref.:
! R. STORN and K.V. PRICE, J. Global Optimization 11, 341-59 (1997). 
! http://www1.icsi.berkeley.edu/~storn/code.html
!
! intent(in) from external module:
!   Dim_XC : Dimension of decision parameters.
! intent(in):
!   NP : Population size.
!   itermax : Maximum number of iteration.
!   strategy=1,2,...,6 : Strategy of mutation operations, 2 is default.
!   method(1) = 0, Fixed mutation scaling factors F_XC,
!                  = 1, Random mutation scaling factors F_XC=[0, 1],
!                  = 2, Random mutation scaling factors F_XC=[-1, 1]. 
!   method(2) = 1, Random combination factor F_CR used for 
!                         strategy = 6 in mutation operation, 
!                   = 0, fixed combined factor provided by the user .
!   method(3) = 1, Saving results in external data file.
!                   = other, displaying results only.
!   errf : User provided subroutine errf(xc,fitness), where "xc" is 
!       decision parameter vector and "fitness" is fitness value.
!   XCmin(Dim_XC) : Lower bound of decision parameters.
!   XCmax(Dim_XC) : Upper bound of decision parameters.
!   VTR : Desired fitness value.
!   CR_XC : Crossover factor for decision parameters.
!   refresh : Intermediate output produced after "refresh" iterations,
!       with "refresh < 1" no intermediate output.
!
! intent(in) and modified (depending on method):
!   F_XC : Mutation scaling factor for decision parameters.
!   F_CR : Mutation scaling factor for crossover factor, with strategy=6.
!
! intent(out):
!   bestval : Best value of fitness in error function.
!   bestmen_XC(Dim_XC) : Best decision parameters.
!   nfeval : Number of function calls.
!   itval : Iteration for which the bestval occurred.

  integer :: NP,itermax,strategy,refresh,method(3),nfeval,itval
  real(dp) :: VTR,CR_XC,F_XC,F_CR,bestval
contains
  !--------------------------------------------------------------------
  subroutine DEM(errsub,XCmin,XCmax,bestmem_XC,Dim_XC)
  implicit none
  integer,intent(in) :: Dim_XC
  real(dp),intent(in)  :: XCmin(Dim_XC),XCmax(Dim_XC)  
  real(dp),intent(out) :: bestmem_XC(Dim_XC)
  !    
  integer :: i, ibest, iter
  integer, dimension(NP) :: rot, a1, a2, a3, a4, a5, rt
  integer, dimension(4) :: ind
  real(dp),parameter :: bohr=0.5291772083d0  
  real(dp) :: tempval
  real(dp), dimension(NP,Dim_XC) :: pop_XC,bm_XC,mui_XC,mpo_XC,&
    popold_XC, rand_XC, ui_XC
  real(dp), dimension(NP) :: val
  real(dp), dimension(Dim_XC) :: bestmemit_XC, rand_C1, tmp
  external errsub
  !
  ! Initialize a population. 
  pop_XC=0.0d0
  do i=1,NP
    call random_number(rand_C1)
    pop_XC(i,:)=XCmin+rand_C1*(XCmax-XCmin)
  end do

  ! Evaluate fitness functions and find the best member.
  val=0.0d0
  nfeval=0
  ibest=1
  tmp(:)=pop_XC(1,:)
  call errsub(tmp, val(1))
  bestval=val(1)
  nfeval=nfeval+1
  do i=2,NP
    tmp(:)=pop_XC(i,:)
    call errsub(tmp,val(i))
    nfeval=nfeval+1
    if (val(i) < bestval) then
      ibest=i
      bestval=val(i)
    end if
  end do
  bestmemit_XC=pop_XC(ibest,:)
  bestmem_XC(:)=bestmemit_XC(:)
  itval=1

  ! Perform evolutionary computation.
  bm_XC=0.0d0
  rot=(/(i,i=0,NP-1)/)
  iter=1
  do while (iter <= itermax)
    popold_XC=pop_XC
    ! Mutation operation.
    ind=randperm(4)
    a1=randperm(NP)
    rt=mod(rot+ind(1),NP)
    a2=a1(rt+1)
    rt=mod(rot+ind(2),NP)
    a3=a2(rt+1)
    rt=mod(rot+ind(3),NP)
    a4=a3(rt+1)
    rt=mod(rot+ind(4),NP)
    a5=a4(rt+1)
    bm_XC=spread(bestmemit_XC, DIM=1, NCOPIES=NP)

    ! Generating a random sacling factor.
    select case (method(1))
      case (1)
        call random_number(F_XC)
      case(2)
        call random_number(F_XC)
        F_XC=2.0d0*F_XC-1.0d0
    end select

    ! select a mutation strategy.
    select case (strategy)
    case (1)
      ui_XC=bm_XC + &
          F_XC*(popold_XC(a1,:)-popold_XC(a2,:))
    case default
      ui_XC=popold_XC(a3,:) + &
          F_XC*(popold_XC(a1,:)-popold_XC(a2,:))
    case (3)
      ui_XC=popold_XC + &
          F_XC*(bm_XC-popold_XC + popold_XC(a1,:)-popold_XC(a2,:))
    case (4)
      ui_XC=bm_XC + &
          F_XC*(popold_XC(a1,:)-popold_XC(a2,:) + &
          popold_XC(a3,:)-popold_XC(a4,:))
    case (5)
      ui_XC=popold_XC(a5,:) + &
          F_XC*(popold_XC(a1,:)-popold_XC(a2,:) + &
          popold_XC(a3,:)-popold_XC(a4,:))
    case (6) ! A linear crossover combination of bm_XC and popold_XC
      if (method(2) == 1) call random_number(F_CR) 
      ui_XC=popold_XC + &
          F_CR*(bm_XC - popold_XC) + &
          F_XC*(popold_XC(a1,:) - popold_XC(a2,:))
    end select

    ! Crossover operation.
    call random_number(rand_XC)
    mui_XC=0.0d0
    mpo_XC=0.0d0
    where (rand_XC < CR_XC)
      mui_XC=1.0d0
      ! mpo_XC=0.0d0
    elsewhere
      ! mui_XC=0.0d0
      mpo_XC=1.0d0
    end where
    ui_XC=popold_XC*mpo_XC+ui_XC*mui_XC

    ! Evaluate fitness functions and find the best member.
    do i=1,NP
      ! Confine each of feasible individuals in the lower-upper bound.
      ui_XC(i,:)=max(min(ui_XC(i,:),XCmax),XCmin)
      tmp(:)=ui_XC(i,:)
      call errsub(tmp,tempval)
      nfeval=nfeval+1
      if (tempval < val(i)) then
        pop_XC(i,:)=ui_XC(i,:)
        val(i)=tempval
        if (tempval < bestval) then
          bestval=tempval
          itval=iter
          bestmem_XC(:)=ui_XC(i,:)
        end if
      end if
    end do
    bestmemit_XC(:)=bestmem_XC(:)
    if( (refresh > 0) .and. (mod(iter,refresh)==0)) then
      if (method(3)==1) write(61,203) iter
      write(*,203) iter
      do i=1,Dim_XC
        if (method(3)==1) write(61,202) i, bestmem_XC(i)*bohr
        write(*,202) i,bestmem_XC(i)*bohr
      end do
      if (method(3)==1) write(61,201) bestval
        write(*,201) bestval
    end if
    iter=iter+1
    if(bestval <= VTR .and. refresh > 0) then
      exit
    endif
  end do
  return
  201 format(2x, 'bestval =', es9.1 /)
  202 format(5x, 'bestmem_XC(', I3, ') =', es10.3)
  203 format(2x, 'No. of iteration  =', I8)
  end subroutine DEM
  !-------------------------------------------------------------------
  function randperm(num)
  implicit none
  integer, intent(in) :: num
  integer :: number, i, j, k
  integer, dimension(num) :: randperm
  real(dp), dimension(num) :: rand2
  intrinsic random_number
  call random_number(rand2)
  do i=1,num
     number=1
     do j=1,num
        if (rand2(i) > rand2(j)) then
          number=number+1
        end if
     end do
     do k=1,i-1
        if (rand2(i) <= rand2(k) .and. rand2(i) >= rand2(k)) then
          number=number+1
        end if
     end do
     randperm(i)=number
  end do
  return
  end function randperm
end module DifferentialEvolution

!======================================================================

  !=======================================================================
  !This program is free software under the terms of the GNU General Public
  !License as published by the Free Software Foundation.
  !Author: John O. Rundgren, jru@KTH.se ,
  !        KTH Royal Institute of Technology, Stockholm, Sweden.
  !Version: 28 March 2021.
  !-----------------------------------------------------------------------
  program eeas

  !program EEAS
  !Elastic Electron-Atom Scattering in Solids and Solid Surfaces,
  !author: John Rundgren, jru@kth.se .
  !The author appreciates acknowledgement in publications by citation:
  !J. Rundgren, Phys.Rev.B68,125405(2003),
  !             Phys.Rev.B76,195441(2007).
  implicit none
  character(len=1) :: Pot,WF
  character(len=127) :: outdir
  character(len=3) :: cie
  character,allocatable :: idElemA(:)*5,idZA(:)*5

  integer,parameter :: dp=selected_real_kind(15,307)
  integer :: nxx,nieq,ne,nlat,nshell,nsp,nsr,nthread,lmax
  integer :: ie,ithread
  integer,allocatable :: neq(:),nx(:),nxR(:),ia(:,:)

  real(dp),parameter :: rydb=13.60569172d0,pi=acos(-1.d0)
  real(dp) :: Einc,Vcry0,Vxc0,gam,zet
  real(dp),allocatable :: ad(:,:),eev(:),v0ev(:),sdat(:,:),sp(:),sr(:),&
    rmt(:),rx(:,:),dx(:),z(:),rho(:,:),rs(:,:),xcfac(:),&
    Vcry(:,:),VxcR(:),Vtot(:,:),Vxc(:,:)

  !PScal variables.
  integer :: iatom,kappa,noru,nory

  !alfa=fine-structure constant, c=speed of light, cm2=1/c**2.
  real(dp),parameter :: alfa=7.297352533d-03
  real(dp),parameter :: clight=2.d0/alfa, cm2=alfa*alfa*0.25d0

  !phase shifts.
  integer :: l,ir
  real(dp) :: q,emv0
  real(dp),allocatable :: psu(:,:),psd(:,:),psu1(:,:),psd1(:,:)
  real(dp) :: relerr,abserr

  !LINDHARD's const = Lconst.
  real(dp) :: pF,Esdat,Lsdat
  real(dp),allocatable :: EmVxc0(:),Lrs(:),Ltest(:),Lconst(:)

  !EEAS import from EEASiSSS.
  open(1732,file='../uinp1',form='unformatted',status='unknown')
  read(1732) nxx,nieq,ne,nlat,nshell,nsp,nsr,nthread,lmax
  close(1732)
  !
  allocate(neq(nieq),nx(nieq),ia(nshell,nieq),ad(nshell,nieq), &
    idElemA(nieq),idZA(nieq),eev(ne),v0ev(ne),sdat(nsp,nsr),sp(nsp),sr(nsr), &
    rx(nxx,nieq),dx(nieq),rmt(nieq),z(nieq),rho(nxx,nieq),rs(nxx,nieq), &
    Vtot(nxx,nieq),Vcry(nxx,nieq),Vxc(nxx,nieq),VxcR(nieq),nxR(nieq), &
    xcfac(nieq),EmVxc0(nieq),Lconst(nieq),Lrs(nieq),Ltest(nieq), &
    psu(0:lmax,nieq),psd(0:lmax,nieq), &
    psu1(0:lmax,nieq),psd1(0:lmax,nieq) )
  !
  open(1732,file='../uinp2',form='unformatted',status='unknown')
  read(1732) outdir,Pot,WF,idElemA,idZA,neq,nx,dx,rx,ad,ia, &
    sp,sr,sdat,eev,Vcry,Vcry0,rmt,nxR,z,rho,rs,xcfac,relerr,abserr
  close(1732)
  !
  !THREAD definition.
  open(20,file='threadno',status='unknown')
  read(20,*) ithread
  close(20)
  !
  !LOGFILE and RESULT of eeas(ithread,ie).
  psu=0.d0; psd=0.d0; psu1=0.d0; psd1=0.d0
  do ie=ithread,ne,nthread
    write(cie,'(i0)') ie
    open(611,file='../ulog'//trim(cie),status='unknown')
    Einc=eev(ie)/rydb
    call MTvsE(ie)
    call PSvsE(ie)
    open(20,file='../udat'//trim(cie),status='unknown',access='stream') 
    write(20) Vxc0, &
              ((psu(l,ir),l=0,lmax),ir=1,nieq), &
              ((psd(l,ir),l=0,lmax),ir=1,nieq), &
              ((psu1(l,ir),l=0,lmax),ir=1,nieq), &
              ((psd1(l,ir),l=0,lmax),ir=1,nieq)
    if(ie==ne)then
    write(611,'(/20("===="))')
    write(611,'(a)')'Lindhard correlation potential -Lconst/p at Einc = max'
    write(611,'(a)')'      for the atoms of the given crystal'
    write(611,'(20("----"))')
    write(611,'(a,20(2x,a):)')'atom   =',idElemA(:)
    write(611,'(a)')
    write(611,'(a)')'Upper energy boundary of Sernelius data base sdat(p/pF,rs),'
    write(611,'(a)')      'Einc-Vxc0(eV)'
    write(611,'(a,20(1x,f6.0):)')'      =',EmVxc0(:)*rydb
    write(611,'(a)')
    write(611,'(a)')'Electron-space radius rs at MT radius (rs in a0),'
    write(611,'(a,20(1x,f6.2):)')'MT rs =',Lrs(:)
    write(611,'(a)')
    write(611,'(a)')"Lindhard const extrapolated from sdat (MT pot. & Vxc0 step-free),"
    write(611,'(a,20(1x,f6.2):)')'const =',Ltest(:)
    write(611,'(a)')
    write(611,'(a)')'Lindhard const per atom: -sqrt((pi^3)*rho),'
    write(611,'(a,20(1x,f6.2):)')'const =',Lconst(:)
  endif
  enddo
  stop
contains

!=======================================================================
! MUFFIN-TIN SPHERES
!-----------------------------------------------------------------------
  subroutine MTvsE(ie)
  implicit none
  integer :: ie,ir,i
  real(dp) :: Einc
  !
  Einc = max(eev(ie)/rydb,1.d-04)
  write(611,*)
  write(611,900)' ie Einc(eV)',ie,eev(ie)
  !write(*  ,900)' ie Einc(eV)',ie,eev(ie)
  !
  !Vxc(i,ir) generated.        
  call calc_Vxc(Einc)
  !
  do ir=1,nieq
    VxcR(ir) = ipol(rmt(ir),nxR(ir),rx(1,ir),dx(ir),Vxc(1,ir),'Vxc')
  enddo
  Vxc0 = sum(neq*VxcR)/dble(nlat)
  !Normalization to MT-interstice continuity.
  do ir=1,nieq
    Vxc(1:nxR(ir),ir) = Vxc(1:nxR(ir),ir) - (VxcR(ir) - Vxc0)
  enddo
  ! 
  write(611,822)'VxcR(eV)',(VxcR(ir)*rydb,ir=1,nieq)
  write(611,823)'Vxc0(eV) = ',Vxc0*rydb
  if(Pot=='y'.and.ie==ne)then
    do ir=1,nieq
      open(10, &
      file='../'//trim(outdir)//'/'//'Vxc.'//idZA(ir),status='unknown')
      do i=1,nxR(ir)
        if(Vxc(i,ir)*rydb > -100.d0)then
          write(10,910) rx(i,ir),Vxc(i,ir)*rydb 
        endif
      enddo
    enddo
  endif
  !
  !Phase shift generated from XC modulated carrier potential.
  do ir=1,nieq
    Vtot(1:nxR(ir),ir) = &
    Vcry(1:nxR(ir),ir) + Vxc(1:nxR(ir),ir) * xcfac(ir)
  enddo
  emv0=Einc-Vxc0
  q=sqrt(emv0 + cm2*emv0**2)
  !
  write(611,'(a)')' ie Einc(eV)     emv0     Vxc0'
  write(611,901) ie,eev(ie),emv0*rydb,Vxc0*rydb
  900 format(a/i3,f9.4)
  901 format(i3,3f9.4)
  822 format(a/(10f8.3:))
  823 format(a,f0.3,2(2x,f0.3))
  910 format(2es14.6)
  return
  end subroutine MTvsE
  !-------------------------------------------------------------------
  subroutine calc_Vxc(Einc)
  !Sernelius's XC potential;
  implicit none
  integer :: ir,i
  real(dp) :: Einc,f(nxx),rho(nieq)
  !
  do ir=1,nieq
    do i=1,nxR(ir)
      Vxc(i,ir) = sigma(Einc,rs(i,ir))
    enddo
    !
    !smooth Vxc(i,ir) by successive 3-point binomial convolution.
    do i=1,nxR(ir)
      f(i)=Vxc(i,ir)
    enddo
    call smooth(f,nxR(ir))
    do i=1,nxR(ir)
      Vxc(i,ir)=f(i)
    enddo
    !
    !Lindhard high-energy correlation pot. =-Lconst/p.
    if(ie==ne)then
      EmVxc0(ir) = Esdat-Vxc0
      Ltest(ir)  = Lsdat
      Lrs(ir)    = rs(nxR(ir),ir)
      rho(ir)    = (0.75d0/pi)/rs(nxR(ir),ir)**3
      Lconst(ir)  = -sqrt(pi**3 *rho(ir))
    endif
  enddo
  return
  end subroutine calc_Vxc
  !-------------------------------------------------------------------
  function sigma(Einc,rs)
  implicit none
  integer :: it
  real(dp) :: sigma,Einc,rs,EF,p_pF1,p_pF2,d,s0,s1,s21,s22,a1,a2
  real(dp),parameter :: pi=acos(-1.d0),pi9_4th=(pi*2.25d0)**(1.d0/3.d0)
  !
  !The energy balance is written
  !p/pF  = sqrt{ 1 + Einc/EF + [sdat(1,rs) - sdat(p/pF,rs)] * rs }
  !sdatw = work space corresponding to sdat.
  !
  pF=pi9_4th/rs
  EF=pF*pF
  s0=1.d0+Einc/EF
  s1=sdatw(1.d0,rs)*rs   !sigma in right-hand part of energy balance.
  !
  p_pF1=sqrt(s0)
  s21=sdatw(p_pF1,rs)*rs !sigma in left-hand part of energy balance.
  a1=s21/rs
  do it=1,4
    p_pF2=sqrt(s0 + s1 - s21)
    s22=sdatw(p_pF2,rs)*rs
      !
      !it termination; a1,a2 = sdat values -0.7xyz to -0.0xyz .
      a2=s22/rs
      d=a2-a1
      if(abs(d) < 0.0005d0)then
        !write(611,*)'it ',it
        exit
      endif
      a1=a2
      !
    p_pF1=p_pF2
    s21=s22
  enddo
  sigma = s22*EF
  !sdat termination.
  Esdat = (3.d0*pF)**2
  return
  end function sigma
  !-------------------------------------------------------------------
  function sdatw(ps,rs)  !ps,rs from sigma
  implicit none
  real(dp) :: sdatw,ps,rs,ps3,v3,g3,a,b
  !sdatw extending values inside sdat(sp,sr) to energies higher
  !than sp(nps).
  !
  if(ps<=sp(nsp))then
    sdatw=sdatb(ps,rs)
    return
  else
    !sdatw -> Hartree-Fock exchange potential \prop -1/p**2 and
    !         Lindhard correlation potential \prop -1/p,
    !         the latter remains at TEM energy .
    !model:
    ! sdatw = a/(ps+b), a<0, b>0,
    ! gradient g = -a/(ps+b)**2, g>0,
    !
    ! a = v3*(ps3+b) = -v3*v3/g3, check a<0,
    ! b = -ps3 - v3/g3, check ps-ps3 >= 0 and -v3/g3 > 0.
    !
    ps3 = 3.00d0
    v3 = sdatb(ps3,rs)
    g3 = 10.d0* &    
    (0.5d0*sdatb(2.80d0,rs)-2.d0*sdatb(2.90d0,rs)+1.5d0*sdatb(3.00d0,rs))
    a = -v3*v3/g3
    b = -ps3-v3/g3
    sdatw = a/(ps+b)
    !LINDHARD approximation.
    Lsdat = a*pF
  endif
  return
  end function sdatw
  !---------------------------------------------------------------------
  function sdatb(ps,rs)
  implicit none
  integer :: k,k1,h,h1
  real(dp) :: sdatb,ps,rs,q,p
  !bivariate interpolation from
  !NIST Handbook of Mathematical Functions, 25.2.66, p. 882.
  !
  !k close to ps and h close to rs. 
  k = minloc(abs(ps-sp(:)),1)
  h = minloc(abs(rs-sr(:)),1)
  !
  if(ps-sp(k) >= 0.d0)then
    if(k==nsp)then
      k1 = k; q = 1.d0
    else
      k1 = k+1; q = (ps-sp(k))/(sp(k1)-sp(k))
    endif
  else
    if(k==1)then
      k1 = k; q = 1.d0
    else
      k1 = k-1; q = (ps-sp(k))/(sp(k)-sp(k1))
    endif
  endif
  !
  if(rs-sr(h) >= 0.d0)then
    if(h==nsr)then
      h1 = h; p = 1.d0
    else
      h1 = h+1; p = (rs-sr(h))/(sr(h1)-sr(h))
    endif
  else
    if(h==1)then
      h1 = h; p = 1.d0
    else
      h1 = h-1; p = (rs-sr(h))/(sr(h)-sr(h1))
    endif
  endif
  sdatb = (1.d0-p)*(1.d0-q)*sdat(k ,h ) + &
                 p*(1.d0-q)*sdat(k ,h1) + &
                 q*(1.d0-p)*sdat(k1,h ) + &
                        p*q*sdat(k1,h1)
  return
  end function sdatb
  !---------------------------------------------------------------------
  subroutine smooth(f,nx)
  implicit none
  integer :: i,j,nx
  real(dp) :: f(nx),g(nx)
  real(dp),parameter :: thrd=1.d0/3.d0
  !Curve smoothing by binomial convolution of coefficients 1,2,1.
  !When executed many times, it converges to the normal distribution.
  !
  do j=1,64
    !f goes to g.
    g(1)=(f(2)+f(1)+f(1))*thrd
    do i=2,nx-1
      g(i)=(f(i-1)+f(i+1)+f(i)+f(i))*0.25d0
    enddo
    g(nx)=(f(nx-1)+f(nx)+f(nx))*thrd
    !g goes back to f.
    f(1)=(g(2)+g(1)+g(1))*thrd
    do i=2,nx-1
      f(i)=(g(i-1)+g(i+1)+g(i)+g(i))*0.25d0
    enddo
    f(nx)=(g(nx-1)+g(nx)+g(nx))*thrd
  enddo
  return
  end subroutine smooth
  !-------------------------------------------------------------------
  function ipol(x,nx,r,d,f,messg)
  implicit none
  integer  :: nx,i1  
  real(dp) :: ipol,x,r(nx),d,f(nx),p1,p
  character(len=*) :: messg
  !ipol is exponential-grid lagrangian 3-point interpolation.
  !Ref.: Abramowitz and Stegun, Sec. 25.2.11.
  !
  if(x-r(nx)>0.d0)then
    write(611,900)'ipol stop: x-r(nx),r(nx)=',x-r(nx),r(nx)
    write(611,902)'error location: ',messg
    stop
  endif
  p1=(log(x/r(1)))/d+1.d0
  i1=nint(p1)
  if(i1==0) i1=1; if(i1==nx) i1=i1-1
  p=p1-i1
  ipol = &
  0.5d0*p*(p-1.d0)*f(i1-1)+(1.d0-p*p)*f(i1)+0.5d0*p*(p+1.d0)*f(i1+1)
  return
  900 format(a,es9.2,f7.4)
  902 format(2a)
  end function ipol
  !-----------------------------------------------------------------
  !finding subscript .ge. that of x in array a.
  function iofx(x,a,la,ha)
  implicit none
  integer :: iofx,i,il,ih,la,ha
  real(dp) :: x,a(la:ha)
  il=la; ih=ha
1 if(ih-il>1)then
    i=(ih+il)/2
    if(a(i)>x)then; ih=i; else; il=i; endif
    goto 1
  endif 
  iofx=ih    
  return
  end function iofx
  !
  !=====================================================================
  ! PHASE SHIFTS
  !---------------------------------------------------------------------
  subroutine PSvsE(ie)
  implicit none
  integer ::  ie,ir,l
  real(dp) :: bj(0:lmax+1),by(0:lmax+1),bjp(0:lmax+1),byp(0:lmax+1),qr
  !
  noru=0; nory=0
  do ir=1,nieq
    qr=q*rmt(ir)
    call sph_bessel_j(lmax,qr,bj)
    call sph_bessel_y(lmax,qr,by)
    do l=0,lmax
      bjp(l)=dble(l)/qr*bj(l)-bj(l+1)
      byp(l)=dble(l)/qr*by(l)-by(l+1)
    enddo
    !
    Vtot(1:nxR(ir),ir) = Vtot(1:nxR(ir),ir) * rx(1:nxR(ir),ir)
    call PScalc(ie,ir,'su',bj,by,bjp,byp)
    call PScalc(ie,ir,'sd',bj,by,bjp,byp)
  enddo
  write(611,'(3(a,i0))') &
  'ODE STEPu = ',noru,', STEPy = ',nory,', RADIAL grid = ',maxval(nxR)
  return
  end subroutine PSvsE
  !-------------------------------------------------------------------
  subroutine PScalc(ie,ir,tag,bj,by,bjp,byp)
  implicit none
  character :: tag*2,idL*3,fil*127
  integer,parameter :: neqn=2,nwork=100+21*neqn,node=2000
  integer :: ie,ir,i,l,lmin,nor,nor1,flag,iwork(5)
  real(dp) :: bj(0:lmax+1),by(0:lmax+1),bjp(0:lmax),byp(0:lmax), &
    work(nwork),t,t1,or(node),ou(2,node),or1(node),ou1(2,node), &
    u(2),dudx(2),y(2),dydx(2),ps,ps1,A,cnst
  !
  iatom=ir
  zet=2.d0*z(ir)/clight
      if(tag=='su')then; lmin=0 
  elseif(tag=='sd')then; lmin=1 
  endif
  do l=lmin,lmax
        if(tag=='su')then; kappa=-l-1 
    elseif(tag=='sd')then; kappa=l
    endif
    gam=sqrt(dble(kappa**2)-zet**2)
    do i=3,nxR(ir)
      t1=rx(i,ir)
      if(t1**gam > rx(1,ir)) exit
    enddo
 !WAVE FUNCTION u = zero AT RADIUS r = t1 varying with orbit l.
    t=t1
    A=1.d0
    u(1)=A
    u(2)=A*(dble(kappa)+gam)/zet
    flag=1
    call ODE(waveq,neqn,u,t,rmt(ir),relerr,abserr,flag, &
             nwork,work,iwork,or,ou,nor,node)
    if(flag>=3)then
      write(611,'(a,i0,a,i0)')'ODE1: l=',l,', flag=',flag; stop
    endif
    !ODE step count.
    noru=max(noru,nor)
    !phase shift.
    call waveq(t,u,dudx)
    ps = atan((u(1)*(bj(l)+q*t*bjp(l)) - dudx(1)*t*bj(l))/ &
              (u(1)*(by(l)+q*t*byp(l)) - dudx(1)*t*by(l)))
        if(tag=='su')then; psu(l,ir)=ps 
    elseif(tag=='sd')then; psd(l,ir)=ps 
    endif
 !END WAVE FUNCTION u = zero.
 !
 !WAVE FUNCTION y = unity AT RADIUS r = t1 varying with orbit l.
    t=t1
    y=1.d0
    flag=1
    call ODE(waveq1,neqn,y,t,rmt(ir),relerr,abserr,flag, &
             nwork,work,iwork,or1,ou1,nor1,node)
    !ODE step count.
    nory=max(nory,nor1)
    !phase shift.
    call waveq1(t,y,dydx)
    u(1) = y(1)
    dudx(1) = (y(1)*gam/t + dydx(1))
    ps1 = atan((u(1)*(bj(l)+q*t*bjp(l)) - dudx(1)*t*bj(l))/ &
               (u(1)*(by(l)+q*t*byp(l)) - dudx(1)*t*by(l)))
        if(tag=='su')then; psu1(l,ir)=ps1 
    elseif(tag=='sd')then; psd1(l,ir)=ps1
    endif
 !END WAVE FUNCTION y = unity.
  !
  !wave function display.
    if(WF=='y'.and.ie==ne)then
      write(idL,'(i0)') l
      if(tag=='su') fil = '../'//trim(outdir)//'/u'//trim(idZA(ir))//'.'//idL
      if(tag=='sd') fil = '../'//trim(outdir)//'/v'//trim(idZA(ir))//'.'//idL 
      open(11,file=trim(fil),status='unknown')
      !ou normalized so that ou(1,nor) = interstitial wave function.
      cnst=t*(bj(l)*cos(ps)-by(l)*sin(ps))/ou(1,nor)
      do i=1,nor
        write(11,940) or(i),ou(1,i)*cnst,ou(2,i)*cnst
      enddo
      close(11)
    endif
  enddo !l
  return

  940 format(3es14.6)
  end subroutine PScalc
  !--------------------------------------------------------------------
  subroutine waveq(x,u,dudx)
  !WAVE FUNCTION u = zero AT RADIUS r = zero.
  implicit none
  integer  :: i
  real(dp) :: u(2),dudx(2),x,p,Vtotx,qbx,emvc
  real(dp),parameter :: a6=1.d0/6.d0
  !
  p=log(x/rx(1,iatom))/dx(iatom)+1.d0
  i=nint(p)
  i=max(i,2); i=min(i,nxR(iatom)-2)
  p=p-i
  !Vtotx = Vtot * x for convenient 4-point interpolation.
  Vtotx=   -a6*p*(p-1.d0)*(p-2.d0)*Vtot(i-1,iatom)&
        +0.5d0*(p*p-1.d0)*(p-2.d0)*Vtot(i  ,iatom)&
        -0.5d0*p*(p+1.d0)*(p-2.d0)*Vtot(i+1,iatom)&
                  +a6*p*(p*p-1.d0)*Vtot(i+2,iatom)
  !Vtotx/x = back-division by x.
  emvc=(Einc-Vtotx/x)/clight
  qbx=dble(kappa)/x
  dudx(1)=-u(1)*qbx+u(2)*(clight+emvc)
  dudx(2)= u(2)*qbx-u(1)*emvc
  return
  end subroutine waveq
  !--------------------------------------------------------------------
  subroutine waveq1(x,y,dydx)
  !WAVE FUNCTION y = unity AT RADIUS r = zero.
  implicit none
  integer  :: i
  real(dp) :: y(2),dydx(2),x,p,Vtotx,emvc
  real(dp),parameter :: a6=1.d0/6.d0
  !
  p=log(x/rx(1,iatom))/dx(iatom)+1.d0
  i=nint(p)
  i=max(i,2); i=min(i,nxR(iatom)-2)
  p=p-i
  !Vtotx = Vtot * x for convenient 4-point interpolation.
  Vtotx=   -a6*p*(p-1.d0)*(p-2.d0)*Vtot(i-1,iatom)&
        +0.5d0*(p*p-1.d0)*(p-2.d0)*Vtot(i  ,iatom)&
        -0.5d0*p*(p+1.d0)*(p-2.d0)*Vtot(i+1,iatom)&
                  +a6*p*(p*p-1.d0)*Vtot(i+2,iatom)
  !Vtotx/x = back-division by x.
  emvc = (Einc-Vtotx/x)/clight
  dydx(1) = (dble(kappa)+gam) * (-y(1)/x + y(2)*(clight+emvc)/zet)
  dydx(2) = (dble(kappa)-gam) * ( y(2)/x - y(1)*emvc/zet)
  return
  end subroutine waveq1
  !--------------------------------------------------------------------
  subroutine sph_bessel_j(lmax,x,bj)
  !SPH_BESSEL_J is spherical bessel function j(l,x).
  implicit none
  integer :: l,ll,lx,lmax,llp1,llp3
  real(dp)  :: bj(0:lmax+1),x,xi,xl,x2h,x2hh,cl,f,s,almax
  real(dp),allocatable :: aux(:)
  almax=lmax
  !small arguments: limit determined by machine precision 2.22E-16 .
  if(x<1.0188d-02)then
    x2h=x*x*0.5d0; x2hh=x2h*0.5d0
    bj(0)=1.d0-(x2h/3.d0)*(1.d0-x2hh/5.d0)
    xl=1.d0; cl=1.d0
    do l=1,lmax+1
      xl=xl*x; ll=l+l; cl=cl/(ll+1)
      bj(l)=cl*xl*(1.d0-(x2h/(ll+3))*(1.d0-x2hh/(ll+5)))
    enddo
    return
  endif
  !large arguments.
  xi=1.d0/x
  if(x>almax)then
    !upward recurrence.
    bj(0)=sin(x)*xi
    if(lmax==0) return
    bj(1)=(bj(0)-cos(x))*xi
    if(lmax==1) return
    ll=3
    do l=2,lmax+1
      bj(l)=(ll*xi)*bj(l-1)-bj(l-2)
      ll=ll+2
    enddo
  else
    !downward recurrence.
    if(lmax<100)then
      lx=lmax+10+int(x*(1.d0-almax*0.0075d0))
    else
      lx=lmax+10+int(x*0.25d0)
    endif
    allocate(aux(0:lx)) !lx variable.
    aux(lx)=0.d0
    aux(lx-1)=1.d-30
    llp1=lx+lx-1; llp3=lx+lx+1
    s=llp1*aux(lx-1)**2
    do l=lx-2,0,-1
      llp1=llp1-2; llp3=llp3-2
      aux(l)=(llp3*xi)*aux(l+1)-aux(l+2)
      s=s+llp1*aux(l)*aux(l)
    enddo
    !normalisation by sum (2*l+1)*j(l,x)**2=1, l=0:lx.
    f=1.d0/sqrt(s)
    bj(0:lmax+1)=aux(0:lmax+1)*f
  endif
  return
  end subroutine sph_bessel_j
  !--------------------------------------------------------------------
  subroutine sph_bessel_y(lmax,x,by)
  !SPH_BESSEL_Y is spherical bessel function y(l,x).
  implicit none
  integer :: l,ll,lmax
  real(dp)  :: by(0:lmax+1),x,xi
  xi=1.d0/x
  by(0)=-cos(x)*xi
  if(lmax==0) return
  by(1)=(by(0)-sin(x))*xi
  if(lmax==1) return
  ll=3
  do l=2,lmax+1
    by(l)=(ll*xi)*by(l-1)-by(l-2)
    ll=ll+2
  enddo
  return
  end subroutine sph_bessel_y
!=======================================================================
!subroutine ODE
!=======================================================================
!integrates a system of neqn first order ordinary differential eqs.:
!  dy(i)/dt = f(t,y(1:neqn))
!  y(i) given at an initial point t.
!
!Ref.: L.F. Shampine and M.K. Gordon, Computer solution of ordinary 
!      differential equations: the initial value problem (Freeman,1975).
!Ref.: http//www.netlib.org, search for ode/ode.f.
!
!the subroutine integrates from  t  to  tout .  on return the
!parameters in the call list are set for continuing the integration.
!the user has only to define a unknown value  tout  and call  ode  again.
!
!the differential equations are actually solved by a suite of codes
!de ,  step , and  intrp .  ode  allocates virtual storage in the
!arrays  work  and  iwork  and calls  de .  de  is a supervisor which
!directs the solution.  it calls on the routines  step  and  intrp
!to advance the integration and to interpolate at output points.
!step  uses a modified divided difference form of the adams pece
!formulas and local extrapolation.  it adjusts the order and step
!size to control the local error per unit step in a generalized
!sense.  normally each call to  step  advances the solution one step
!in the direction of  tout .  for reasons of efficiency  de
!integrates beyond  tout  internally, though never beyond
!t+10*(tout-t), and calls  intrp  to interpolate the solution at
!tout .  an option is provided to stop the integration at  tout  but
!it should be used only if it is impossible to continue the
!integration beyond  tout .
!
!the parameters represent:
!   f -- double precision subroutine f(t,y,yp) to evaluate
!             derivatives yp(i)=dy(i)/dt
!   neqn (integer*4)-- number of equations to be integrated,
!   y(*) (real(dp))-- solution vector at t,                
!   t (real(dp))-- independent variable,                    
!   tout (real(dp))-- point at which solution is desired,   
!   relerr,abserr (real(dp))-- relative and absolute error tolerances for
!        local error test .  at each step the code requires
!          dabs(local error) .le. dabs(y)*relerr + abserr
!        for each component of the local error and solution vectors,
!   iflag (integer*4)-- indicates status of integration,
!   work(*) (real(dp))  -- arrays to hold information internal to
!   iwork(*) (integer*4)    which is necessary for subsequent calls,
!   OR(*) (real(dp)) -- integration points chosen by the program,
!   OU(*) (real(dp)) -- the corresponding values of y(1),
!   NOR (integer*4) -- the number of integration points,
!   NODE (integer*4) -- dimension of OR and OU.
!
!first call to ode:
!the user must provide storage in his calling program for the arrays
!in the call list,
!   y(neqn), work(100+21*neqn), iwork(5),
!declare  f  in an external statement, supply the double precision
!subroutine f(t,y,yp)  to evaluate
!   dy(i)/dt = yp(i) = f(t,y(1),y(2),...,y(neqn))
!and initialize the parameters:
!   neqn  -- number of equations to be integrated
!   y(*)  -- vector of initial conditions
!   t     -- starting point of integration
!   tout  -- point at which solution is desired
!   relerr,abserr -- relative and absolute local error tolerances
!   iflag -- +1,-1.  indicator to initialize the code.  normal input
!            is +1.  the user should set iflag=-1 only if it is
!            impossible to continue the integration beyond  tout .
!all parameters except  f ,  neqn  and  tout  may be altered by the
!code on output so must be variables in the calling program.
!
!output from ode:
!   neqn -- unchanged
!   y(*) -- solution at  t
!   t    -- last point reached in integration. normal return has t=tout.
!   tout -- unchanged
!   relerr,abserr -- normal return has tolerances unchanged.  iflag=3
!        signals tolerances increased
!   iflag = 2 -- normal return.  integration reached  tout
!         = 3 -- integration did not reach  tout  because error
!                tolerances too small.  relerr ,  abserr  increased
!                appropriately for continuing
!         = 4 -- integration did not reach  tout  because more than
!                NODE steps needed
!         = 5 -- integration did not reach  tout  because equations
!                appear to be stiff
!         = 6 -- invalid input parameters (fatal error)
!        the value of  iflag  is returned negative when the input
!        value is negative and the integration does not reach  tout ,
!        i.e., -3, -4, -5.
!   work(*),iwork(*) -- information generally of no interest to the
!                       user but necessary for subsequent calls.
!
!subsequent calls to ode:
!subroutine  ode  returns with all information needed to continue
!the integration.  if the integration reached  tout , the user need
!only define a unknown  tout  and call again.  if the integration did not
!reach  tout  and the user wants to continue, he just calls again.
!the output value of  iflag  is the appropriate input value for
!subsequent calls.  the only situation in which it should be altered
!is to stop the integration internally at the unknown  tout , i.e.,
!change output  iflag=2  to input  iflag=-2 .  error tolerances may
!be changed by the user before continuing.  all other parameters must
!remain unchanged.
subroutine ode(f,neqn,y,t,tout,relerr,abserr,iflag,nwork,work,&
               iwork,OR,OU,NOR,NODE)
      implicit none
      logical :: start,phase1,nornd      
      integer :: neqn,nwork,NODE,iyy,iwt,ip,iyp,iypout,iphi,NOR,&
        istart,iphase,iwork(5),ialpha,ibeta,isig,iv,iw,ig,ipsi,ix,ih,&
        ihold,itold,idelsn,iflag
      real(dp) :: y(neqn),t,tout,relerr,abserr,work(nwork),&
        OR(NODE),OU(2,NODE),twou,fouru
      external f
      data ialpha,ibeta,isig,iv,iw,ig,iphase,ipsi,ix,ih,ihold,istart,&
        itold,idelsn/1,13,25,38,50,62,75,76,88,89,90,91,92,93/
      twou=2.d0*epsilon(1.d0); fouru=2.d0*twou
      iyy = 100
      iwt = iyy + neqn
      ip = iwt + neqn
      iyp = ip + neqn
      iypout = iyp + neqn
      iphi = iypout + neqn
      NOR=0
      if(iabs(iflag) .eq. 1) go to 1
      start = work(istart) .gt. 0.0d0
      phase1 = work(iphase) .gt. 0.0d0
      nornd = iwork(2) .ne. -1
    1 call de(f,neqn,y,t,tout,relerr,abserr,&
        iflag,work(iyy),work(iwt),work(ip),work(iyp),work(iypout),&
        work(iphi),work(ialpha),work(ibeta),work(isig),work(iv),&
        work(iw),work(ig),phase1,work(ipsi),work(ix),work(ih),&
        work(ihold),start,work(itold),work(idelsn),iwork(1),nornd,&
        iwork(3),iwork(4),iwork(5),OR,OU,NOR,NODE,twou,fouru)
      work(istart) = -1.0d0
      if(start) work(istart) = 1.0d0
      work(iphase) = -1.0d0
      if(phase1) work(iphase) = 1.0d0
      iwork(2) = -1
      if(nornd) iwork(2) = 1
      return
  end subroutine ode
!-----------------------------------------------------------------------
subroutine de(f,neqn,y,t,tout,relerr,abserr,iflag,yy,wt,p,yp,&
              ypout,phi,alpha,beta,sig,v,w,g,phase1,psi,x,h,hold,start,&
              told,delsgn,ns,nornd,k,kold,isnold,OR,OU,NOR,NODE,&
              twou,fouru)

!ode  merely allocates storage for  de  to relieve the user of the
!inconvenience of a long call list.
!NODE  is the maximum number of steps allowed in one call to ode .
      implicit none
      logical :: stiff,crash,start,phase1,nornd      
      integer  :: neqn,NODE,iflag,isn,kle4,isnold,NOR,kold,k,ns
      real(dp) :: t,tout,relerr,abserr,eps,told,del,absdel,tend,&
        releps,abseps,delsgn,x,h,twou,fouru,hold
      real(dp) :: y(neqn),yy(neqn),wt(neqn),phi(neqn,16),p(neqn),&
        yp(neqn),ypout(neqn),psi(12),alpha(12),beta(12),sig(13),v(12),&
        w(12),g(13),OR(NODE),OU(2,NODE)
      external f
!test for improper parameters.
      if(neqn .lt. 1) go to 10
      !if(t .eq. tout) go to 10  !JR
      if(abs(t-tout)<1.d-14) goto 10
      if(relerr .lt. 0.0d0  .or.  abserr .lt. 0.0d0) go to 10
      eps = dmax1(relerr,abserr)
      if(eps .le. 0.0d0) go to 10
      if(iflag .eq. 0) go to 10
      isn = isign(1,iflag)
      iflag = iabs(iflag)
      if(iflag .eq. 1) go to 20
      !if(t .ne. told) go to 10  !JR
      if(abs(t-told)>1.d-14) goto 10
      if(iflag .ge. 2  .and.  iflag .le. 5) go to 20
   10 iflag = 6
      return
!on each call set interval of integration and counter for number of
!steps. adjust input error tolerances to define weight vector for
!subroutine  step.
   20 continue
      del = tout - t
      absdel = dabs(del)
      tend = t + 10.0d0*del
      if(isn .lt. 0) tend = tout
      kle4 = 0
      stiff = .false.
      releps = relerr/eps
      abseps = abserr/eps
      if(iflag .eq. 1) go to 30
      if(isnold .lt. 0) go to 30
      if(delsgn*del .gt. 0.0d0) goto 50
!on start and restart also set work variables x and yy(*), store the
!direction of integration and initialize the step size.
   30 continue
      start = .true.
      x = t
      yy(1:neqn)=y(1:neqn)
      delsgn = dsign(1.0d0,del)
      h = dsign(dmax1(dabs(tout-x),fouru*dabs(x)),tout-x)
      if(NOR.eq.0)then
        NOR=NOR+1; OR(NOR)=x; OU(1:neqn,NOR)=y(1:neqn)
      endif
!if already past output point, interpolate and return.
   50 continue
      if(dabs(x-t) .lt. absdel) goto 60
      call intrp(x,yy,tout,y,ypout,neqn,kold,phi,psi)
      !NOR is not incremented when OR and OU replace overshoot values.
      OR(NOR)=tout; OU(1:neqn,NOR)=y(1:neqn)
      iflag = 2
      t = tout
      told = t
      isnold = isn
      return
!if cannot go past output point and sufficiently close,
!extrapolate and return.
   60 continue
      if(isn .gt. 0  .or.  dabs(tout-x) .ge. fouru*dabs(x)) goto 80
      h = tout - x
      call f(x,yy,yp)
      y(1:neqn)=yy(1:neqn)+h*yp(1:neqn)
      iflag = 2
      t = tout
      told = t
      isnold = isn
      return
!test for too many steps.
   80 continue
      if(NOR .lt. NODE-2) goto 100
      iflag = isn*4
      if(stiff) iflag = isn*5
      write(611,'(a,i0,a,i0)')&
           'ode: more than ',NODE,' steps, iflag=',iflag
      y(1:neqn)=yy(1:neqn)
      t = x
      told = t
      isnold = 1
      return
!limit step size, set weight vector and take a step.
  100 continue
      h = dsign(dmin1(dabs(h),dabs(tend-x)),h)
      wt(1:neqn) = releps*dabs(yy(1:neqn)) + abseps
      call step(x,yy,f,neqn,h,eps,wt,start,hold,k,kold,crash,phi,p,yp,&
                psi,alpha,beta,sig,v,w,g,phase1,ns,nornd,twou,fouru)
      NOR=NOR+1; OR(NOR)=x; OU(1:neqn,NOR)=yy(1:neqn)
!test for tolerances too small.
      if(.not.crash) go to 130
      iflag = isn*3
      relerr = eps*releps
      abserr = eps*abseps
      y(1:neqn)=yy(1:neqn)
      t = x
      told = t
      isnold = 1
      return
!augment counter on number of steps and test for stiffness.
  130 continue
      kle4 = kle4 + 1
      if(kold .gt. 4) kle4 = 0
      if(kle4 .ge. 50) stiff = .true.
      goto 50
end subroutine de
!-----------------------------------------------------------------------
!SUBROUTINE STEP integrates a system of first order ordinary
!differential equations one step, normally from x to x+h, using a
!modified divided difference form of the adams pece formulas.  local
!extrapolation is used to improve absolute stability and accuracy.
!the code adjusts its order and step size to control the local error
!per unit step in a generalized sense.  special devices are included
!to control roundoff error and to detect when the user is requesting
!too much accuracy.
!
!the parameters represent:
!   x     -- independent variable (real(dp))
!   y(*)  -- solution vector at x (real(dp))
!   yp(*) -- derivative of solution vector at  x  after successful
!            step (real(dp))
!   neqn  -- number of equations to be integrated (integer*4)
!   h     -- appropriate step size for next step. normally determined by
!            code (real(dp))
!   eps   -- local error tolerance.  must be variable (real(dp))
!   wt(*) -- vector of weights for error criterion (real(dp))
!   start -- logical variable set .true. for first step,  .false.
!            otherwise (logical*4)
!   hold  -- step size used for last successful step (real(dp))
!   k     -- appropriate order for next step (determined by code)
!   kold  -- order used for last successful step
!   crash -- logical variable set .true. when no step can be taken,
!            .false. otherwise.
!the arrays  phi, psi  are required for the interpolation subroutine
!intrp.  the array p is internal to the code.  all are real(dp)
!
!input to  step:
!
!   first call:
!the user must provide storage in his driver program for all arrays
!in the call list, namely,
!   y(neqn),wt(neqn),phi(neqn,16),p(neqn),yp(neqn),psi(12)
!
!the user must also declare  start  and  crash  logical variables
!and  f  an external subroutine, supply the subroutine  f(x,y,yp)
!to evaluate
!   dy(i)/dx = yp(i) = f(x,y(1),y(2),...,y(neqn))
!and initialize only the following parameters:
!   x     -- initial value of the independent variable
!   y(*)  -- vector of initial values of dependent variables
!   neqn  -- number of equations to be integrated
!   h     -- nominal step size indicating direction of integration
!            and maximum size of step.  must be variable
!   eps   -- local error tolerance per step.  must be variable
!   wt(*) -- vector of non-zero weights for error criterion
!   start -- .true.
!
!step  requires the l2 norm of the vector with components
!local error(l)/wt(l)  be less than  eps  for a successful step.  the
!array  wt  allows the user to specify an error test appropriate
!for his problem.  for example,
!   wt(l) = 1.0  specifies absolute error,
!         = dabs(y(l))  error relative to the most recent value of
!              the l-th component of the solution,
!         = dabs(yp(l))  error relative to the most recent value of
!              the l-th component of the derivative,
!         = dmax1(wt(l),dabs(y(l)))  error relative to the largest
!              magnitude of l-th component obtained so far,
!         = dabs(y(l))*relerr/eps + abserr/eps  specifies a mixed
!              relative-absolute test where  relerr  is relative
!              error,  abserr  is absolute error and  eps =
!              dmax1(relerr,abserr) .
!
!   subsequent calls:
!subroutine  step  is designed so that all information needed to
!continue the integration, including the step size  h  and the order
!k , is returned with each step.  with the exception of the step
!size, the error tolerance, and the weights, none of the parameters
!should be altered.  the array  wt  must be updated after each step
!to maintain relative error tests like those above.  normally the
!integration is continued just beyond the desired endpoint and the
!solution interpolated there with subroutine  intrp .  if it is
!impossible to integrate beyond the endpoint, the step size may be
!reduced to hit the endpoint since the code will not take a step
!larger than the  h  input.  changing the direction of integration,
!i.e., the sign of  h , requires the user set  start = .true. before
!calling  step  again.  this is the only situation in which  start
!should be altered.
!
!output from  step:
!
!   successful step:
!the subroutine returns after each successful step with  start  and
!crash  set .false. .  x  represents the independent variable
!advanced one step of length  hold  from its value on input and  y
!the solution vector at the unknown value of  x .  all other parameters
!represent information corresponding to the unknown  x  needed to
!continue the integration.
!
!   unsuccessful step:
!when the error tolerance is too small for the machine precision,
!the subroutine returns without taking a step and  crash = .true. .
!an appropriate step size and error tolerance for continuing are
!estimated and all other information is restored as upon input
!before returning.  to continue with the larger tolerance, the user
!just calls the code again.  a restart is neither required nor
!desirable.
subroutine step(x,y,f,neqn,h,eps,wt,start,hold,k,kold,crash,phi,p,yp,&
                psi,alpha,beta,sig,v,w,g,phase1,ns,nornd,twou,fouru)
      implicit none
      logical  :: start,crash,phase1,nornd      
      integer  :: neqn,l,k,kold,ifail,kp1,kp2,km1,km2,ns,nsp1,i,im1,&
        iq,nsm2,j,limit1,nsp2,limit2,ip1,kunknown
      real(dp) :: y(neqn),wt(neqn),phi(neqn,16),p(neqn),yp(neqn),&
        psi(12),alpha(12),beta(12),sig(13),w(12),v(12),g(13),gstr(13),&
        two(13)
      real(dp) :: x,h,eps,hold,twou,fouru,p5eps,round,sum,absh,&
        realns,temp1,temp2,temp3,temp4,temp5,temp6,reali,tau,xold,erk,&
        erkm1,erkm2,erkp1,err,rho,hunknown,r
      external f
      data two/2.0d0,4.0d0,8.0d0,16.0d0,32.0d0,64.0d0,128.0d0,256.0d0,&
        512.0d0,1024.0d0,2048.0d0,4096.0d0,8192.0d0/
      data gstr/0.500d0,0.0833d0,0.0417d0,0.0264d0,0.0188d0,0.0143d0,&
        0.0114d0,0.00936d0,0.00789d0,0.00679d0,0.00592d0,0.00524d0,&
        0.00468d0/

!begin BLOCK 0
!check if step size/error tolerance is too small for machine precision.
!if first step, initialize phi array and estimate a starting step size.
!
!if step size is too small, determine an acceptable one.
      crash = .true.
      if(dabs(h) .ge. fouru*dabs(x)) go to 5
      h = dsign(fouru*dabs(x),h)
      return
    5 p5eps = 0.5d0*eps
!if error tolerance is too small, increase it to an acceptable value.
      round = 0.0d0
      do 10 l = 1,neqn
        round = round + (y(l)/wt(l))**2
   10 continue
      round = twou*dsqrt(round)
      if(p5eps .ge. round) go to 15
      eps = 2.0*round*(1.0d0 + fouru)
      return
   15 crash = .false.
      g(1)=1.0d0
      g(2)=0.5d0
      sig(1)=1.0d0
      if(.not.start) go to 99
!initialize. compute appropriate step size for first step.
      call f(x,y,yp)
      sum = 0.0d0
      do 20 l = 1,neqn
        phi(l,1) = yp(l)
        phi(l,2) = 0.0d0
        sum = sum + (yp(l)/wt(l))**2
   20 continue
      sum = dsqrt(sum)
      absh = dabs(h)
      if(eps .lt. 16.0d0*sum*h*h) absh = 0.25d0*dsqrt(eps/sum)
      h = dsign(dmax1(absh,fouru*dabs(x)),h)
      hold = 0.0d0
      k = 1
      kold = 0
      start = .false.
      phase1 = .true.
      nornd = .true.
      if(p5eps .gt. 100.0d0*round) go to 99
      nornd = .false.
      do 25 l = 1,neqn
        phi(l,15) = 0.0d0
   25 continue
   99 ifail = 0
!end BLOCK 0
!
!begin BLOCK 1
!compute coefficients of formulas for this step. avoid computing
!those quantities not changed when step size is not changed.
!                  ***
  100 kp1 = k+1
      kp2 = k+2
      km1 = k-1
      km2 = k-2
!ns is the number of steps taken with size h, including the current one.
!when k.lt.ns, no coefficients change.
      !if(h .ne. hold) ns = 0 !JR
      if(abs(h-hold)>1.d-14) ns=0
      if(ns.le.kold)   ns=ns+1
      nsp1 = ns+1
      if (k .lt. ns) go to 199
!compute those components of alpha(*),beta(*),psi(*),sig(*) which are
!changed.
      beta(ns) = 1.0d0
      realns = ns
      alpha(ns) = 1.0d0/realns
      temp1 = h*realns
      sig(nsp1) = 1.0d0
      if(k .lt. nsp1) go to 110
      do 105 i = nsp1,k
        im1 = i-1
        temp2 = psi(im1)
        psi(im1) = temp1
        beta(i) = beta(im1)*psi(im1)/temp2
        temp1 = temp2 + h
        alpha(i) = h/temp1
        reali = i
        sig(i+1) = reali*alpha(i)*sig(i)
  105 continue
  110 psi(k) = temp1
!compute coefficients g(*). initialize v(*) and set w(*).
!g(2) is set in data statement.
      if(ns .gt. 1) go to 120
      do iq = 1,k
        temp3 = iq*(iq+1)
        v(iq) = 1.0d0/temp3
        w(iq) = v(iq)
      enddo
      go to 140
!if order was raised, update diagonal part of v(*).
  120 if(k .le. kold) go to 130
      temp4 = k*kp1
      v(k) = 1.0d0/temp4
      nsm2 = ns-2
      if(nsm2 .lt. 1) go to 130
      do 125 j = 1,nsm2
        i = k-j
        v(i) = v(i) - alpha(j+1)*v(i+1)
  125 continue
!update v(*) and set w(*).
  130 limit1 = kp1 - ns
      temp5 = alpha(ns)
      do 135 iq = 1,limit1
        v(iq) = v(iq) - temp5*v(iq+1)
        w(iq) = v(iq)
  135 continue
      g(nsp1) = w(1)
!compute the g(*) in the work vector w(*).
  140 nsp2 = ns + 2
      if(kp1 .lt. nsp2) go to 199
      do 150 i = nsp2,kp1
        limit2 = kp2 - i
        temp6 = alpha(i-1)
        do 145 iq = 1,limit2
          w(iq) = w(iq) - temp6*w(iq+1)
  145   continue
        g(i) = w(1)
  150 continue
  199 continue
!end BLOCK 1
!
!begin BLOCK 2
!predict a solution p(*), evaluate derivatives using predicted solution,
!estimate local error at order k and errors at orders k, k-1, k-2
!as if constant step size were used.
!
!change phi to phi star.
      if(k .lt. nsp1) go to 215
      do 210 i = nsp1,k
        temp1 = beta(i)
        do 205 l = 1,neqn
          phi(l,i) = temp1*phi(l,i)
  205   continue
  210 continue
!predict solution and differences.
  215 do 220 l = 1,neqn
        phi(l,kp2) = phi(l,kp1)
        phi(l,kp1) = 0.0d0
        p(l) = 0.0d0
  220 continue
      do 230 j = 1,k
        i = kp1 - j
        ip1 = i+1
        temp2 = g(i)
        do 225 l = 1,neqn
          p(l) = p(l) + temp2*phi(l,i)
          phi(l,i) = phi(l,i) + phi(l,ip1)
  225   continue
  230 continue
      if(nornd) go to 240
      do 235 l = 1,neqn
        tau = h*p(l) - phi(l,15)
        p(l) = y(l) + tau
        phi(l,16) = (p(l) - y(l)) - tau
  235 continue
      go to 250
  240 do 245 l = 1,neqn
        p(l) = y(l) + h*p(l)
  245 continue
  250 xold = x
      x = x + h
      absh = dabs(h)
      call f(x,p,yp)
!estimate errors at orders k,k-1,k-2.
      erkm2 = 0.0d0
      erkm1 = 0.0d0
      erk = 0.0d0
      do 264 l = 1,neqn
        temp3 = 1.0d0/wt(l)
        temp4 = yp(l) - phi(l,1)
!!      if(km2)265,260,255
!!255   erkm2 = erkm2 + ((phi(l,km1)+temp4)*temp3)**2
!!260   erkm1 = erkm1 + ((phi(l,k)+temp4)*temp3)**2
!!265   erk = erk + (temp4*temp3)**2
        if(km2>0)then
          erkm2 = erkm2 + ((phi(l,km1)+temp4)*temp3)**2
          erkm1 = erkm1 + ((phi(l,k)+temp4)*temp3)**2
        elseif(km2==0)then
          erkm1 = erkm1 + ((phi(l,k)+temp4)*temp3)**2
        endif
        erk = erk + (temp4*temp3)**2
  264 continue
!!    if(km2)280,275,270
!!270 erkm2 = absh*sig(km1)*gstr(km2)*dsqrt(erkm2)
!!275 erkm1 = absh*sig(k)*gstr(km1)*dsqrt(erkm1)
!!280 temp5 = absh*dsqrt(erk)
      if(km2>0)then
        erkm2 = absh*sig(km1)*gstr(km2)*dsqrt(erkm2)
        erkm1 = absh*sig(k)*gstr(km1)*dsqrt(erkm1)
      elseif(km2==0)then
        erkm1 = absh*sig(k)*gstr(km1)*dsqrt(erkm1)
      endif
      temp5 = absh*dsqrt(erk)      
      err = temp5*(g(k)-g(kp1))
      erk = temp5*sig(kp1)*gstr(k)
      kunknown = k
!test if order should be lowered.
!!    if(km2)299,290,285
!!285 if(dmax1(erkm1,erkm2) .le. erk) kunknown = km1
!!    go to 299
!!290 if(erkm1 .le. 0.5d0*erk) kunknown = km1
!!299 if(err .le. eps) go to 400
      if(km2>0)then
        if(dmax1(erkm1,erkm2) .le. erk) kunknown = km1
      elseif(km2==0)then
        if(erkm1 .le. 0.5d0*erk) kunknown = km1
      endif
      if(err .le. eps) go to 400
!test if step successful.  
!end BLOCK 2
!
!begin BLOCK 3
!the step is unsuccessful.  restore  x, phi(*,*), psi(*) .
!if third consecutive failure, set order to one. if step fails more than
!three times, consider an optimal step size.  double error tolerance and
!return, if estimated step size is too small for machine precision.
!
!restore x, phi(*,*) and psi(*).
      phase1 = .false.
      x = xold
      do 310 i = 1,k
        temp1 = 1.0d0/beta(i)
        ip1 = i+1
        do 305 l = 1,neqn
          phi(l,i) = temp1*(phi(l,i) - phi(l,ip1))
  305   continue
  310 continue
      if(k .lt. 2) go to 320
      do 315 i = 2,k
        psi(i-1) = psi(i) - h
  315 continue
!on third failure, set order to one.  thereafter, use optimal step size.
  320 ifail = ifail + 1
      temp2 = 0.5d0
!!    if(ifail - 3) 335,330,325
!!325 if(p5eps .lt. 0.25d0*erk) temp2 = dsqrt(p5eps/erk)
!!330 kunknown = 1
!!335 h = temp2*h
      if(ifail-3>0)then
        if(p5eps .lt. 0.25d0*erk) temp2 = dsqrt(p5eps/erk)
        kunknown = 1
      elseif(ifail-3==0)then
        kunknown=1
      endif
      h = temp2*h
      k = kunknown
      if(dabs(h) .ge. fouru*dabs(x)) go to 340
      crash = .true.
      h = dsign(fouru*dabs(x),h)
      eps = eps + eps
      return
  340 go to 100
!end BLOCK 3
!
!begin BLOCK 4
!the step is successful.  correct the predicted solution, evaluate
!the derivatives using the corrected solution and update the
!differences. determine best order and step size for next step.
  400 kold = k
      hold = h
!correct and evaluate.
      temp1 = h*g(kp1)
      if(nornd) go to 410
      do l = 1,neqn
        rho = temp1*(yp(l) - phi(l,1)) - phi(l,16)
        y(l) = p(l) + rho
        phi(l,15) = (y(l) - p(l)) - rho
      enddo
      go to 420
  410 do l=1,neqn
        y(l)=p(l)+temp1*(yp(l)-phi(l,1))
      enddo
  420 continue
      call f(x,y,yp)
!update differences for next step.
      do l=1,neqn
        phi(l,kp1)=yp(l)-phi(l,1)
        phi(l,kp2)=phi(l,kp1)-phi(l,kp2)
      enddo
      do i=1,k
        do l=1,neqn
          phi(l,i)=phi(l,i)+phi(l,kp1)
        enddo
      enddo
!estimate error at order k+1 unless:
!in first phase when always raise order,
!already decided to lower order,
!step size not constant so estimate unreliable.
      erkp1 = 0.0d0
      if(kunknown .eq. km1  .or.  k .eq. 12) phase1 = .false.
      if(phase1) go to 450
      if(kunknown .eq. km1) go to 455
      if(kp1 .gt. ns) go to 460
      do 440 l = 1,neqn
        erkp1 = erkp1 + (phi(l,kp2)/wt(l))**2
  440 continue
      erkp1 = absh*gstr(kp1)*dsqrt(erkp1)
!using estimated error at order k+1, determine appropriate order for
!next step.
      if(k .gt. 1) go to 445
      if(erkp1 .ge. 0.5d0*erk) go to 460
      go to 450
  445 if(erkm1 .le. dmin1(erk,erkp1)) go to 455
      if(erkp1 .ge. erk  .or.  k .eq. 12) go to 460
!here erkp1 .lt. erk .lt. dmax1(erkm1,erkm2) else order would have been
!lowered in block 2. thus order is to be raised. raise order.
  450 k = kp1
      erk = erkp1
      go to 460
!lower order.
  455 k = km1
      erk = erkm1
!with unknown order determine appropriate step size for next step.
  460 hunknown = h + h
      if(phase1) go to 465
      if(p5eps .ge. erk*two(k+1)) go to 465
      hunknown = h
      if(p5eps .ge. erk) go to 465
      temp2 = k+1
      r = (p5eps/erk)**(1.0d0/temp2)
      hunknown = absh*dmax1(0.5d0,dmin1(0.9d0,r))
      hunknown = dsign(dmax1(hunknown,fouru*dabs(x)),h)
  465 h = hunknown
      return
!end BLOCK 4
end subroutine step
!-----------------------------------------------------------------------
subroutine intrp(x,y,xout,yout,ypout,neqn,kold,phi,psi)
!
!the methods in subroutine  step  approximate the solution near  x
!by a polynomial.  subroutine  intrp  approximates the solution at
!xout  by evaluating the polynomial there.
!
!input to intrp:
!   the user provides storage in the calling program for the arrays 
!       y(neqn),yout(neqn),ypout(neqn),phi(neqn,16),psi(12)
!   xout     -- point at which solution is desired.
!
!output from  intrp:
!   yout(*)  -- solution at  xout
!   ypout(*) -- derivative of solution at  xout
!the remaining parameters are returned unaltered from their input
!values.  integration with  step  may be continued.
      implicit none
      integer :: neqn,ki,kold,kip1,i,j,jm1,limit1,l
      real(dp) :: y(neqn),yout(neqn),ypout(neqn),phi(neqn,16),&
        psi(12),g(13),w(13),rho(13),x,xout,hi,term,temp1,temp2,temp3,&
        psijm1,gamma,eta
      data g(1)/1.0d0/,rho(1)/1.0d0/
      hi = xout - x
      ki = kold + 1
      kip1 = ki + 1
!initialize w(*) for computing g(*)
      do 5 i = 1,ki
        temp1 = i
        w(i) = 1.0d0/temp1
    5 continue
      term = 0.0d0
!compute g(*)
      do 15 j = 2,ki
        jm1 = j - 1
        psijm1 = psi(jm1)
        gamma = (hi + term)/psijm1
        eta = hi/psijm1
        limit1 = kip1 - j
        do 10 i = 1,limit1
          w(i) = gamma*w(i) - eta*w(i+1)
   10   continue
        g(j) = w(1)
        rho(j) = gamma*rho(jm1)
        term = psijm1
   15 continue
!interpolate
      do 20 l = 1,neqn
        ypout(l) = 0.0d0
        yout(l) = 0.0d0
   20 continue
      do 30 j = 1,ki
        i = kip1 - j
        temp2 = g(i)
        temp3 = rho(i)
        do 25 l = 1,neqn
          yout(l) = yout(l) + temp2*phi(l,i)
          ypout(l) = ypout(l) + temp3*phi(l,i)
   25   continue
   30 continue
      do 35 l = 1,neqn
        yout(l) = y(l) + hi*yout(l)
   35 continue
      return
end subroutine intrp

end program eeas
!=======================================================================

::eeasisss_compil.cmd:
gfortran -O2 -o /users/olof/bin/eeasisss.exe eeasisss_init.f90 eeasisss_main.f90 eeasisss.f90  
gfortran -O2 -o /users/olof/bin/eeas.exe eeas.f90
del *.mod
::this is gfortran in windows 10 with mingw; olof is user name, see eeasisss_main;
::eof
::---------------------------------------------------------------------
::eeasiss_run.cmd:
/users/olof/bin/eeasisss.exe -i inputX -l logX
::olof is user name, see eeasisss_main;
::test calculation:
::input:
::  inputX File including
::    atomic geometry and symmetry of surface structure;
::    computation options and parallel setup;
::  NIST atomic charge densities stored in /users/olof/atlib/;
::logfile: logX File listing
::  interatomic distance and shells of atomic neighbors; 
::  the exact KKR model of overlapping MT spheres;
::  inspection of atomic charge densities; 
::  interstitial XC potential Vxc0 versus Eincident; 
::  Lindhard's C potential beyond the range of X potential;
::  benchmarking the accuracy of the atomic phase shifts, which is
::  a prerequisite for Pendry's reliability factor.
::output:  
::  phase shifts PS versus element# versus inequivalent_at# in crystal;
::  interstitial/self-energy/XC potential Vxc0:
::    Vxc0 versus Eincident;
::    Vxc0 4-coefficient approximation versus Eincident;
::    Vxc0 coefficients.       
::eof
::---------------------------------------------------------------------

STRUCTURE:! Cu(111)-3xsqrt(3)R30  a0=3.615 tmb_S, orientation 1, Center_hcp
! Cu(111)-3xsqrt(3)R30 a
/home/jru/LEEDPS/j190501/Cu111TMB/FH0.70
   1.889727                    !UnitOfLength for Bohr inside.
  13.281900   0.000000   0.000000          !CoordinatesOfUnitCell(UOL)
  -6.641100  11.502400   0.000000          !CoordinatesOfUnitCell(UOL)
   0.000000   0.000000  18.999422          !CoordinatesOfUnitCell(UOL)
   8          ! # inequivalent atoms
   3  16 1 1    1.0000   2.5000  S  !#lines iZ iA (rmtmin rmtmax elem, not used)
    5.70707    0.00000    0.66148
   -2.85354    4.94247    0.66148
   -2.85354   -4.94247    0.66148
  24   6 2 2    1.0000   2.2000  C   
    1.35865    0.00000    0.17633
   -0.67932    1.17662    0.17633
   -0.67932   -1.17662    0.17633
   -1.43365    0.00000    0.10818
    0.71682   -1.24158    0.10818
    0.71682    1.24158    0.10818
   -2.76259    0.00000    0.23963
    1.38130   -2.39247    0.23963
    1.38130    2.39247    0.23963
   -3.62143   -1.22629    0.13034
    2.87272   -2.52311    0.13034
    0.74872    3.74940    0.13034
   -3.62143    1.22629    0.13034
    0.74872   -3.74940    0.13034
    2.87272    2.52310    0.13034
   -5.05488    1.24345    0.24928
    1.45058   -4.99938    0.24928
    3.60430    3.75593    0.24928
   -5.05488   -1.24345    0.24928
    3.60430   -3.75593    0.24928
    1.45059    4.99938    0.24928
   -5.83413    0.00000    0.40405
    2.91707   -5.05251    0.40405
    2.91707    5.05250    0.40405
  15   1 3 3    0.5000   1.5000  H   
    2.47060    0.00000    0.01917
   -1.23530    2.13960    0.01917
   -1.23530   -2.13960    0.01917
   -3.17720    2.16806    0.00000
   -0.28900   -3.83556    0.00000
    3.46619    1.66750    0.00000
   -3.17720   -2.16806    0.00000
    3.46619   -1.66750    0.00000
   -0.28900    3.83556    0.00000
   -5.56712    2.14313    0.20983
   -5.71355    5.60957    0.20983
   -8.64234    3.74970    0.20983
    7.71479   -2.14313    0.20983
    4.63956   -3.74970    0.20983
    7.56866   -5.60957    0.20983
  27  29 4 4    2.4100   2.4500  Cu  
    3.00869   -2.53079    2.66331
    0.68738    3.87100    2.66331
   -3.69607   -1.34021    2.66331
    3.00869    2.53079    2.66331
   -3.69607    1.34021    2.66331
    0.68738   -3.87100    2.66331
   -5.92800    5.07192    2.68315
   -8.06951    3.83264    2.68315
   -5.92549    2.59784    2.68315
    7.35390   -5.07192    2.68315
    7.35641   -2.59784    2.68315
    5.21269   -3.83264    2.68315
    5.20940    1.28778    2.56788
   -3.71995    3.86758    2.56788
   -1.48945   -5.15537    2.56788
    5.20940   -1.28778    2.56788
   -1.48945    5.15537    2.56788
   -3.71996   -3.86758    2.56788
    2.96141    0.00000    2.73123
   -1.48071    2.56466    2.73123
   -1.48071   -2.56466    2.73123
    0.74630   -1.29260    2.64294
    0.74627    1.29262    2.64294
   -1.49258   -0.00002    2.64294
    2.93384    5.08165    2.68353
   -5.86776   -0.00004    2.68353
    2.93391   -5.08161    2.683
  27  29 5 5    2.4100   2.4500  Cu  
    4.44899    0.00000    4.69889
   -2.22449    3.85294    4.69889
   -2.22449   -3.85293    4.69889
   -4.40242    0.00000    4.70295
    2.20121   -3.81261    4.70295
    2.20121    3.81261    4.70295
   -6.64090    3.83420    4.73320
    6.64100   -3.83420    4.73320
   -0.04279   -5.10435    4.66517
    4.44189    2.51511    4.66517
   -4.39910    2.58923    4.66517
   -0.04279    5.10434    4.66517
   -4.39910   -2.58923    4.66517
    4.44189   -2.51511    4.66517
    0.01960   -2.55802    4.73505
    2.20551    1.29598    4.73505
   -2.22511    1.26204    4.73505
    0.01960    2.55802    4.73505
   -2.22511   -1.26203    4.73505
    2.20551   -1.29598    4.73505
    0.00000    0.00000    4.73261
   -8.86019    5.08680    4.72009
   -6.61631    1.28585    4.72009
   -4.44651    5.12974    4.72009
    4.42171   -5.08680    4.72009
    8.83539   -5.12975    4.72009
    6.66590   -1.28585    4.72009
  27  29 6 6    2.4100   2.4500  Cu  
   -5.16523    8.94611    6.82522
   -2.95153    5.11200    6.82522
   -2.95153    7.66810    6.82522
   -2.95153   10.22420    6.82522
   -0.73783    1.27791    6.82522
   -0.73783    3.83401    6.82522
   -0.73783    6.39011    6.82522
   -0.73783    8.94621    6.82522
    1.47587   -0.00009    6.82522
    1.47587    2.55601    6.82522
    1.47587    5.11211    6.82522
    1.47587    7.66821    6.82522
    1.47587   10.22430    6.82522
    3.68957    1.27801    6.82522
    3.68957    3.83410    6.82522
    3.68957    6.39020    6.82522
    3.68957    8.94630    6.82522
    5.90327    0.00001    6.82522
    5.90328    2.55611    6.82522
    5.90327    5.11220    6.82522
    5.90327    7.66830    6.82522
    5.90327   10.22440    6.82522
    8.11697    1.27811    6.82522
    8.11697    3.83420    6.82522
    8.11697    6.39030    6.82522
   10.33067    0.00011    6.82522
   10.33067    2.55621    6.82522
  27  29 7 7    2.4100   2.4500  Cu  
   -5.90327   10.22439    8.91232
   -3.68957    6.39029    8.91232
   -3.68957    8.94639    8.91232
   -1.47587    2.55619    8.91232
   -1.47587    5.11229    8.91232
   -1.47587    7.66839    8.91232
   -1.47587   10.22449    8.91232
    0.73783    1.27819    8.91232
    0.73783    3.83429    8.91232
    0.73783    6.39039    8.91232
    0.73783    8.94649    8.91232
    2.95153    0.00019    8.91232
    2.95153    2.55629    8.91232
    2.95153    5.11239    8.91232
    2.95153    7.66849    8.91232
    2.95153   10.22459    8.91232
    5.16523    1.27829    8.91232
    5.16523    3.83439    8.91232
    5.16523    6.39049    8.91232
    5.16523    8.94659    8.91232
    7.37893    0.00029    8.91232
    7.37893    2.55639    8.91232
    7.37893    5.11249    8.91232
    7.37893    7.66859    8.91232
    9.59263    1.27839    8.91232
    9.59263    3.83449    8.91232
   11.80633    0.00039    8.91232
  27  29 8 8    2.4100   2.4500  Cu  
   -4.42740    7.66820   10.99942
   -4.42740   10.22430   10.99942
   -2.21370    3.83410   10.99942
   -2.21370    6.39020   10.99942
   -2.21370    8.94630   10.99942
    0.00000    0.00000   10.99942
    0.00000    2.55610   10.99942
    0.00000    5.11220   10.99942
   -0.00000    7.66830   10.99942
    0.00000   10.22440   10.99942
    2.21370    1.27810   10.99942
    2.21370    3.83420   10.99942
    2.21370    6.39030   10.99942
    2.21370    8.94640   10.99942
    4.42740    0.00010   10.99942
    4.42740    2.55620   10.99942
    4.42740    5.11230   10.99942
    4.42740    7.66840   10.99942
    4.42740   10.22450   10.99942
    6.64110    1.27820   10.99942
    6.64110    3.83430   10.99942
    6.64110    6.39040   10.99942
    6.64110    8.94650   10.99942
    8.85480    0.00020   10.99942
    8.85480    2.55630   10.99942
    8.85480    5.11240   10.99942
   11.06850    1.27830   10.99942
 1  1.9000  2.4000  0.3200  1.0000 S  !iA rmtmin rmtmax rmtovl xcfac elem 
 2  1.6000  2.0000  0.3200  1.0000 C  !etc ...
 3  0.9000  1.3000  0.3200  1.0000 H
 4  2.4100  2.4250  0.3200  1.0000 Cu
 5  2.4150  2.4200  0.3200  1.0000 Cu
 6  2.4150  2.4200  0.3200  1.0000 Cu
 7  2.4150  2.4200  0.3200  1.0000 Cu
 8  2.4150  2.4200  0.3200  1.0000 Cu
 OPTIONS:
's' !crystal: 'bulk'/'slab'.
'n' !'yes'/'no': SpinUp&Down PhaseShifts calc?"
'n' !'yes'/'no': Rho print?"
'n' !'yes'/'no': Pot print?"
'n' !'yes'/'no': WaveFunction print?"
 004.00  260.00    4.00 !energy interval E1,E2,Estep
   2   9                !nthread,lmax
  1.d-06 1.d-09         !relerr abserr
 DIFFERENTIAL EVOLUTION METHOD
    0.80   0.50         !F_XC,CR_XC
    0   1   0           !method
    2   0.800000        !strategy,F_CR
  8000    0             !itermax
!------------------------------------------------------------------------------
log_file: ./logX
READ inputX:
STRUCTURE:
! Cu(111)-3xsqrt(3)R30 a
/home/jru/LEEDPS/j190501/Cu111TMB/FH0.70
UOL=  1.889727, Bohr units of length inside crystal.
UC vectors (input units)
  13.2819000   0.0000000   0.0000000
  -6.6411000  11.5024000   0.0000000
   0.0000000   0.0000000  18.9994220
UC vectors (B)
  25.0991650   0.0000000   0.0000000
 -12.5498660  21.7363958   0.0000000
   0.0000000   0.0000000  35.9037207

1  3
   5.7071   0.0000   0.6615 Ang    10.7848   0.0000   1.2500 Bohr
  -2.8535   4.9425   0.6615 Ang    -5.3924   9.3399   1.2500 Bohr
  -2.8535  -4.9425   0.6615 Ang    -5.3924  -9.3399   1.2500 Bohr
2  24
   1.3587   0.0000   0.1763 Ang     2.5675   0.0000   0.3332 Bohr
  -0.6793   1.1766   0.1763 Ang    -1.2837   2.2235   0.3332 Bohr
  -0.6793  -1.1766   0.1763 Ang    -1.2837  -2.2235   0.3332 Bohr
  -1.4337   0.0000   0.1082 Ang    -2.7092   0.0000   0.2044 Bohr
   0.7168  -1.2416   0.1082 Ang     1.3546  -2.3462   0.2044 Bohr
   0.7168   1.2416   0.1082 Ang     1.3546   2.3462   0.2044 Bohr
  -2.7626   0.0000   0.2396 Ang    -5.2205   0.0000   0.4528 Bohr
   1.3813  -2.3925   0.2396 Ang     2.6103  -4.5211   0.4528 Bohr
   1.3813   2.3925   0.2396 Ang     2.6103   4.5211   0.4528 Bohr
  -3.6214  -1.2263   0.1303 Ang    -6.8435  -2.3174   0.2463 Bohr
   2.8727  -2.5231   0.1303 Ang     5.4287  -4.7680   0.2463 Bohr
   0.7487   3.7494   0.1303 Ang     1.4149   7.0853   0.2463 Bohr
  -3.6214   1.2263   0.1303 Ang    -6.8435   2.3174   0.2463 Bohr
   0.7487  -3.7494   0.1303 Ang     1.4149  -7.0853   0.2463 Bohr
   2.8727   2.5231   0.1303 Ang     5.4287   4.7680   0.2463 Bohr
  -5.0549   1.2435   0.2493 Ang    -9.5523   2.3498   0.4711 Bohr
   1.4506  -4.9994   0.2493 Ang     2.7412  -9.4475   0.4711 Bohr
   3.6043   3.7559   0.2493 Ang     6.8111   7.0977   0.4711 Bohr
  -5.0549  -1.2435   0.2493 Ang    -9.5523  -2.3498   0.4711 Bohr
   3.6043  -3.7559   0.2493 Ang     6.8111  -7.0977   0.4711 Bohr
   1.4506   4.9994   0.2493 Ang     2.7412   9.4475   0.4711 Bohr
  -5.8341   0.0000   0.4041 Ang   -11.0249   0.0000   0.7635 Bohr
   2.9171  -5.0525   0.4041 Ang     5.5125  -9.5479   0.7635 Bohr
   2.9171   5.0525   0.4041 Ang     5.5125   9.5478   0.7635 Bohr
3  15
   2.4706   0.0000   0.0192 Ang     4.6688   0.0000   0.0362 Bohr
  -1.2353   2.1396   0.0192 Ang    -2.3344   4.0433   0.0362 Bohr
  -1.2353  -2.1396   0.0192 Ang    -2.3344  -4.0433   0.0362 Bohr
  -3.1772   2.1681   0.0000 Ang    -6.0040   4.0970   0.0000 Bohr
  -0.2890  -3.8356   0.0000 Ang    -0.5461  -7.2482   0.0000 Bohr
   3.4662   1.6675   0.0000 Ang     6.5502   3.1511   0.0000 Bohr
  -3.1772  -2.1681   0.0000 Ang    -6.0040  -4.0970   0.0000 Bohr
   3.4662  -1.6675   0.0000 Ang     6.5502  -3.1511   0.0000 Bohr
  -0.2890   3.8356   0.0000 Ang    -0.5461   7.2482   0.0000 Bohr
  -5.5671   2.1431   0.2098 Ang   -10.5203   4.0499   0.3965 Bohr
  -5.7136   5.6096   0.2098 Ang   -10.7970  10.6006   0.3965 Bohr
  -8.6423   3.7497   0.2098 Ang   -16.3317   7.0859   0.3965 Bohr
   7.7148  -2.1431   0.2098 Ang    14.5788  -4.0499   0.3965 Bohr
   4.6396  -3.7497   0.2098 Ang     8.7675  -7.0859   0.3965 Bohr
   7.5687  -5.6096   0.2098 Ang    14.3027 -10.6006   0.3965 Bohr
4  27
   3.0087  -2.5308   2.6633 Ang     5.6856  -4.7825   5.0329 Bohr
   0.6874   3.8710   2.6633 Ang     1.2990   7.3151   5.0329 Bohr
  -3.6961  -1.3402   2.6633 Ang    -6.9846  -2.5326   5.0329 Bohr
   3.0087   2.5308   2.6633 Ang     5.6856   4.7825   5.0329 Bohr
  -3.6961   1.3402   2.6633 Ang    -6.9846   2.5326   5.0329 Bohr
   0.6874  -3.8710   2.6633 Ang     1.2990  -7.3151   5.0329 Bohr
  -5.9280   5.0719   2.6832 Ang   -11.2023   9.5845   5.0704 Bohr
  -8.0695   3.8326   2.6832 Ang   -15.2492   7.2426   5.0704 Bohr
  -5.9255   2.5978   2.6832 Ang   -11.1976   4.9092   5.0704 Bohr
   7.3539  -5.0719   2.6832 Ang    13.8969  -9.5845   5.0704 Bohr
   7.3564  -2.5978   2.6832 Ang    13.9016  -4.9092   5.0704 Bohr
   5.2127  -3.8326   2.6832 Ang     9.8506  -7.2426   5.0704 Bohr
   5.2094   1.2878   2.5679 Ang     9.8443   2.4336   4.8526 Bohr
  -3.7200   3.8676   2.5679 Ang    -7.0297   7.3087   4.8526 Bohr
  -1.4895  -5.1554   2.5679 Ang    -2.8147  -9.7422   4.8526 Bohr
   5.2094  -1.2878   2.5679 Ang     9.8443  -2.4336   4.8526 Bohr
  -1.4895   5.1554   2.5679 Ang    -2.8147   9.7422   4.8526 Bohr
  -3.7200  -3.8676   2.5679 Ang    -7.0297  -7.3087   4.8526 Bohr
   2.9614   0.0000   2.7312 Ang     5.5963   0.0000   5.1613 Bohr
  -1.4807   2.5647   2.7312 Ang    -2.7981   4.8465   5.1613 Bohr
  -1.4807  -2.5647   2.7312 Ang    -2.7981  -4.8465   5.1613 Bohr
   0.7463  -1.2926   2.6429 Ang     1.4103  -2.4427   4.9944 Bohr
   0.7463   1.2926   2.6429 Ang     1.4102   2.4427   4.9944 Bohr
  -1.4926  -0.0000   2.6429 Ang    -2.8206  -0.0000   4.9944 Bohr
   2.9338   5.0817   2.6835 Ang     5.5442   9.6029   5.0711 Bohr
  -5.8678  -0.0000   2.6835 Ang   -11.0885  -0.0001   5.0711 Bohr
   2.9339  -5.0816   2.6830 Ang     5.5443  -9.6029   5.0701 Bohr
5  27
   4.4490   0.0000   4.6989 Ang     8.4074   0.0000   8.8796 Bohr
  -2.2245   3.8529   4.6989 Ang    -4.2037   7.2810   8.8796 Bohr
  -2.2245  -3.8529   4.6989 Ang    -4.2037  -7.2810   8.8796 Bohr
  -4.4024   0.0000   4.7030 Ang    -8.3194   0.0000   8.8873 Bohr
   2.2012  -3.8126   4.7030 Ang     4.1597  -7.2048   8.8873 Bohr
   2.2012   3.8126   4.7030 Ang     4.1597   7.2048   8.8873 Bohr
  -6.6409   3.8342   4.7332 Ang   -12.5495   7.2456   8.9445 Bohr
   6.6410  -3.8342   4.7332 Ang    12.5497  -7.2456   8.9445 Bohr
  -0.0428  -5.1044   4.6652 Ang    -0.0809  -9.6458   8.8159 Bohr
   4.4419   2.5151   4.6652 Ang     8.3940   4.7529   8.8159 Bohr
  -4.3991   2.5892   4.6652 Ang    -8.3131   4.8929   8.8159 Bohr
  -0.0428   5.1043   4.6652 Ang    -0.0809   9.6458   8.8159 Bohr
  -4.3991  -2.5892   4.6652 Ang    -8.3131  -4.8929   8.8159 Bohr
   4.4419  -2.5151   4.6652 Ang     8.3940  -4.7529   8.8159 Bohr
   0.0196  -2.5580   4.7351 Ang     0.0370  -4.8340   8.9480 Bohr
   2.2055   1.2960   4.7351 Ang     4.1678   2.4490   8.9480 Bohr
  -2.2251   1.2620   4.7351 Ang    -4.2049   2.3849   8.9480 Bohr
   0.0196   2.5580   4.7351 Ang     0.0370   4.8340   8.9480 Bohr
  -2.2251  -1.2620   4.7351 Ang    -4.2049  -2.3849   8.9480 Bohr
   2.2055  -1.2960   4.7351 Ang     4.1678  -2.4490   8.9480 Bohr
   0.0000   0.0000   4.7326 Ang     0.0000   0.0000   8.9433 Bohr
  -8.8602   5.0868   4.7201 Ang   -16.7433   9.6127   8.9197 Bohr
  -6.6163   1.2859   4.7201 Ang   -12.5030   2.4299   8.9197 Bohr
  -4.4465   5.1297   4.7201 Ang    -8.4027   9.6938   8.9197 Bohr
   4.4217  -5.0868   4.7201 Ang     8.3558  -9.6127   8.9197 Bohr
   8.8354  -5.1298   4.7201 Ang    16.6965  -9.6938   8.9197 Bohr
   6.6659  -1.2859   4.7201 Ang    12.5967  -2.4299   8.9197 Bohr
6  27
  -5.1652   8.9461   6.8252 Ang    -9.7609  16.9057  12.8978 Bohr
  -2.9515   5.1120   6.8252 Ang    -5.5776   9.6603  12.8978 Bohr
  -2.9515   7.6681   6.8252 Ang    -5.5776  14.4906  12.8978 Bohr
  -2.9515  10.2242   6.8252 Ang    -5.5776  19.3209  12.8978 Bohr
  -0.7378   1.2779   6.8252 Ang    -1.3943   2.4149  12.8978 Bohr
  -0.7378   3.8340   6.8252 Ang    -1.3943   7.2452  12.8978 Bohr
  -0.7378   6.3901   6.8252 Ang    -1.3943  12.0756  12.8978 Bohr
  -0.7378   8.9462   6.8252 Ang    -1.3943  16.9059  12.8978 Bohr
   1.4759  -0.0001   6.8252 Ang     2.7890  -0.0002  12.8978 Bohr
   1.4759   2.5560   6.8252 Ang     2.7890   4.8302  12.8978 Bohr
   1.4759   5.1121   6.8252 Ang     2.7890   9.6605  12.8978 Bohr
   1.4759   7.6682   6.8252 Ang     2.7890  14.4908  12.8978 Bohr
   1.4759  10.2243   6.8252 Ang     2.7890  19.3211  12.8978 Bohr
   3.6896   1.2780   6.8252 Ang     6.9723   2.4151  12.8978 Bohr
   3.6896   3.8341   6.8252 Ang     6.9723   7.2454  12.8978 Bohr
   3.6896   6.3902   6.8252 Ang     6.9723  12.0757  12.8978 Bohr
   3.6896   8.9463   6.8252 Ang     6.9723  16.9061  12.8978 Bohr
   5.9033   0.0000   6.8252 Ang    11.1556   0.0000  12.8978 Bohr
   5.9033   2.5561   6.8252 Ang    11.1556   4.8304  12.8978 Bohr
   5.9033   5.1122   6.8252 Ang    11.1556   9.6607  12.8978 Bohr
   5.9033   7.6683   6.8252 Ang    11.1556  14.4910  12.8978 Bohr
   5.9033  10.2244   6.8252 Ang    11.1556  19.3213  12.8978 Bohr
   8.1170   1.2781   6.8252 Ang    15.3389   2.4153  12.8978 Bohr
   8.1170   3.8342   6.8252 Ang    15.3389   7.2456  12.8978 Bohr
   8.1170   6.3903   6.8252 Ang    15.3389  12.0759  12.8978 Bohr
  10.3307   0.0001   6.8252 Ang    19.5221   0.0002  12.8978 Bohr
  10.3307   2.5562   6.8252 Ang    19.5221   4.8305  12.8978 Bohr
7  27
  -5.9033  10.2244   8.9123 Ang   -11.1556  19.3213  16.8419 Bohr
  -3.6896   6.3903   8.9123 Ang    -6.9723  12.0759  16.8419 Bohr
  -3.6896   8.9464   8.9123 Ang    -6.9723  16.9062  16.8419 Bohr
  -1.4759   2.5562   8.9123 Ang    -2.7890   4.8305  16.8419 Bohr
  -1.4759   5.1123   8.9123 Ang    -2.7890   9.6608  16.8419 Bohr
  -1.4759   7.6684   8.9123 Ang    -2.7890  14.4912  16.8419 Bohr
  -1.4759  10.2245   8.9123 Ang    -2.7890  19.3215  16.8419 Bohr
   0.7378   1.2782   8.9123 Ang     1.3943   2.4154  16.8419 Bohr
   0.7378   3.8343   8.9123 Ang     1.3943   7.2458  16.8419 Bohr
   0.7378   6.3904   8.9123 Ang     1.3943  12.0761  16.8419 Bohr
   0.7378   8.9465   8.9123 Ang     1.3943  16.9064  16.8419 Bohr
   2.9515   0.0002   8.9123 Ang     5.5776   0.0004  16.8419 Bohr
   2.9515   2.5563   8.9123 Ang     5.5776   4.8307  16.8419 Bohr
   2.9515   5.1124   8.9123 Ang     5.5776   9.6610  16.8419 Bohr
   2.9515   7.6685   8.9123 Ang     5.5776  14.4914  16.8419 Bohr
   2.9515  10.2246   8.9123 Ang     5.5776  19.3217  16.8419 Bohr
   5.1652   1.2783   8.9123 Ang     9.7609   2.4156  16.8419 Bohr
   5.1652   3.8344   8.9123 Ang     9.7609   7.2460  16.8419 Bohr
   5.1652   6.3905   8.9123 Ang     9.7609  12.0763  16.8419 Bohr
   5.1652   8.9466   8.9123 Ang     9.7609  16.9066  16.8419 Bohr
   7.3789   0.0003   8.9123 Ang    13.9442   0.0005  16.8419 Bohr
   7.3789   2.5564   8.9123 Ang    13.9442   4.8309  16.8419 Bohr
   7.3789   5.1125   8.9123 Ang    13.9442   9.6612  16.8419 Bohr
   7.3789   7.6686   8.9123 Ang    13.9442  14.4915  16.8419 Bohr
   9.5926   1.2784   8.9123 Ang    18.1275   2.4158  16.8419 Bohr
   9.5926   3.8345   8.9123 Ang    18.1275   7.2461  16.8419 Bohr
  11.8063   0.0004   8.9123 Ang    22.3107   0.0007  16.8419 Bohr
8  27
  -4.4274   7.6682  10.9994 Ang    -8.3666  14.4908  20.7859 Bohr
  -4.4274  10.2243  10.9994 Ang    -8.3666  19.3211  20.7859 Bohr
  -2.2137   3.8341  10.9994 Ang    -4.1833   7.2454  20.7859 Bohr
  -2.2137   6.3902  10.9994 Ang    -4.1833  12.0757  20.7859 Bohr
  -2.2137   8.9463  10.9994 Ang    -4.1833  16.9061  20.7859 Bohr
   0.0000   0.0000  10.9994 Ang     0.0000   0.0000  20.7859 Bohr
   0.0000   2.5561  10.9994 Ang     0.0000   4.8303  20.7859 Bohr
   0.0000   5.1122  10.9994 Ang     0.0000   9.6607  20.7859 Bohr
  -0.0000   7.6683  10.9994 Ang    -0.0000  14.4910  20.7859 Bohr
   0.0000  10.2244  10.9994 Ang     0.0000  19.3213  20.7859 Bohr
   2.2137   1.2781  10.9994 Ang     4.1833   2.4153  20.7859 Bohr
   2.2137   3.8342  10.9994 Ang     4.1833   7.2456  20.7859 Bohr
   2.2137   6.3903  10.9994 Ang     4.1833  12.0759  20.7859 Bohr
   2.2137   8.9464  10.9994 Ang     4.1833  16.9063  20.7859 Bohr
   4.4274   0.0001  10.9994 Ang     8.3666   0.0002  20.7859 Bohr
   4.4274   2.5562  10.9994 Ang     8.3666   4.8305  20.7859 Bohr
   4.4274   5.1123  10.9994 Ang     8.3666   9.6609  20.7859 Bohr
   4.4274   7.6684  10.9994 Ang     8.3666  14.4912  20.7859 Bohr
   4.4274  10.2245  10.9994 Ang     8.3666  19.3215  20.7859 Bohr
   6.6411   1.2782  10.9994 Ang    12.5499   2.4154  20.7859 Bohr
   6.6411   3.8343  10.9994 Ang    12.5499   7.2458  20.7859 Bohr
   6.6411   6.3904  10.9994 Ang    12.5499  12.0761  20.7859 Bohr
   6.6411   8.9465  10.9994 Ang    12.5499  16.9064  20.7859 Bohr
   8.8548   0.0002  10.9994 Ang    16.7332   0.0004  20.7859 Bohr
   8.8548   2.5563  10.9994 Ang    16.7332   4.8307  20.7859 Bohr
   8.8548   5.1124  10.9994 Ang    16.7332   9.6610  20.7859 Bohr
  11.0685   1.2783  10.9994 Ang    20.9164   2.4156  20.7859 Bohr
 1  1.9000  2.4000  0.3200  1.0000  S
 2  1.6000  2.0000  0.3200  1.0000  C
 3  0.9000  1.3000  0.3200  1.0000  H
 4  2.4100  2.4250  0.3200  1.0000  Cu
 5  2.4150  2.4200  0.3200  1.0000  Cu
 6  2.4150  2.4200  0.3200  1.0000  Cu
 7  2.4150  2.4200  0.3200  1.0000  Cu
 8  2.4150  2.4200  0.3200  1.0000  Cu
OPTIONS:
bos==s
SpinPS==n
Chg==n
Pot==n
WF==n
eev1=4., eev2=260., emesh=4.
nthread=2, lmax=9
relerr=1.E-06, abserr=1.E-09
DIFFERENTIAL EVOLUTION
F_XC, CR_XC=  0.80  0.50
method= 0 1 0
strategy, F_CR=  2  0.80
itermax= 8000

#atoms in UC=177
volUC (B**3)=19587.83

NNshells from JR.
========================================================================
   atom    1.S      7 neighbor shells, 11 neighbors
      NN   1.S     2.C     4.Cu    4.Cu    2.C     3.H     3.H     3.H 
  number     1       1       2       1       2       2       2       1
dist.(B)  0.0000  3.3252  4.4481  5.0007  5.3670  5.4244  5.6147  6.2353
dist.(A)  0.0000  1.7596  2.3538  2.6463  2.8401  2.8705  2.9712  3.2996

ia 1 2 4 4 2 3 3 3
na 1 1 2 1 2 2 2 1

========================================================================
   atom    2.C      7 neighbor shells, 12 neighbors
      NN   2.C     3.H     2.C     2.C     2.C     3.H     2.C     4.Cu
  number     1       1       2       2       2       2       1       2
dist.(B)  0.0000  2.1222  2.6443  4.4470  4.5229  5.0894  5.2783  5.3882
dist.(A)  0.0000  1.1230  1.3993  2.3532  2.3934  2.6932  2.7931  2.8513

ia 2 3 2 2 2 3 2 4
na 1 1 2 2 2 2 1 2

========================================================================
   atom    3.H      7 neighbor shells, 11 neighbors
      NN   3.H     2.C     3.H     2.C     2.C     2.C     4.Cu    1.S 
  number     1       1       2       2       2       2       1       1
dist.(B)  0.0000  2.1222  3.6702  4.0641  4.8327  4.9851  5.2083  6.2353
dist.(A)  0.0000  1.1230  1.9422  2.1506  2.5574  2.6380  2.7561  3.2996

ia 3 2 3 2 2 2 4 1
na 1 1 2 2 2 2 1 1

========================================================================
   atom    4.Cu     7 neighbor shells,  7 neighbors
      NN   4.Cu    5.Cu    4.Cu    4.Cu    2.C     5.Cu    5.Cu    4.Cu
  number     1       1       1       1       1       1       1       1
dist.(B)  0.0000  4.6526  4.7797  4.7851  4.7935  4.8013  4.8038  4.8226
dist.(A)  0.0000  2.4621  2.5293  2.5321  2.5366  2.5407  2.5420  2.5520

ia 4 5 4 4 2 5 5 4
na 1 1 1 1 1 1 1 1

========================================================================
   atom    5.Cu     7 neighbor shells,  9 neighbors
      NN   5.Cu    4.Cu    5.Cu    5.Cu    5.Cu    6.Cu    5.Cu    6.Cu
  number     1       1       2       1       1       1       2       1
dist.(B)  0.0000  4.6614  4.7533  4.8427  4.8432  4.8681  4.8966  4.9029
dist.(A)  0.0000  2.4667  2.5153  2.5627  2.5629  2.5761  2.5912  2.5945

ia 5 4 5 5 5 6 5 6
na 1 1 2 1 1 1 2 1

========================================================================
   atom    6.Cu     7 neighbor shells, 10 neighbors
      NN   6.Cu    5.Cu    6.Cu    7.Cu    6.Cu    6.Cu    7.Cu    6.Cu
  number     1       2       2       1       1       2       1       1
dist.(B)  0.0000  4.8140  4.8297  4.8298  4.8302  4.8304  4.8303  4.8305
dist.(A)  0.0000  2.5475  2.5558  2.5558  2.5560  2.5561  2.5561  2.5562

ia 6 5 6 7 6 6 7 6
na 1 2 2 1 1 2 1 1

========================================================================
   atom    7.Cu     7 neighbor shells,  8 neighbors
      NN   7.Cu    7.Cu    6.Cu    8.Cu    7.Cu    7.Cu    6.Cu    8.Cu
  number     1       2       1       1       1       1       1       1
dist.(B)  0.0000  4.8297  4.8300  4.8301  4.8303  4.8304  4.8304  4.8303
dist.(A)  0.0000  2.5558  2.5559  2.5560  2.5561  2.5561  2.5561  2.5561

ia 7 7 6 8 7 7 6 8
na 1 2 1 1 1 1 1 1

========================================================================
   atom    8.Cu     7 neighbor shells, 10 neighbors
      NN   8.Cu    8.Cu    7.Cu    8.Cu    8.Cu    7.Cu    8.Cu    7.Cu
  number     1       2       2       1       2       1       1       1
dist.(B)  0.0000  4.8297  4.8302  4.8302  4.8303  4.8305  4.8305  6.8305
dist.(A)  0.0000  2.5558  2.5560  2.5560  2.5561  2.5562  2.5562  3.6145

ia 8 8 7 8 8 7 8 7
na 1 2 2 1 2 1 1 1

NN distances (B).
   1       2       3       4       5       6       7       8
  3.3252  2.1222  2.1222  4.6526  4.6614  4.8140  4.8297  4.8297

z,nx,HFrmin,HFrmax 16.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02
z,nx,HFrmin,HFrmax  6.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02
z,nx,HFrmin,HFrmax  1.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02
z,nx,HFrmin,HFrmax 29.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02
z,nx,HFrmin,HFrmax 29.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02
z,nx,HFrmin,HFrmax 29.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02
z,nx,HFrmin,HFrmax 29.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02
z,nx,HFrmin,HFrmax 29.0 2000  1.00000000000000E-10  6.00000000000000E+01
r1,dx   1.01365245284744E-10  1.35600977460813E-02

isuper from Shirley's Hartree-Fock program
atom  1 z=16.000000 HFz=16.0000000000
atom  2 z= 6.000000 HFz= 6.0000000000
atom  3 z= 1.000000 HFz= 1.0000000000
atom  4 z=29.000000 HFz=29.0000000000
atom  5 z=29.000000 HFz=29.0000000000
atom  6 z=29.000000 HFz=29.0000000000
atom  7 z=29.000000 HFz=29.0000000000
atom  8 z=29.000000 HFz=29.0000000000

Noise-free atrho4pir2 after E.Shirley.
nx = 1926 1926 1926 1926 1926 1926 1926 1926

================================================================================
CRYSTAL POTENTIAL: MT radii and potential levels
--------------------------------------------------------------------------------
rmax(B)
  2.4000  2.0000  1.3000  2.4250  2.4200  2.4200  2.4200  2.4200
rmin(B)
  1.9000  1.6000  0.9000  2.4100  2.4150  2.4150  2.4150  2.4150
rmtovl
  0.3200  0.3200  0.3200  0.3200  0.3200  0.3200  0.3200  0.3200

eeasiss ITERATION 1
fitness = 3.E+00
#calls,#improvements= 640080 512
atom
   S.1     C.2     H.3     Cu.4    Cu.5    Cu.6    Cu.7    Cu.8 
NNatom
   C.2     H.3     C.2     Cu.5    Cu.4    Cu.5    Cu.7    Cu.8 
rmt(B)
  2.0605  1.7112  1.0901  2.4100  2.4150  2.4150  2.4150  2.4150
rmtNN(B)
  1.7112  1.0901  1.7112  2.4150  2.4100  2.4150  2.4150  2.4150
RelOvlp(B)
  0.1343  0.3200  0.3200  0.0370  0.0351  0.0033  0.0001  0.0001

eeasiss ITERATION 2
fitness = 2.E-15
#calls,#improvements= 640080 619
atom
   S.1     C.2     H.3     Cu.4    Cu.5    Cu.6    Cu.7    Cu.8 
NNatom
   C.2     H.3     C.2     Cu.5    Cu.4    Cu.5    Cu.7    Cu.8 
rmt(B)
  2.0605  1.7112  1.0901  2.4100  2.4150  2.4150  2.4150  2.4150
rmtNN(B)
  1.7112  1.0901  1.7112  2.4150  2.4100  2.4150  2.4150  2.4150
RelOvlp(B)
  0.1343  0.3200  0.3200  0.0370  0.0351  0.0033  0.0001  0.0001
No MT-to-interstice potential steps.
VcryR(eV)
 -0.0000  0.0000 -0.0000 -0.0000  0.0000  0.0000  0.0000  0.0000
Vcry0(eV) = .0000

nxR(ir) enclosing rmt(ir).
nxR
    1752    1738    1705    1763    1764    1764    1764    1764

eeasisss: write files 1414 to eeas.
eeasisss: files 1414 written.
DIRECTORY = thread1
DIRECTORY = thread2

================================================================================
EEAS
--------------------------------------------------------------------------------

 ie Einc(eV)
  1   4.0000
VxcR(eV)
 -12.745 -12.747 -11.062  -9.389  -9.282  -9.282  -9.282  -9.282
Vxc0(eV) = -9.978
 ie Einc(eV)     emv0     Vxc0
  1   4.0000  13.9778  -9.9778
ODE STEPu = 310, STEPy = 163, RADIAL grid = 1764

 ie Einc(eV)
  2   8.0000
VxcR(eV)
 -12.704 -12.705 -11.087  -9.468  -9.373  -9.373  -9.373  -9.373
Vxc0(eV) = -10.041
 ie Einc(eV)     emv0     Vxc0
  2   8.0000  18.0411 -10.0411
ODE STEPu = 309, STEPy = 161, RADIAL grid = 1764

 ie Einc(eV)
  3  12.0000
VxcR(eV)
 -12.695 -12.695 -11.153  -9.607  -9.523  -9.523  -9.523  -9.523
Vxc0(eV) = -10.158
 ie Einc(eV)     emv0     Vxc0
  3  12.0000  22.1580 -10.1580
ODE STEPu = 312, STEPy = 161, RADIAL grid = 1764

 ie Einc(eV)
  4  16.0000
VxcR(eV)
 -12.722 -12.722 -11.262  -9.901  -9.914  -9.914  -9.914  -9.914
Vxc0(eV) = -10.454
 ie Einc(eV)     emv0     Vxc0
  4  16.0000  26.4544 -10.4544
ODE STEPu = 308, STEPy = 162, RADIAL grid = 1764

 ie Einc(eV)
  5  20.0000
VxcR(eV)
 -12.785 -12.786 -11.405 -10.063 -10.008 -10.008 -10.008 -10.008
Vxc0(eV) = -10.559
 ie Einc(eV)     emv0     Vxc0
  5  20.0000  30.5588 -10.5588
ODE STEPu = 315, STEPy = 166, RADIAL grid = 1764

 ie Einc(eV)
  6  24.0000
VxcR(eV)
 -12.877 -12.875 -11.678  -9.808  -9.696  -9.696  -9.696  -9.696
Vxc0(eV) = -10.366
 ie Einc(eV)     emv0     Vxc0
  6  24.0000  34.3660 -10.3660
ODE STEPu = 317, STEPy = 166, RADIAL grid = 1764

 ie Einc(eV)
  7  28.0000
VxcR(eV)
 -13.046 -13.030 -12.126  -9.418  -9.287  -9.287  -9.287  -9.287
Vxc0(eV) = -10.119
 ie Einc(eV)     emv0     Vxc0
  7  28.0000  38.1186 -10.1186
ODE STEPu = 313, STEPy = 166, RADIAL grid = 1764

 ie Einc(eV)
  8  32.0000
VxcR(eV)
 -13.264 -13.281 -11.770  -8.993  -8.859  -8.859  -8.859  -8.859
Vxc0(eV) = -9.801
 ie Einc(eV)     emv0     Vxc0
  8  32.0000  41.8006  -9.8006
ODE STEPu = 308, STEPy = 167, RADIAL grid = 1764

 ie Einc(eV)
  9  36.0000
VxcR(eV)
 -13.311 -13.315 -11.288  -8.619  -8.489  -8.489  -8.489  -8.489
Vxc0(eV) = -9.482
 ie Einc(eV)     emv0     Vxc0
  9  36.0000  45.4820  -9.4820
ODE STEPu = 319, STEPy = 164, RADIAL grid = 1764

 ie Einc(eV)
 10  40.0000
VxcR(eV)
 -13.121 -13.118 -10.861  -8.284  -8.159  -8.159  -8.159  -8.159
Vxc0(eV) = -9.164
 ie Einc(eV)     emv0     Vxc0
 10  40.0000  49.1635  -9.1635
ODE STEPu = 311, STEPy = 165, RADIAL grid = 1764

 ie Einc(eV)
 11  44.0000
VxcR(eV)
 -12.808 -12.768 -10.497  -7.997  -7.875  -7.875  -7.875  -7.875
Vxc0(eV) = -8.863
 ie Einc(eV)     emv0     Vxc0
 11  44.0000  52.8630  -8.8630
ODE STEPu = 316, STEPy = 167, RADIAL grid = 1764

 ie Einc(eV)
 12  48.0000
VxcR(eV)
 -12.421 -12.439 -10.170  -7.729  -7.607  -7.607  -7.607  -7.607
Vxc0(eV) = -8.580
 ie Einc(eV)     emv0     Vxc0
 12  48.0000  56.5796  -8.5796
ODE STEPu = 315, STEPy = 164, RADIAL grid = 1764

 ie Einc(eV)
 13  52.0000
VxcR(eV)
 -12.113 -12.098  -9.864  -7.498  -7.382  -7.382  -7.382  -7.382
Vxc0(eV) = -8.330
 ie Einc(eV)     emv0     Vxc0
 13  52.0000  60.3300  -8.3300
ODE STEPu = 319, STEPy = 165, RADIAL grid = 1764

 ie Einc(eV)
 14  56.0000
VxcR(eV)
 -11.764 -11.762  -9.598  -7.283  -7.169  -7.169  -7.169  -7.169
Vxc0(eV) = -8.093
 ie Einc(eV)     emv0     Vxc0
 14  56.0000  64.0932  -8.0932
ODE STEPu = 313, STEPy = 167, RADIAL grid = 1764

 ie Einc(eV)
 15  60.0000
VxcR(eV)
 -11.484 -11.470  -9.339  -7.083  -6.973  -6.973  -6.973  -6.973
Vxc0(eV) = -7.877
 ie Einc(eV)     emv0     Vxc0
 15  60.0000  67.8766  -7.8766
ODE STEPu = 313, STEPy = 165, RADIAL grid = 1764

 ie Einc(eV)
 16  64.0000
VxcR(eV)
 -11.220 -11.214  -9.109  -6.906  -6.799  -6.799  -6.799  -6.799
Vxc0(eV) = -7.685
 ie Einc(eV)     emv0     Vxc0
 16  64.0000  71.6847  -7.6847
ODE STEPu = 316, STEPy = 170, RADIAL grid = 1764

 ie Einc(eV)
 17  68.0000
VxcR(eV)
 -10.971 -10.957  -8.900  -6.741  -6.636  -6.636  -6.636  -6.636
Vxc0(eV) = -7.504
 ie Einc(eV)     emv0     Vxc0
 17  68.0000  75.5036  -7.5036
ODE STEPu = 313, STEPy = 170, RADIAL grid = 1764

 ie Einc(eV)
 18  72.0000
VxcR(eV)
 -10.731 -10.713  -8.701  -6.597  -6.493  -6.493  -6.493  -6.493
Vxc0(eV) = -7.340
 ie Einc(eV)     emv0     Vxc0
 18  72.0000  79.3402  -7.3402
ODE STEPu = 340, STEPy = 168, RADIAL grid = 1764

 ie Einc(eV)
 19  76.0000
VxcR(eV)
 -10.502 -10.492  -8.507  -6.453  -6.352  -6.352  -6.352  -6.352
Vxc0(eV) = -7.182
 ie Einc(eV)     emv0     Vxc0
 19  76.0000  83.1816  -7.1816
ODE STEPu = 321, STEPy = 167, RADIAL grid = 1764

 ie Einc(eV)
 20  80.0000
VxcR(eV)
 -10.303 -10.279  -8.350  -6.321  -6.222  -6.222  -6.222  -6.222
Vxc0(eV) = -7.037
 ie Einc(eV)     emv0     Vxc0
 20  80.0000  87.0366  -7.0366
ODE STEPu = 315, STEPy = 167, RADIAL grid = 1764

 ie Einc(eV)
 21  84.0000
VxcR(eV)
 -10.095 -10.089  -8.200  -6.199  -6.101  -6.101  -6.101  -6.101
Vxc0(eV) = -6.902
 ie Einc(eV)     emv0     Vxc0
 21  84.0000  90.9021  -6.9021
ODE STEPu = 321, STEPy = 171, RADIAL grid = 1764

 ie Einc(eV)
 22  88.0000
VxcR(eV)
  -9.906  -9.908  -8.035  -6.083  -5.987  -5.987  -5.987  -5.987
Vxc0(eV) = -6.773
 ie Einc(eV)     emv0     Vxc0
 22  88.0000  94.7732  -6.7732
ODE STEPu = 318, STEPy = 174, RADIAL grid = 1764

 ie Einc(eV)
 23  92.0000
VxcR(eV)
  -9.738  -9.735  -7.903  -5.975  -5.879  -5.879  -5.879  -5.879
Vxc0(eV) = -6.653
 ie Einc(eV)     emv0     Vxc0
 23  92.0000  98.6534  -6.6534
ODE STEPu = 322, STEPy = 165, RADIAL grid = 1764

 ie Einc(eV)
 24  96.0000
VxcR(eV)
  -9.582  -9.561  -7.769  -5.871  -5.777  -5.777  -5.777  -5.777
Vxc0(eV) = -6.538
 ie Einc(eV)     emv0     Vxc0
 24  96.0000 102.5376  -6.5376
ODE STEPu = 319, STEPy = 167, RADIAL grid = 1764

 ie Einc(eV)
 25 100.0000
VxcR(eV)
  -9.431  -9.405  -7.640  -5.773  -5.680  -5.680  -5.680  -5.680
Vxc0(eV) = -6.429
 ie Einc(eV)     emv0     Vxc0
 25 100.0000 106.4289  -6.4289
ODE STEPu = 313, STEPy = 169, RADIAL grid = 1764

 ie Einc(eV)
 26 104.0000
VxcR(eV)
  -9.277  -9.269  -7.512  -5.680  -5.588  -5.588  -5.588  -5.588
Vxc0(eV) = -6.327
 ie Einc(eV)     emv0     Vxc0
 26 104.0000 110.3266  -6.3266
ODE STEPu = 318, STEPy = 171, RADIAL grid = 1764

 ie Einc(eV)
 27 108.0000
VxcR(eV)
  -9.139  -9.130  -7.414  -5.592  -5.501  -5.501  -5.501  -5.501
Vxc0(eV) = -6.230
 ie Einc(eV)     emv0     Vxc0
 27 108.0000 114.2304  -6.2304
ODE STEPu = 316, STEPy = 167, RADIAL grid = 1764

 ie Einc(eV)
 28 112.0000
VxcR(eV)
  -8.991  -8.991  -7.307  -5.507  -5.417  -5.417  -5.417  -5.417
Vxc0(eV) = -6.136
 ie Einc(eV)     emv0     Vxc0
 28 112.0000 118.1362  -6.1362
ODE STEPu = 316, STEPy = 169, RADIAL grid = 1764

 ie Einc(eV)
 29 116.0000
VxcR(eV)
  -8.874  -8.870  -7.205  -5.426  -5.337  -5.337  -5.337  -5.337
Vxc0(eV) = -6.048
 ie Einc(eV)     emv0     Vxc0
 29 116.0000 122.0479  -6.0479
ODE STEPu = 319, STEPy = 169, RADIAL grid = 1764

 ie Einc(eV)
 30 120.0000
VxcR(eV)
  -8.748  -8.746  -7.105  -5.349  -5.261  -5.261  -5.261  -5.261
Vxc0(eV) = -5.962
 ie Einc(eV)     emv0     Vxc0
 30 120.0000 125.9622  -5.9622
ODE STEPu = 313, STEPy = 170, RADIAL grid = 1764

 ie Einc(eV)
 31 124.0000
VxcR(eV)
  -8.635  -8.633  -7.010  -5.275  -5.188  -5.188  -5.188  -5.188
Vxc0(eV) = -5.881
 ie Einc(eV)     emv0     Vxc0
 31 124.0000 129.8810  -5.8810
ODE STEPu = 313, STEPy = 169, RADIAL grid = 1764

 ie Einc(eV)
 32 128.0000
VxcR(eV)
  -8.524  -8.526  -6.924  -5.205  -5.118  -5.118  -5.118  -5.118
Vxc0(eV) = -5.804
 ie Einc(eV)     emv0     Vxc0
 32 128.0000 133.8039  -5.8039
ODE STEPu = 315, STEPy = 172, RADIAL grid = 1764

 ie Einc(eV)
 33 132.0000
VxcR(eV)
  -8.434  -8.419  -6.840  -5.137  -5.051  -5.051  -5.051  -5.051
Vxc0(eV) = -5.729
 ie Einc(eV)     emv0     Vxc0
 33 132.0000 137.7294  -5.7294
ODE STEPu = 320, STEPy = 169, RADIAL grid = 1764

 ie Einc(eV)
 34 136.0000
VxcR(eV)
  -8.332  -8.317  -6.759  -5.071  -4.986  -4.986  -4.986  -4.986
Vxc0(eV) = -5.657
 ie Einc(eV)     emv0     Vxc0
 34 136.0000 141.6575  -5.6575
ODE STEPu = 322, STEPy = 168, RADIAL grid = 1764

 ie Einc(eV)
 35 140.0000
VxcR(eV)
  -8.237  -8.226  -6.679  -5.008  -4.924  -4.924  -4.924  -4.924
Vxc0(eV) = -5.589
 ie Einc(eV)     emv0     Vxc0
 35 140.0000 145.5892  -5.5892
ODE STEPu = 317, STEPy = 172, RADIAL grid = 1764

 ie Einc(eV)
 36 144.0000
VxcR(eV)
  -8.139  -8.135  -6.601  -4.948  -4.864  -4.864  -4.864  -4.864
Vxc0(eV) = -5.523
 ie Einc(eV)     emv0     Vxc0
 36 144.0000 149.5229  -5.5229
ODE STEPu = 317, STEPy = 171, RADIAL grid = 1764

 ie Einc(eV)
 37 148.0000
VxcR(eV)
  -8.039  -8.040  -6.526  -4.889  -4.806  -4.806  -4.806  -4.806
Vxc0(eV) = -5.458
 ie Einc(eV)     emv0     Vxc0
 37 148.0000 153.4577  -5.4577
ODE STEPu = 317, STEPy = 174, RADIAL grid = 1764

 ie Einc(eV)
 38 152.0000
VxcR(eV)
  -7.965  -7.951  -6.454  -4.833  -4.750  -4.750  -4.750  -4.750
Vxc0(eV) = -5.396
 ie Einc(eV)     emv0     Vxc0
 38 152.0000 157.3958  -5.3958
ODE STEPu = 315, STEPy = 174, RADIAL grid = 1764

 ie Einc(eV)
 39 156.0000
VxcR(eV)
  -7.885  -7.874  -6.384  -4.778  -4.697  -4.697  -4.697  -4.697
Vxc0(eV) = -5.337
 ie Einc(eV)     emv0     Vxc0
 39 156.0000 161.3369  -5.3369
ODE STEPu = 319, STEPy = 175, RADIAL grid = 1764

 ie Einc(eV)
 40 160.0000
VxcR(eV)
  -7.792  -7.795  -6.317  -4.725  -4.645  -4.645  -4.645  -4.645
Vxc0(eV) = -5.279
 ie Einc(eV)     emv0     Vxc0
 40 160.0000 165.2792  -5.2792
ODE STEPu = 318, STEPy = 170, RADIAL grid = 1764

 ie Einc(eV)
 41 164.0000
VxcR(eV)
  -7.730  -7.717  -6.251  -4.675  -4.594  -4.594  -4.594  -4.594
Vxc0(eV) = -5.224
 ie Einc(eV)     emv0     Vxc0
 41 164.0000 169.2236  -5.2236
ODE STEPu = 334, STEPy = 173, RADIAL grid = 1764

 ie Einc(eV)
 42 168.0000
VxcR(eV)
  -7.648  -7.642  -6.188  -4.625  -4.546  -4.546  -4.546  -4.546
Vxc0(eV) = -5.169
 ie Einc(eV)     emv0     Vxc0
 42 168.0000 173.1695  -5.1695
ODE STEPu = 317, STEPy = 172, RADIAL grid = 1764

 ie Einc(eV)
 43 172.0000
VxcR(eV)
  -7.580  -7.570  -6.127  -4.578  -4.499  -4.499  -4.499  -4.499
Vxc0(eV) = -5.117
 ie Einc(eV)     emv0     Vxc0
 43 172.0000 177.1173  -5.1173
ODE STEPu = 313, STEPy = 171, RADIAL grid = 1764

 ie Einc(eV)
 44 176.0000
VxcR(eV)
  -7.508  -7.499  -6.067  -4.531  -4.453  -4.453  -4.453  -4.453
Vxc0(eV) = -5.067
 ie Einc(eV)     emv0     Vxc0
 44 176.0000 181.0666  -5.0666
ODE STEPu = 322, STEPy = 175, RADIAL grid = 1764

 ie Einc(eV)
 45 180.0000
VxcR(eV)
  -7.439  -7.430  -6.009  -4.486  -4.409  -4.409  -4.409  -4.409
Vxc0(eV) = -5.017
 ie Einc(eV)     emv0     Vxc0
 45 180.0000 185.0173  -5.0173
ODE STEPu = 322, STEPy = 172, RADIAL grid = 1764

 ie Einc(eV)
 46 184.0000
VxcR(eV)
  -7.374  -7.367  -5.953  -4.443  -4.366  -4.366  -4.366  -4.366
Vxc0(eV) = -4.970
 ie Einc(eV)     emv0     Vxc0
 46 184.0000 188.9700  -4.9700
ODE STEPu = 320, STEPy = 166, RADIAL grid = 1764

 ie Einc(eV)
 47 188.0000
VxcR(eV)
  -7.309  -7.303  -5.898  -4.401  -4.324  -4.324  -4.324  -4.324
Vxc0(eV) = -4.924
 ie Einc(eV)     emv0     Vxc0
 47 188.0000 192.9238  -4.9238
ODE STEPu = 317, STEPy = 173, RADIAL grid = 1764

 ie Einc(eV)
 48 192.0000
VxcR(eV)
  -7.248  -7.239  -5.845  -4.360  -4.284  -4.284  -4.284  -4.284
Vxc0(eV) = -4.879
 ie Einc(eV)     emv0     Vxc0
 48 192.0000 196.8785  -4.8785
ODE STEPu = 318, STEPy = 173, RADIAL grid = 1764

 ie Einc(eV)
 49 196.0000
VxcR(eV)
  -7.186  -7.181  -5.793  -4.320  -4.244  -4.244  -4.244  -4.244
Vxc0(eV) = -4.835
 ie Einc(eV)     emv0     Vxc0
 49 196.0000 200.8350  -4.8350
ODE STEPu = 317, STEPy = 170, RADIAL grid = 1764

 ie Einc(eV)
 50 200.0000
VxcR(eV)
  -7.127  -7.120  -5.743  -4.281  -4.206  -4.206  -4.206  -4.206
Vxc0(eV) = -4.792
 ie Einc(eV)     emv0     Vxc0
 50 200.0000 204.7922  -4.7922
ODE STEPu = 317, STEPy = 173, RADIAL grid = 1764

 ie Einc(eV)
 51 204.0000
VxcR(eV)
  -7.069  -7.063  -5.694  -4.243  -4.169  -4.169  -4.169  -4.169
Vxc0(eV) = -4.751
 ie Einc(eV)     emv0     Vxc0
 51 204.0000 208.7508  -4.7508
ODE STEPu = 320, STEPy = 172, RADIAL grid = 1764

 ie Einc(eV)
 52 208.0000
VxcR(eV)
  -7.013  -7.007  -5.646  -4.206  -4.132  -4.132  -4.132  -4.132
Vxc0(eV) = -4.710
 ie Einc(eV)     emv0     Vxc0
 52 208.0000 212.7105  -4.7105
ODE STEPu = 323, STEPy = 170, RADIAL grid = 1764

 ie Einc(eV)
 53 212.0000
VxcR(eV)
  -6.958  -6.952  -5.599  -4.170  -4.097  -4.097  -4.097  -4.097
Vxc0(eV) = -4.671
 ie Einc(eV)     emv0     Vxc0
 53 212.0000 216.6711  -4.6711
ODE STEPu = 319, STEPy = 174, RADIAL grid = 1764

 ie Einc(eV)
 54 216.0000
VxcR(eV)
  -6.905  -6.898  -5.554  -4.135  -4.063  -4.063  -4.063  -4.063
Vxc0(eV) = -4.633
 ie Einc(eV)     emv0     Vxc0
 54 216.0000 220.6327  -4.6327
ODE STEPu = 320, STEPy = 171, RADIAL grid = 1764

 ie Einc(eV)
 55 220.0000
VxcR(eV)
  -6.852  -6.845  -5.509  -4.101  -4.029  -4.029  -4.029  -4.029
Vxc0(eV) = -4.595
 ie Einc(eV)     emv0     Vxc0
 55 220.0000 224.5953  -4.5953
ODE STEPu = 320, STEPy = 174, RADIAL grid = 1764

 ie Einc(eV)
 56 224.0000
VxcR(eV)
  -6.801  -6.794  -5.466  -4.068  -3.996  -3.996  -3.996  -3.996
Vxc0(eV) = -4.559
 ie Einc(eV)     emv0     Vxc0
 56 224.0000 228.5588  -4.5588
ODE STEPu = 323, STEPy = 174, RADIAL grid = 1764

 ie Einc(eV)
 57 228.0000
VxcR(eV)
  -6.751  -6.744  -5.424  -4.036  -3.964  -3.964  -3.964  -3.964
Vxc0(eV) = -4.523
 ie Einc(eV)     emv0     Vxc0
 57 228.0000 232.5232  -4.5232
ODE STEPu = 325, STEPy = 175, RADIAL grid = 1764

 ie Einc(eV)
 58 232.0000
VxcR(eV)
  -6.702  -6.695  -5.383  -4.004  -3.933  -3.933  -3.933  -3.933
Vxc0(eV) = -4.488
 ie Einc(eV)     emv0     Vxc0
 58 232.0000 236.4884  -4.4884
ODE STEPu = 334, STEPy = 172, RADIAL grid = 1764

 ie Einc(eV)
 59 236.0000
VxcR(eV)
  -6.654  -6.648  -5.342  -3.973  -3.903  -3.903  -3.903  -3.903
Vxc0(eV) = -4.454
 ie Einc(eV)     emv0     Vxc0
 59 236.0000 240.4544  -4.4544
ODE STEPu = 320, STEPy = 175, RADIAL grid = 1764

 ie Einc(eV)
 60 240.0000
VxcR(eV)
  -6.607  -6.601  -5.303  -3.943  -3.873  -3.873  -3.873  -3.873
Vxc0(eV) = -4.421
 ie Einc(eV)     emv0     Vxc0
 60 240.0000 244.4212  -4.4212
ODE STEPu = 340, STEPy = 173, RADIAL grid = 1764

 ie Einc(eV)
 61 244.0000
VxcR(eV)
  -6.561  -6.555  -5.264  -3.914  -3.844  -3.844  -3.844  -3.844
Vxc0(eV) = -4.389
 ie Einc(eV)     emv0     Vxc0
 61 244.0000 248.3887  -4.3887
ODE STEPu = 320, STEPy = 173, RADIAL grid = 1764

 ie Einc(eV)
 62 248.0000
VxcR(eV)
  -6.516  -6.510  -5.227  -3.885  -3.816  -3.816  -3.816  -3.816
Vxc0(eV) = -4.357
 ie Einc(eV)     emv0     Vxc0
 62 248.0000 252.3569  -4.3569
ODE STEPu = 324, STEPy = 175, RADIAL grid = 1764

 ie Einc(eV)
 63 252.0000
VxcR(eV)
  -6.472  -6.466  -5.190  -3.857  -3.788  -3.788  -3.788  -3.788
Vxc0(eV) = -4.326
 ie Einc(eV)     emv0     Vxc0
 63 252.0000 256.3259  -4.3259
ODE STEPu = 321, STEPy = 179, RADIAL grid = 1764

 ie Einc(eV)
 64 256.0000
VxcR(eV)
  -6.429  -6.423  -5.154  -3.829  -3.761  -3.761  -3.761  -3.761
Vxc0(eV) = -4.295
 ie Einc(eV)     emv0     Vxc0
 64 256.0000 260.2955  -4.2955
ODE STEPu = 322, STEPy = 177, RADIAL grid = 1764

 ie Einc(eV)
 65 260.0000
VxcR(eV)
  -6.387  -6.381  -5.118  -3.802  -3.734  -3.734  -3.734  -3.734
Vxc0(eV) = -4.266
 ie Einc(eV)     emv0     Vxc0
 65 260.0000 264.2657  -4.2657
ODE STEPu = 328, STEPy = 175, RADIAL grid = 1764

================================================================================
Lindhard correlation potential -Lconst/p at Einc = max
      for the atoms of the given crystal
--------------------------------------------------------------------------------
atom   =  S.1    C.2    H.3    Cu.4   Cu.5   Cu.6   Cu.7   Cu.8

Upper energy boundary of Sernelius data base sdat(p/pF,rs),
Einc-Vxc0(eV)
      =   158.   161.   122.    75.    72.    72.    72.    72.

Electron-space radius rs at MT radius (rs in a0),
MT rs =   1.72   1.70   1.96   2.52   2.57   2.57   2.57   2.57

Lindhard const extrapolated from sdat (MT pot. & Vxc0 step-free),
const =  -0.90  -0.91  -0.85  -0.83  -0.81  -0.81  -0.81  -0.81

Lindhard const per atom: -sqrt((pi^3)*rho),
const =  -1.21  -1.23  -0.99  -0.68  -0.66  -0.66  -0.66  -0.66

================================================================================
PS accuracy
--------------------------------------------------------------------------------
ODE tolerances, relerr=1.E-06 abserr=1.E-09
#phase shifts=10
PS accuracy on subset ie,kappa:
ir

 1 4.E-06 2.E-06 3.E-06 4.E-06 4.E-06 5.E-06 3.E-06 3.E-06 1.E-06 2.E-07

 2 2.E-06 2.E-06 2.E-06 2.E-06 3.E-06 2.E-06 9.E-07 3.E-07 1.E-07 2.E-08

 3 2.E-06 2.E-06 2.E-06 4.E-06 2.E-06 1.E-06 2.E-07 4.E-09 8.E-10 4.E-10

 4 2.E-06 3.E-06 4.E-06 1.E-05 4.E-06 4.E-06 7.E-06 2.E-06 2.E-06 5.E-07

 5 3.E-06 2.E-06 4.E-06 1.E-05 4.E-06 4.E-06 7.E-06 2.E-06 2.E-06 4.E-07

 6 3.E-06 2.E-06 4.E-06 1.E-05 4.E-06 4.E-06 7.E-06 2.E-06 2.E-06 4.E-07

 7 3.E-06 2.E-06 4.E-06 1.E-05 4.E-06 4.E-06 7.E-06 2.E-06 2.E-06 4.E-07

 8 3.E-06 2.E-06 4.E-06 1.E-05 4.E-06 4.E-06 7.E-06 2.E-06 2.E-06 4.E-07
--------------------------------------------------------------------------------
PS accuracy on the set ir,l,ie,kappa: 1.E-05
--------------------------------------------------------------------------------

Vxc0Einc written.

#calls,#improvements = 160040 1424
v0max  =   0.5000  -2.0000  20.0000  -8.5588
v0coef =  -0.1993 -67.7297  17.7638 -10.2594
v0min  = -10.5588 -80.0000   2.0000 -10.5588
Vxc0(1)-Vxc0(ne) (eV) = -5.71

Vxc0EincAprx written (Aprx for approximation).

PStab written.

eeasisss end stop.
!------------------------------------------------------------------------------
PS.16.1
10  -.20 -67.73 17.76 -10.26
 13.97784  0.83430  1.10922  0.10457  0.00279  0.00009  0.00000  0.00000  0.00000  0.00000  0.00000
 18.04109  0.66750  1.15978  0.20155  0.00635  0.00025  0.00001  0.00000  0.00000  0.00000  0.00000
 22.15799  0.52529  1.15511  0.34065  0.01214  0.00059  0.00002  0.00000  0.00000  0.00000  0.00000
 26.45439  0.39693  1.12413  0.52371  0.02096  0.00121  0.00006  0.00000  0.00000  0.00000  0.00000
 30.55884  0.28841  1.08308  0.71425  0.03234  0.00214  0.00012  0.00000  0.00000  0.00000  0.00000
 34.36596  0.19757  1.04072  0.88104  0.04563  0.00338  0.00021  0.00001  0.00000  0.00000  0.00000
 38.11864  0.11484  0.99642  1.01810  0.06115  0.00499  0.00034  0.00002  0.00000  0.00000  0.00000
 41.80057  0.03946  0.95255  1.12372  0.07863  0.00701  0.00052  0.00003  0.00000  0.00000  0.00000
 45.48198 -0.02704  0.91473  1.21626  0.09989  0.00967  0.00079  0.00005  0.00000  0.00000  0.00000
 49.16351 -0.08465  0.88369  1.29994  0.12635  0.01321  0.00117  0.00008  0.00000  0.00000  0.00000
 52.86300 -0.13652  0.85586  1.36998  0.15771  0.01772  0.00169  0.00013  0.00001  0.00000  0.00000
 56.57962 -0.18388  0.83025  1.42755  0.19395  0.02329  0.00237  0.00019  0.00001  0.00000  0.00000
 60.32999 -0.23003  0.80304  1.46870  0.23109  0.02957  0.00321  0.00028  0.00002  0.00000  0.00000
 64.09324 -0.27337  0.77674  1.50099  0.26828  0.03650  0.00421  0.00038  0.00003  0.00000  0.00000
 67.87660 -0.31549  0.75009  1.52535  0.30613  0.04430  0.00541  0.00053  0.00004  0.00000  0.00000
 71.68469 -0.35612  0.72373  1.54453  0.34354  0.05291  0.00683  0.00070  0.00006  0.00000  0.00000
 75.50356 -0.39539  0.69775  1.55990  0.37996  0.06232  0.00850  0.00092  0.00008  0.00001  0.00000
 79.34025 -0.43291  0.67291  1.57338  0.41613  0.07270  0.01044  0.00120  0.00011  0.00001  0.00000
 83.18156 -0.46901  0.64893  1.58514  0.45044  0.08378  0.01266  0.00153  0.00015  0.00001  0.00000
 87.03660 -0.50393  0.62564  1.59554  0.48306  0.09563  0.01517  0.00193  0.00019  0.00002  0.00000
 90.90207 -0.53750  0.60338  1.60533  0.51408  0.10825  0.01801  0.00240  0.00025  0.00002  0.00000
 94.77323 -0.56975  0.58212  1.61470  0.54272  0.12137  0.02116  0.00295  0.00033  0.00003  0.00000
 98.65345 -0.60128  0.56123  1.62289  0.56947  0.13516  0.02466  0.00359  0.00041  0.00004  0.00000
102.53756 -0.63179  0.54108  1.63075  0.59381  0.14931  0.02849  0.00433  0.00052  0.00005  0.00000
106.42890 -0.66133  0.52168  1.63825  0.61608  0.16375  0.03265  0.00517  0.00065  0.00007  0.00001
110.32664 -0.68988  0.50302  1.64562  0.63671  0.17851  0.03715  0.00612  0.00080  0.00008  0.00001
114.23040 -0.71761  0.48494  1.65253  0.65567  0.19366  0.04207  0.00721  0.00098  0.00011  0.00001
118.13620 -0.74443  0.46759  1.65947  0.67290  0.20870  0.04727  0.00842  0.00119  0.00013  0.00001
122.04785 -0.77072  0.45054  1.66565  0.68844  0.22370  0.05281  0.00976  0.00143  0.00017  0.00002
125.96225 -0.79620  0.43411  1.67164  0.70282  0.23857  0.05864  0.01124  0.00171  0.00021  0.00002
129.88103 -0.82107  0.41812  1.67734  0.71606  0.25336  0.06482  0.01287  0.00203  0.00025  0.00003
133.80385 -0.84566  0.40220  1.68234  0.72775  0.26746  0.07115  0.01462  0.00238  0.00031  0.00003
137.72942 -0.86972  0.38655  1.68684  0.73870  0.28162  0.07789  0.01657  0.00279  0.00038  0.00004
141.65745 -0.89312  0.37142  1.69093  0.74894  0.29507  0.08473  0.01863  0.00324  0.00045  0.00005
145.58922 -0.91569  0.35699  1.69525  0.75871  0.30838  0.09191  0.02089  0.00375  0.00054  0.00006
149.52294 -0.93807  0.34249  1.69888  0.76792  0.32134  0.09931  0.02331  0.00432  0.00064  0.00008
153.45774 -0.96027  0.32795  1.70158  0.77634  0.33352  0.10676  0.02587  0.00494  0.00075  0.00009
157.39579 -0.98174  0.31402  1.70445  0.78445  0.34519  0.11434  0.02859  0.00562  0.00088  0.00011
161.33691 -1.00315  0.29988  1.70642  0.79197  0.35650  0.12214  0.03150  0.00638  0.00103  0.00013
165.27916 -1.02368  0.28653  1.70869  0.79963  0.36739  0.13003  0.03458  0.00721  0.00120  0.00016
169.22360 -1.04446  0.27272  1.70979  0.80643  0.37725  0.13774  0.03774  0.00809  0.00138  0.00019
173.16947 -1.06470  0.25928  1.71089  0.81331  0.38711  0.14570  0.04112  0.00906  0.00159  0.00023
177.11730 -1.08450  0.24614  1.71188  0.81993  0.39629  0.15358  0.04463  0.01011  0.00182  0.00027
181.06660 -1.10429  0.23280  1.71213  0.82616  0.40509  0.16148  0.04829  0.01123  0.00208  0.00031
185.01726 -1.12320  0.22026  1.71289  0.83276  0.41339  0.16925  0.05206  0.01243  0.00236  0.00036
188.97001 -1.14221  0.20741  1.71283  0.83886  0.42132  0.17702  0.05599  0.01372  0.00268  0.00042
192.92376 -1.16068  0.19506  1.71305  0.84498  0.42872  0.18458  0.06000  0.01509  0.00302  0.00049
196.87851 -1.17915  0.18250  1.71257  0.85067  0.43592  0.19219  0.06418  0.01655  0.00339  0.00056
200.83502 -1.19693  0.17056  1.71266  0.85663  0.44276  0.19961  0.06844  0.01810  0.00380  0.00064
204.79224 -1.21477  0.15841  1.71204  0.86219  0.44925  0.20689  0.07280  0.01973  0.00424  0.00074
208.75081 -1.23207  0.14672  1.71172  0.86792  0.45549  0.21400  0.07723  0.02145  0.00472  0.00084
212.71048 -1.24917  0.13509  1.71125  0.87338  0.46145  0.22096  0.08176  0.02326  0.00524  0.00095
216.67113 -1.26611  0.12350  1.71043  0.87853  0.46711  0.22774  0.08635  0.02516  0.00580  0.00108
220.63274 -1.28259  0.11232  1.70995  0.88383  0.47255  0.23429  0.09097  0.02713  0.00639  0.00121
224.59533 -1.29897  0.10111  1.70919  0.88877  0.47778  0.24067  0.09564  0.02919  0.00703  0.00136
228.55879 -1.31493  0.09026  1.70861  0.89380  0.48287  0.24683  0.10033  0.03133  0.00772  0.00153
232.52319 -1.33079  0.07939  1.70773  0.89855  0.48779  0.25282  0.10505  0.03355  0.00844  0.00171
236.48839 -1.34638  0.06870  1.70689  0.90310  0.49257  0.25862  0.10978  0.03585  0.00922  0.00191
240.45439 -1.36154  0.05845  1.70641  0.90769  0.49726  0.26427  0.11454  0.03824  0.01004  0.00212
244.42116 -1.37657  0.04818  1.70561  0.91197  0.50179  0.26973  0.11930  0.04070  0.01091  0.00235
248.38868 -1.39132  0.03818  1.70503  0.91620  0.50621  0.27494  0.12399  0.04321  0.01182  0.00260
252.35694 -1.40584  0.02829  1.70430  0.92034  0.51066  0.28008  0.12872  0.04581  0.01279  0.00287
256.32586 -1.42027  0.01841  1.70331  0.92409  0.51489  0.28497  0.13338  0.04846  0.01381  0.00316
260.29546 -1.43424  0.00898  1.70288  0.92794  0.51907  0.28969  0.13799  0.05118  0.01487  0.00347
264.26569 -1.44817 -0.00050  1.70211  0.93135  0.52311  0.29424  0.14256  0.05395  0.01599  0.00380
PS.6.2
10  -.20 -67.73 17.76 -10.26
 13.97784  0.83648  1.14156  0.01473  0.00043  0.00001  0.00000  0.00000  0.00000  0.00000  0.00000
 18.04109  0.72812  1.35503  0.02658  0.00099  0.00003  0.00000  0.00000  0.00000  0.00000  0.00000
 22.15799  0.63308  1.45940  0.04231  0.00193  0.00007  0.00000  0.00000  0.00000  0.00000  0.00000
 26.45439  0.54523  1.50821  0.06247  0.00337  0.00015  0.00000  0.00000  0.00000  0.00000  0.00000
 30.55884  0.46949  1.52554  0.08489  0.00525  0.00026  0.00001  0.00000  0.00000  0.00000  0.00000
 34.36596  0.40508  1.52804  0.10804  0.00749  0.00042  0.00002  0.00000  0.00000  0.00000  0.00000
 38.11864  0.34550  1.52215  0.13224  0.01015  0.00064  0.00003  0.00000  0.00000  0.00000  0.00000
 41.80057  0.28966  1.51053  0.15631  0.01316  0.00091  0.00005  0.00000  0.00000  0.00000  0.00000
 45.48198  0.24227  1.50354  0.18420  0.01695  0.00128  0.00007  0.00000  0.00000  0.00000  0.00000
 49.16351  0.20231  1.50078  0.21697  0.02177  0.00179  0.00011  0.00001  0.00000  0.00000  0.00000
 52.86300  0.16725  1.49987  0.25402  0.02771  0.00246  0.00017  0.00001  0.00000  0.00000  0.00000
 56.57962  0.13380  1.49731  0.29189  0.03443  0.00327  0.00024  0.00001  0.00000  0.00000  0.00000
 60.32999  0.10163  1.49395  0.32830  0.04170  0.00422  0.00033  0.00002  0.00000  0.00000  0.00000
 64.09324  0.07043  1.48996  0.36115  0.04920  0.00529  0.00043  0.00003  0.00000  0.00000  0.00000
 67.87660  0.04008  1.48518  0.39228  0.05728  0.00652  0.00057  0.00004  0.00000  0.00000  0.00000
 71.68469  0.01024  1.47984  0.42022  0.06567  0.00791  0.00073  0.00005  0.00000  0.00000  0.00000
 75.50356 -0.01851  1.47468  0.44630  0.07461  0.00948  0.00092  0.00007  0.00000  0.00000  0.00000
 79.34025 -0.04664  1.46930  0.47012  0.08399  0.01125  0.00116  0.00009  0.00001  0.00000  0.00000
 83.18156 -0.07410  1.46372  0.49129  0.09364  0.01321  0.00143  0.00012  0.00001  0.00000  0.00000
 87.03660 -0.10051  1.45847  0.51057  0.10364  0.01536  0.00174  0.00015  0.00001  0.00000  0.00000
 90.90207 -0.12620  1.45317  0.52755  0.11378  0.01770  0.00210  0.00019  0.00001  0.00000  0.00000
 94.77323 -0.15096  1.44794  0.54288  0.12417  0.02025  0.00252  0.00024  0.00002  0.00000  0.00000
 98.65345 -0.17480  1.44297  0.55663  0.13473  0.02301  0.00299  0.00030  0.00002  0.00000  0.00000
102.53756 -0.19762  1.43822  0.56922  0.14545  0.02598  0.00352  0.00037  0.00003  0.00000  0.00000
106.42890 -0.21984  1.43335  0.58002  0.15599  0.02910  0.00411  0.00045  0.00004  0.00000  0.00000
110.32664 -0.24146  1.42849  0.58928  0.16655  0.03245  0.00477  0.00054  0.00005  0.00000  0.00000
114.23040 -0.26195  1.42418  0.59805  0.17712  0.03599  0.00550  0.00064  0.00006  0.00000  0.00000
118.13620 -0.28174  1.41996  0.60550  0.18732  0.03965  0.00629  0.00077  0.00007  0.00001  0.00000
122.04785 -0.30090  1.41584  0.61241  0.19769  0.04357  0.00717  0.00090  0.00009  0.00001  0.00000
125.96225 -0.31948  1.41167  0.61826  0.20753  0.04756  0.00811  0.00106  0.00011  0.00001  0.00000
129.88103 -0.33738  1.40774  0.62358  0.21730  0.05178  0.00915  0.00124  0.00013  0.00001  0.00000
133.80385 -0.35479  1.40372  0.62824  0.22658  0.05604  0.01024  0.00143  0.00016  0.00001  0.00000
137.72942 -0.37154  1.39994  0.63267  0.23597  0.06058  0.01145  0.00165  0.00019  0.00002  0.00000
141.65745 -0.38798  1.39595  0.63636  0.24457  0.06506  0.01270  0.00189  0.00022  0.00002  0.00000
145.58922 -0.40389  1.39207  0.63973  0.25316  0.06978  0.01407  0.00217  0.00026  0.00002  0.00000
149.52294 -0.41938  1.38822  0.64284  0.26128  0.07453  0.01551  0.00246  0.00030  0.00003  0.00000
153.45774 -0.43445  1.38437  0.64574  0.26897  0.07930  0.01702  0.00278  0.00035  0.00004  0.00000
157.39579 -0.44905  1.38070  0.64843  0.27661  0.08429  0.01865  0.00314  0.00041  0.00004  0.00000
161.33691 -0.46351  1.37671  0.65075  0.28363  0.08920  0.02033  0.00352  0.00047  0.00005  0.00000
165.27916 -0.47769  1.37250  0.65279  0.29007  0.09404  0.02206  0.00393  0.00054  0.00006  0.00001
169.22360 -0.49141  1.36855  0.65497  0.29664  0.09911  0.02393  0.00438  0.00062  0.00007  0.00001
173.16947 -0.50482  1.36454  0.65703  0.30283  0.10415  0.02587  0.00486  0.00071  0.00008  0.00001
177.11730 -0.51804  1.36047  0.65886  0.30851  0.10912  0.02787  0.00538  0.00081  0.00010  0.00001
181.06660 -0.53100  1.35629  0.66069  0.31387  0.11403  0.02993  0.00593  0.00091  0.00011  0.00001
185.01726 -0.54363  1.35222  0.66249  0.31912  0.11903  0.03209  0.00652  0.00103  0.00013  0.00001
188.97001 -0.55619  1.34804  0.66405  0.32392  0.12393  0.03431  0.00715  0.00116  0.00015  0.00002
192.92376 -0.56840  1.34388  0.66571  0.32856  0.12882  0.03660  0.00782  0.00129  0.00017  0.00002
196.87851 -0.58042  1.33976  0.66729  0.33289  0.13362  0.03895  0.00852  0.00144  0.00019  0.00002
200.83502 -0.59227  1.33560  0.66884  0.33698  0.13836  0.04136  0.00927  0.00161  0.00022  0.00002
204.79224 -0.60387  1.33158  0.67041  0.34085  0.14300  0.04381  0.01006  0.00179  0.00025  0.00003
208.75081 -0.61535  1.32746  0.67188  0.34456  0.14763  0.04634  0.01089  0.00198  0.00028  0.00003
212.71048 -0.62658  1.32336  0.67337  0.34799  0.15209  0.04889  0.01175  0.00218  0.00032  0.00004
216.67113 -0.63775  1.31931  0.67479  0.35122  0.15644  0.05148  0.01266  0.00240  0.00036  0.00004
220.63274 -0.64877  1.31513  0.67615  0.35437  0.16076  0.05413  0.01361  0.00264  0.00040  0.00005
224.59533 -0.65933  1.31141  0.67773  0.35740  0.16499  0.05682  0.01460  0.00289  0.00045  0.00006
228.55879 -0.67007  1.30736  0.67894  0.36020  0.16909  0.05953  0.01564  0.00316  0.00051  0.00006
232.52319 -0.68036  1.30366  0.68040  0.36292  0.17310  0.06227  0.01671  0.00345  0.00056  0.00007
236.48839 -0.69066  1.29981  0.68167  0.36547  0.17698  0.06503  0.01782  0.00376  0.00062  0.00008
240.45439 -0.70092  1.29593  0.68285  0.36794  0.18077  0.06781  0.01898  0.00408  0.00069  0.00009
244.42116 -0.71078  1.29231  0.68423  0.37033  0.18443  0.07060  0.02017  0.00443  0.00077  0.00011
248.38868 -0.72068  1.28860  0.68535  0.37256  0.18798  0.07340  0.02140  0.00479  0.00084  0.00012
252.35694 -0.73044  1.28489  0.68644  0.37475  0.19144  0.07621  0.02267  0.00518  0.00093  0.00013
256.32586 -0.73992  1.28142  0.68768  0.37689  0.19476  0.07901  0.02397  0.00558  0.00102  0.00015
260.29546 -0.74944  1.27781  0.68863  0.37887  0.19796  0.08180  0.02531  0.00600  0.00112  0.00017
264.26569 -0.75873  1.27440  0.68962  0.38081  0.20105  0.08458  0.02668  0.00645  0.00122  0.00019
PS.1.3
10  -.20 -67.73 17.76 -10.26
 13.97784  0.64063  0.01494  0.00031  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000
 18.04109  0.65337  0.02121  0.00057  0.00001  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000
 22.15799  0.65721  0.02790  0.00092  0.00002  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000
 26.45439  0.65562  0.03508  0.00138  0.00004  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000
 30.55884  0.65077  0.04199  0.00191  0.00006  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000
 34.36596  0.64163  0.04786  0.00244  0.00008  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000
 38.11864  0.62925  0.05336  0.00304  0.00012  0.00000  0.00000  0.00000  0.00000  0.00000  0.00000
 41.80057  0.63656  0.06287  0.00399  0.00017  0.00001  0.00000  0.00000  0.00000  0.00000  0.00000
 45.48198  0.64287  0.07193  0.00497  0.00023  0.00001  0.00000  0.00000  0.00000  0.00000  0.00000
 49.16351  0.64557  0.08007  0.00596  0.00030  0.00001  0.00000  0.00000  0.00000  0.00000  0.00000
 52.86300  0.64548  0.08743  0.00698  0.00038  0.00001  0.00000  0.00000  0.00000  0.00000  0.00000
 56.57962  0.64381  0.09442  0.00806  0.00047  0.00002  0.00000  0.00000  0.00000  0.00000  0.00000
 60.32999  0.63927  0.10088  0.00920  0.00057  0.00002  0.00000  0.00000  0.00000  0.00000  0.00000
 64.09324  0.63206  0.10674  0.01038  0.00068  0.00003  0.00000  0.00000  0.00000  0.00000  0.00000
 67.87660  0.62466  0.11257  0.01166  0.00081  0.00004  0.00000  0.00000  0.00000  0.00000  0.00000
 71.68469  0.61680  0.11807  0.01297  0.00096  0.00005  0.00000  0.00000  0.00000  0.00000  0.00000
 75.50356  0.60865  0.12324  0.01434  0.00112  0.00006  0.00000  0.00000  0.00000  0.00000  0.00000
 79.34025  0.60078  0.12834  0.01577  0.00130  0.00007  0.00000  0.00000  0.00000  0.00000  0.00000
 83.18156  0.59313  0.13320  0.01725  0.00149  0.00009  0.00000  0.00000  0.00000  0.00000  0.00000
 87.03660  0.58528  0.13754  0.01873  0.00170  0.00011  0.00000  0.00000  0.00000  0.00000  0.00000
 90.90207  0.57792  0.14182  0.02028  0.00193  0.00013  0.00001  0.00000  0.00000  0.00000  0.00000
 94.77323  0.57101  0.14605  0.02189  0.00217  0.00015  0.00001  0.00000  0.00000  0.00000  0.00000
 98.65345  0.56420  0.14981  0.02349  0.00243  0.00018  0.00001  0.00000  0.00000  0.00000  0.00000
102.53756  0.55764  0.15344  0.02513  0.00271  0.00020  0.00001  0.00000  0.00000  0.00000  0.00000
106.42890  0.55139  0.15687  0.02679  0.00301  0.00024  0.00001  0.00000  0.00000  0.00000  0.00000
110.32664  0.54543  0.16019  0.02850  0.00333  0.00027  0.00002  0.00000  0.00000  0.00000  0.00000
114.23040  0.53947  0.16310  0.03018  0.00366  0.00031  0.00002  0.00000  0.00000  0.00000  0.00000
118.13620  0.53390  0.16597  0.03191  0.00402  0.00035  0.00002  0.00000  0.00000  0.00000  0.00000
122.04785  0.52850  0.16854  0.03362  0.00438  0.00040  0.00003  0.00000  0.00000  0.00000  0.00000
125.96225  0.52335  0.17107  0.03536  0.00477  0.00045  0.00003  0.00000  0.00000  0.00000  0.00000
129.88103  0.51841  0.17338  0.03708  0.00517  0.00050  0.00003  0.00000  0.00000  0.00000  0.00000
133.80385  0.51360  0.17548  0.03881  0.00560  0.00056  0.00004  0.00000  0.00000  0.00000  0.00000
137.72942  0.50900  0.17748  0.04055  0.00604  0.00062  0.00005  0.00000  0.00000  0.00000  0.00000
141.65745  0.50456  0.17933  0.04228  0.00649  0.00069  0.00005  0.00000  0.00000  0.00000  0.00000
145.58922  0.50030  0.18105  0.04401  0.00697  0.00076  0.00006  0.00000  0.00000  0.00000  0.00000
149.52294  0.49621  0.18265  0.04573  0.00746  0.00084  0.00007  0.00000  0.00000  0.00000  0.00000
153.45774  0.49228  0.18412  0.04744  0.00796  0.00092  0.00008  0.00000  0.00000  0.00000  0.00000
157.39579  0.48845  0.18546  0.04913  0.00848  0.00101  0.00009  0.00001  0.00000  0.00000  0.00000
161.33691  0.48480  0.18669  0.05081  0.00902  0.00110  0.00010  0.00001  0.00000  0.00000  0.00000
165.27916  0.48128  0.18783  0.05247  0.00957  0.00120  0.00011  0.00001  0.00000  0.00000  0.00000
169.22360  0.47787  0.18888  0.05412  0.01014  0.00131  0.00012  0.00001  0.00000  0.00000  0.00000
173.16947  0.47459  0.18983  0.05574  0.01071  0.00142  0.00014  0.00001  0.00000  0.00000  0.00000
177.11730  0.47141  0.19067  0.05734  0.01130  0.00154  0.00015  0.00001  0.00000  0.00000  0.00000
181.06660  0.46836  0.19146  0.05892  0.01191  0.00166  0.00017  0.00001  0.00000  0.00000  0.00000
185.01726  0.46540  0.19216  0.06047  0.01252  0.00179  0.00018  0.00001  0.00000  0.00000  0.00000
188.97001  0.46252  0.19275  0.06198  0.01315  0.00192  0.00020  0.00002  0.00000  0.00000  0.00000
192.92376  0.45977  0.19333  0.06349  0.01379  0.00206  0.00022  0.00002  0.00000  0.00000  0.00000
196.87851  0.45707  0.19379  0.06495  0.01443  0.00221  0.00024  0.00002  0.00000  0.00000  0.00000
200.83502  0.45449  0.19424  0.06639  0.01509  0.00236  0.00026  0.00002  0.00000  0.00000  0.00000
204.79224  0.45198  0.19461  0.06780  0.01575  0.00252  0.00029  0.00002  0.00000  0.00000  0.00000
208.75081  0.44954  0.19494  0.06918  0.01643  0.00268  0.00031  0.00003  0.00000  0.00000  0.00000
212.71048  0.44718  0.19523  0.07053  0.01711  0.00285  0.00034  0.00003  0.00000  0.00000  0.00000
216.67113  0.44485  0.19544  0.07184  0.01779  0.00303  0.00037  0.00003  0.00000  0.00000  0.00000
220.63274  0.44263  0.19564  0.07313  0.01849  0.00321  0.00040  0.00004  0.00000  0.00000  0.00000
224.59533  0.44046  0.19579  0.07439  0.01919  0.00340  0.00043  0.00004  0.00000  0.00000  0.00000
228.55879  0.43834  0.19589  0.07561  0.01989  0.00360  0.00047  0.00005  0.00000  0.00000  0.00000
232.52319  0.43628  0.19599  0.07680  0.02060  0.00380  0.00050  0.00005  0.00000  0.00000  0.00000
236.48839  0.43428  0.19604  0.07796  0.02132  0.00401  0.00054  0.00005  0.00000  0.00000  0.00000
240.45439  0.43233  0.19608  0.07909  0.02203  0.00422  0.00058  0.00006  0.00000  0.00000  0.00000
244.42116  0.43041  0.19607  0.08018  0.02275  0.00444  0.00062  0.00006  0.00001  0.00000  0.00000
248.38868  0.42855  0.19604  0.08125  0.02347  0.00467  0.00067  0.00007  0.00001  0.00000  0.00000
252.35694  0.42672  0.19600  0.08228  0.02420  0.00490  0.00071  0.00008  0.00001  0.00000  0.00000
256.32586  0.42494  0.19594  0.08328  0.02492  0.00514  0.00076  0.00008  0.00001  0.00000  0.00000
260.29546  0.42319  0.19586  0.08425  0.02565  0.00538  0.00081  0.00009  0.00001  0.00000  0.00000
264.26569  0.42149  0.19577  0.08520  0.02637  0.00563  0.00086  0.00010  0.00001  0.00000  0.00000
PS.29.4
10  -.20 -67.73 17.76 -10.26
 13.97784 -0.22718  0.10341 -0.16319  0.00563  0.00023  0.00001  0.00000  0.00000  0.00000  0.00000
 18.04109 -0.34688  0.09801 -0.16883  0.01243  0.00065  0.00003  0.00000  0.00000  0.00000  0.00000
 22.15799 -0.46128  0.07659 -0.17280  0.02300  0.00146  0.00008  0.00000  0.00000  0.00000  0.00000
 26.45439 -0.57562  0.03921 -0.17340  0.03789  0.00283  0.00018  0.00001  0.00000  0.00000  0.00000
 30.55884 -0.67099  0.00391 -0.16763  0.05716  0.00490  0.00036  0.00002  0.00000  0.00000  0.00000
 34.36596 -0.73968 -0.01552 -0.14906  0.08294  0.00799  0.00066  0.00004  0.00000  0.00000  0.00000
 38.11864 -0.80024 -0.03326 -0.12389  0.11580  0.01236  0.00114  0.00008  0.00000  0.00000  0.00000
 41.80057 -0.85777 -0.05550 -0.09859  0.15290  0.01776  0.00180  0.00014  0.00001  0.00000  0.00000
 45.48198 -0.91493 -0.08315 -0.07559  0.19298  0.02420  0.00266  0.00023  0.00002  0.00000  0.00000
 49.16351 -0.97010 -0.11273 -0.05420  0.23645  0.03184  0.00378  0.00036  0.00003  0.00000  0.00000
 52.86300 -1.02431 -0.14477 -0.03610  0.28173  0.04064  0.00517  0.00053  0.00004  0.00000  0.00000
 56.57962 -1.07641 -0.17714 -0.02011  0.32920  0.05081  0.00692  0.00076  0.00007  0.00000  0.00000
 60.32999 -1.12792 -0.21132 -0.00810  0.37626  0.06211  0.00902  0.00105  0.00010  0.00001  0.00000
 64.09324 -1.17800 -0.24611  0.00048  0.42173  0.07437  0.01148  0.00143  0.00014  0.00001  0.00000
 67.87660 -1.22628 -0.28047  0.00689  0.46611  0.08777  0.01438  0.00191  0.00020  0.00002  0.00000
 71.68469 -1.27277 -0.31420  0.01113  0.50885  0.10214  0.01773  0.00249  0.00028  0.00003  0.00000
 75.50356 -1.31776 -0.34745  0.01319  0.54906  0.11726  0.02151  0.00320  0.00038  0.00004  0.00000
 79.34025 -1.36104 -0.37982  0.01369  0.58716  0.13318  0.02578  0.00405  0.00051  0.00005  0.00000
 83.18156 -1.40245 -0.41098  0.01323  0.62306  0.14964  0.03051  0.00504  0.00067  0.00007  0.00001
 87.03660 -1.44237 -0.44128  0.01153  0.65648  0.16638  0.03567  0.00620  0.00086  0.00010  0.00001
 90.90207 -1.48073 -0.47045  0.00932  0.68823  0.18359  0.04135  0.00754  0.00110  0.00013  0.00001
 94.77323 -1.51801 -0.49907  0.00591  0.71723  0.20056  0.04738  0.00905  0.00139  0.00017  0.00002
 98.65345 -1.55405 -0.52675  0.00223  0.74471  0.21770  0.05390  0.01077  0.00173  0.00022  0.00002
102.53756 -1.58908 -0.55369 -0.00191  0.77049  0.23468  0.06079  0.01269  0.00213  0.00029  0.00003
106.42890 -1.62325 -0.58010 -0.00666  0.79425  0.25105  0.06797  0.01482  0.00259  0.00036  0.00004
110.32664 -1.65639 -0.60567 -0.01142  0.81698  0.26717  0.07550  0.01715  0.00312  0.00046  0.00005
114.23040 -1.68846 -0.63037 -0.01614  0.83897  0.28305  0.08337  0.01973  0.00374  0.00057  0.00007
118.13620 -1.71960 -0.65433 -0.02092  0.85995  0.29823  0.09142  0.02251  0.00444  0.00070  0.00009
122.04785 -1.74996 -0.67766 -0.02574  0.88029  0.31291  0.09964  0.02549  0.00522  0.00086  0.00012
125.96225 -1.77959 -0.70042 -0.03061  0.89980  0.32691  0.10798  0.02869  0.00610  0.00104  0.00014
129.88103 -1.80884 -0.72296 -0.03570  0.91824  0.34029  0.11642  0.03209  0.00707  0.00125  0.00018
133.80385 -1.83672 -0.74422 -0.03997  0.93731  0.35344  0.12498  0.03570  0.00816  0.00150  0.00022
137.72942 -1.86419 -0.76523 -0.04443  0.95556  0.36591  0.13352  0.03950  0.00934  0.00178  0.00027
141.65745 -1.89121 -0.78592 -0.04895  0.97320  0.37787  0.14204  0.04346  0.01063  0.00209  0.00033
145.58922 -1.91769 -0.80621 -0.05351  0.99027  0.38913  0.15043  0.04758  0.01203  0.00244  0.00040
149.52294 -1.94341 -0.82586 -0.05777  1.00736  0.40028  0.15887  0.05190  0.01355  0.00284  0.00048
153.45774 -1.96877 -0.84527 -0.06208  1.02374  0.41075  0.16704  0.05630  0.01517  0.00328  0.00058
157.39579 -1.99343 -0.86410 -0.06621  1.04018  0.42105  0.17515  0.06084  0.01691  0.00378  0.00068
161.33691 -2.01779 -0.88274 -0.07037  1.05579  0.43106  0.18316  0.06552  0.01877  0.00432  0.00081
165.27916 -2.04207 -0.90147 -0.07506  1.07040  0.44023  0.19078  0.07021  0.02072  0.00491  0.00094
169.22360 -2.06541 -0.91934 -0.07908  1.08536  0.44954  0.19833  0.07502  0.02280  0.00556  0.00110
173.16947 -2.08863 -0.93720 -0.08339  1.09931  0.45839  0.20564  0.07987  0.02497  0.00627  0.00127
177.11730 -2.11140 -0.95478 -0.08780  1.11297  0.46707  0.21278  0.08477  0.02726  0.00703  0.00147
181.06660 -2.13371 -0.97200 -0.09211  1.12626  0.47560  0.21972  0.08970  0.02964  0.00786  0.00169
185.01726 -2.15575 -0.98906 -0.09644  1.13900  0.48386  0.22640  0.09461  0.03211  0.00875  0.00193
188.97001 -2.17733 -1.00574 -0.10076  1.15142  0.49212  0.23296  0.09954  0.03468  0.00970  0.00220
192.92376 -2.19878 -1.02246 -0.10544  1.16308  0.49987  0.23918  0.10441  0.03732  0.01072  0.00249
196.87851 -2.21940 -1.03840 -0.10946  1.17502  0.50813  0.24543  0.10930  0.04005  0.01179  0.00281
200.83502 -2.24020 -1.05468 -0.11420  1.18577  0.51561  0.25132  0.11411  0.04284  0.01294  0.00316
204.79224 -2.26016 -1.07016 -0.11832  1.19686  0.52362  0.25720  0.11890  0.04570  0.01415  0.00354
208.75081 -2.28026 -1.08592 -0.12303  1.20695  0.53096  0.26275  0.12358  0.04861  0.01542  0.00396
212.71048 -2.29954 -1.10093 -0.12718  1.21740  0.53862  0.26827  0.12822  0.05158  0.01675  0.00440
216.67113 -2.31908 -1.11630 -0.13192  1.22675  0.54570  0.27350  0.13274  0.05458  0.01815  0.00488
220.63274 -2.33760 -1.13072 -0.13593  1.23679  0.55334  0.27879  0.13723  0.05763  0.01961  0.00540
224.59533 -2.35648 -1.14559 -0.14070  1.24557  0.56010  0.28372  0.14158  0.06069  0.02112  0.00595
228.55879 -2.37445 -1.15961 -0.14467  1.25499  0.56756  0.28879  0.14589  0.06378  0.02270  0.00654
232.52319 -2.39266 -1.17395 -0.14921  1.26330  0.57442  0.29367  0.15010  0.06689  0.02433  0.00716
236.48839 -2.41031 -1.18781 -0.15352  1.27195  0.58147  0.29849  0.15421  0.07000  0.02601  0.00783
240.45439 -2.42771 -1.20149 -0.15778  1.28022  0.58823  0.30316  0.15821  0.07310  0.02774  0.00853
244.42116 -2.44507 -1.21518 -0.16229  1.28799  0.59464  0.30767  0.16210  0.07620  0.02952  0.00927
248.38868 -2.46183 -1.22834 -0.16637  1.29607  0.60148  0.31228  0.16594  0.07929  0.03134  0.01005
252.35694 -2.47875 -1.24170 -0.17085  1.30317  0.60771  0.31674  0.16968  0.08237  0.03321  0.01087
256.32586 -2.49503 -1.25448 -0.17487  1.31072  0.61425  0.32119  0.17332  0.08541  0.03511  0.01173
260.29546 -2.51137 -1.26736 -0.17915  1.31765  0.62021  0.32542  0.17684  0.08842  0.03704  0.01263
264.26569 -2.52728 -1.27989 -0.18322  1.32470  0.62645  0.32985  0.18038  0.09143  0.03901  0.01356
Vxc0Einc
  4.000000E+00 -9.977840E+00
  8.000000E+00 -1.004109E+01
  1.200000E+01 -1.015799E+01
  1.600000E+01 -1.045439E+01
  2.000000E+01 -1.055884E+01
  2.400000E+01 -1.036596E+01
  2.800000E+01 -1.011864E+01
  3.200000E+01 -9.800566E+00
  3.600000E+01 -9.481984E+00
  4.000000E+01 -9.163507E+00
  4.400000E+01 -8.862999E+00
  4.800000E+01 -8.579615E+00
  5.200000E+01 -8.329986E+00
  5.600000E+01 -8.093238E+00
  6.000000E+01 -7.876601E+00
  6.400000E+01 -7.684689E+00
  6.800000E+01 -7.503563E+00
  7.200000E+01 -7.340250E+00
  7.600000E+01 -7.181565E+00
  8.000000E+01 -7.036595E+00
  8.400000E+01 -6.902065E+00
  8.800000E+01 -6.773233E+00
  9.200000E+01 -6.653447E+00
  9.600000E+01 -6.537556E+00
  1.000000E+02 -6.428904E+00
  1.040000E+02 -6.326637E+00
  1.080000E+02 -6.230395E+00
  1.120000E+02 -6.136204E+00
  1.160000E+02 -6.047851E+00
  1.200000E+02 -5.962250E+00
  1.240000E+02 -5.881029E+00
  1.280000E+02 -5.803854E+00
  1.320000E+02 -5.729420E+00
  1.360000E+02 -5.657450E+00
  1.400000E+02 -5.589219E+00
  1.440000E+02 -5.522937E+00
  1.480000E+02 -5.457739E+00
  1.520000E+02 -5.395795E+00
  1.560000E+02 -5.336914E+00
  1.600000E+02 -5.279163E+00
  1.640000E+02 -5.223604E+00
  1.680000E+02 -5.169471E+00
  1.720000E+02 -5.117299E+00
  1.760000E+02 -5.066596E+00
  1.800000E+02 -5.017264E+00
  1.840000E+02 -4.970014E+00
  1.880000E+02 -4.923756E+00
  1.920000E+02 -4.878506E+00
  1.960000E+02 -4.835016E+00
  2.000000E+02 -4.792236E+00
  2.040000E+02 -4.750814E+00
  2.080000E+02 -4.710483E+00
  2.120000E+02 -4.671134E+00
  2.160000E+02 -4.632737E+00
  2.200000E+02 -4.595329E+00
  2.240000E+02 -4.558788E+00
  2.280000E+02 -4.523189E+00
  2.320000E+02 -4.488386E+00
  2.360000E+02 -4.454394E+00
  2.400000E+02 -4.421156E+00
  2.440000E+02 -4.388679E+00
  2.480000E+02 -4.356935E+00
  2.520000E+02 -4.325862E+00
  2.560000E+02 -4.295456E+00
  2.600000E+02 -4.265690E+00
Vxc0EincAprx
  4.000000E+00 -1.025935E+01
  8.000000E+00 -1.025935E+01
  1.200000E+01 -1.025935E+01
  1.600000E+01 -1.025935E+01
  2.000000E+01 -1.025935E+01
  2.400000E+01 -1.025935E+01
  2.800000E+01 -1.021125E+01
  3.200000E+01 -9.800438E+00
  3.600000E+01 -9.436376E+00
  4.000000E+01 -9.110816E+00
  4.400000E+01 -8.817419E+00
  4.800000E+01 -8.551214E+00
  5.200000E+01 -8.308246E+00
  5.600000E+01 -8.085319E+00
  6.000000E+01 -7.879821E+00
  6.400000E+01 -7.689595E+00
  6.800000E+01 -7.512836E+00
  7.200000E+01 -7.348029E+00
  7.600000E+01 -7.193883E+00
  8.000000E+01 -7.049297E+00
  8.400000E+01 -6.913322E+00
  8.800000E+01 -6.785136E+00
  9.200000E+01 -6.664022E+00
  9.600000E+01 -6.549353E+00
  1.000000E+02 -6.440578E+00
  1.040000E+02 -6.337207E+00
  1.080000E+02 -6.238808E+00
  1.120000E+02 -6.144995E+00
  1.160000E+02 -6.055422E+00
  1.200000E+02 -5.969779E+00
  1.240000E+02 -5.887787E+00
  1.280000E+02 -5.809193E+00
  1.320000E+02 -5.733769E+00
  1.360000E+02 -5.661308E+00
  1.400000E+02 -5.591621E+00
  1.440000E+02 -5.524534E+00
  1.480000E+02 -5.459891E+00
  1.520000E+02 -5.397546E+00
  1.560000E+02 -5.337367E+00
  1.600000E+02 -5.279230E+00
  1.640000E+02 -5.223023E+00
  1.680000E+02 -5.168642E+00
  1.720000E+02 -5.115989E+00
  1.760000E+02 -5.064975E+00
  1.800000E+02 -5.015517E+00
  1.840000E+02 -4.967536E+00
  1.880000E+02 -4.920962E+00
  1.920000E+02 -4.875727E+00
  1.960000E+02 -4.831767E+00
  2.000000E+02 -4.789024E+00
  2.040000E+02 -4.747443E+00
  2.080000E+02 -4.706971E+00
  2.120000E+02 -4.667562E+00
  2.160000E+02 -4.629168E+00
  2.200000E+02 -4.591747E+00
  2.240000E+02 -4.555259E+00
  2.280000E+02 -4.519665E+00
  2.320000E+02 -4.484930E+00
  2.360000E+02 -4.451019E+00
  2.400000E+02 -4.417901E+00
  2.440000E+02 -4.385545E+00
  2.480000E+02 -4.353922E+00
  2.520000E+02 -4.323005E+00
  2.560000E+02 -4.292768E+00
  2.600000E+02 -4.263187E+00
Vxc0EincAprx_v0coef
v0coef =  -0.1993 -67.7297  17.7638 -10.2594
!------------------------------------------------------------------------------

