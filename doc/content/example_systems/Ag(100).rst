.. _example_ag_100:

=============================
Example System: Ag(100)-(1x1)
=============================

In this section, we go through setting up and executing a simple ViPErLEED calculation for the Ag(100)-(1x1) surface.\ [#]_

This tutorial is designed such that you can follow along on your own system.

.. only:: html

   You can download the input files to follow along :download:`here</_static/example_systems/Ag(100)/input_files.zip>`

.. only:: not html

   You can download the input files to follow along in the online version of the documentation at `viperleed.org <viperleed.org>`__.


.. tip:: 
   If this is your first time running ViPErLEED, first make sure to follow the :ref:`installation instructions<installation>`.
   For details on how to execute ViPErLEED on your system, see the :ref:`How To Run section<how_to_run>`.


Introduction
============

Our starting point for this example is:

-  We have experimental LEED-:math:`I(V)` curves for our surface taken at normal incidence, saved in the file :ref:`EXPBEAMS.csv<expbeams>`.
-  We would like to compare these intensities with a Ag(100)-(1x1) surface that was hand-made from the bulk crystal structure. It is stored as a :ref:`POSCAR file<poscar>` (see below).

In this example, we want to set up a ViPErLEED calculation and structure optimization based on just these inputs.
Our goal is to get the lowest possible R-factor starting from this reference structure.
If we manage to get a good agreement between the experimental and theoretical curves, we can be confident that our structure model is correct.

We will start off by setting up our input files and running an :ref:`initialization<initialization>` to check for any errors in them.
Then, we run a :ref:`reference calculation<ref-calc>` to get some initial theoretical results.
Afterwards, we perform a :ref:`delta-amplitudes<sec_deltas>` calculation and :ref:`structure search<sec_search>` to refine the results.

Initialization Run and Phaseshift generation
============================================

To start off, we place the files :ref:`EXPBEAMS.csv<expbeams>` and :ref:`POSCAR<poscar>` in our source directory.
Both files have defined formats.

.. literalinclude :: /_static/example_systems/Ag(100)/POSCAR
   :language: console
   :caption: POSCAR file containing the initial structure.

We then create a :ref:`PARAMETERS file<parameters>` which tells ViPErLEED what to do:

.. literalinclude :: /_static/example_systems/Ag(100)/PARAMETERS
   :language: console
   :caption: PARAMETERS file for the initial reference calculation

GLOBAL PARAMETERS
   Since we only want to run the :ref:`initialization` for now, we set :ref:`RUN = 0<run>`.
   For this example, we also limit our energy range to 45-700 eV, with an energy step of 3 eV (:ref:`THEO_ENERGIES<theo_energies>`).

PARAMETERS FOR INTERPRETING POSCAR
   We then tell ViPErLEED how to interpret the structure given in the :ref:`POSCAR file<poscar>`.
   Using :ref:`BULK_LIKE_BELOW` parameter, we specify that below 0.45 (unit cell fraction along :math:`\vec{c}`) the given structure is bulk-like.

   With the :ref:`SITE_DEF<sitedef>` command, we further define that the first atom in the POSCAR file (here the topmost atom) should be treated as a distinct species.
   See the page on the :ref:`SITE_DEF<sitedef>` parameter for details on how this works, and see also the notes on :ref:`element names<elementnamecollision>`.

   .. hint:: Instead of ``SITE_DEF Ag = surf 1``, we could also set ``SITE_DEF Ag = surf top(1)`` to select the topmost silver atom, irrespective of the order in the POSCAR.

PARAMETERS FOR VIBROCC
   In addition to the atomic positions, the calculation of scattering-intensities also requires vibrational amplitudes for every atom in the unit cell.
   While the atomic positions are contained in the :ref:`POSCAR file<poscar>`, the vibrational amplitudes are given in the :ref:`VIBROCC file<viboccin>`.
   However, rather than writing the :ref:`VIBROCC file<viboccin>` ourselves, we can also let ViPErLEED calculate bulk vibrational amplitudes by providing the parameters :ref:`T_DEBYE<t_debye>`, :ref:`T_EXPERIMENT<t_experiment>`. By further providing :ref:`VIBR_AMP_SCALE<VIBR_AMP_SCALE>`, we can make an educated guess at the vibrational amplitudes for the surface atoms.
   The latter parameter means that all atoms defined as "surf" (with SITE_DEF) have vibration amplitudes 1.3 times higher than calculated from the Debye temperature.


That's all the input we need to start the initialization run.

..todo::
   Insert an example command for how to start the calculation here.

Once the run finishes, we can have a look at the :ref:`log file<log_files_tleedm>` to see if everything went as expected.
Unless there was some configuration error, the log should now contain lines like this:

.. code-block:: console

   ...
   Found unit cell type: square
   Starting symmetry search...
   Found plane group: p4m
   Checking bulk unit cell...
   Found SUPERLATTICE = (1x1)
   ...

As expected, ViPErLEED recognized our surface be of p4m symmetry with a simple :math:`(1 \times 1)` termination.

During the initialization, ViPErLEED also automatically calculated electron scattering phaseshifts (based on atomic species and positions) to be used as input for the following calculations.
They are stored in the :ref:`PHASESHIFTS file<phaseshifts>` that was copied into the source directory.
This format, however, is hard to interpret for a human reader.
Instead we can look at a plotted version of the same data in the file :ref:`Phaseshifts_plots.pdf<phaseshiftplots>` in the ``SUPP`` subdirectory.
The first page shows the energy-dependent phaseshifts for the surface atom and looks like this:

.. figure:: /_static/example_systems/Ag(100)/phaseshifts_plots.png
   :width: 450px
   :align: center

   Phaseshifts_plots.pdf

The second page shows the (rather similar) phaseshifts for lower lying bulk atoms.


Reference Calculation and R-factor
==================================

In this simple case, we don't actually need any further settings to run the :ref:`reference calculation<ref-calc>`. We can just start the calculation again, after setting :ref:`RUN = 1<run>` to select the :ref:`reference calculation<ref-calc>` section.

Note that the initialization will still be automatically executed at the start of every ViPErLEED run.
Similarly, if an :ref:`EXPBEAMS.csv files<expbeams>` is provided as is the case here, the :ref:`R-factor calculation<r-factor_calculation>` will be automatically calculated and reported after each reference calculation.
By default, ViPErLEED will use the :ref:`Pendry R-factor<r-factor_calculation>`.

Once the reference calculation finishes (only takes about 1 minute with the chosen settings) we find a result for the R-factor at the very end of the :ref:`log file<log_files_tleedm>`:

.. code-block:: console

   ...
   Total elapsed time: 50.78 seconds

   Executed segments: 0 1 11
   Final R (refcalc): 0.1732

Additionally, in the :ref:`OUT directory<dir_organization_output>`, we find a file :ref:`THEOBEAMS.csv<theobeams>`, which contains the calculated theoretical :math:`I(V)` curves and a file :ref:`Rfactor_plots_refcalc.pdf<rfactorplots>`, in which the experimental and theoretical beams are plotted.
The latter should look something like this:

.. figure:: /_static/example_systems/Ag(100)/refalc_result_plot.png
   :width: 450px
   :align: center

   First page of the file Rfactor_plots_refcalc.pdf showing experimental and theoretical :math:`I(V)` curves.


The :math:`I(V)` curves clearly show a good qualitative agreement, but the R-factor of :math:`R \approx 0.17` is not great for such a simple system!
We therefore proceed to the :ref:`delta-amplitudes<sec_deltas>` calculation and the :ref:`structure search<sec_search>`.

.. note:: 
   The :ref:`reference calculation<ref-calc>` also produces the :ref:`tensor files<tensorszip>` which are saved in the ``Tensors`` directory.
   They are required as starting point for the delta-amplitude calculation and will be recognized automatically by ViPErLEED.

Delta-Amplitudes and Structure Search
=====================================

To improve our R-factor, we can run a local structure-optimization using the :ref:`tensor LEED approach<tensor_leed>`.
To do this in ViPErLEED, we run a :ref:`delta-amplitude<sec_deltas>` calculation followed by a :ref:`structure search<sec_search>`.

First, however, we need to provide instructions about which parameters to vary in the optimization.
In ViPErLEED, we give this information in the :ref:`DISPLACEMENTS file<displacements>`:

.. literalinclude :: /_static/example_systems/Ag(100)/DISPLACEMENTS
   :language: console
   :caption: DISPLACEMENTS

See the page on the :ref:`DISPLACEMENTS file<displacements>` for details on the syntax.
Here, we allow the :math:`z` positions of all silver atoms in the first 4 layers to vary by up to :math:`\pm 0.20` Å with a step-width of :math:`0.01` Å.


After setting up the :ref:`DISPLACEMENTS file<displacements>`, we can now run the delta-amplitudes calculation and structure-optimization back-to-back by setting :ref:`RUN = 2-3<run>` in :ref:`PARAMETERS<parameters>`.
For a large system, this step can take many hours to finish, but for our simple system it only takes about 4 minutes to converge (using 10 CPU cores).
At the end, when we take another look at our :ref:`log file<log_files_tleedm>`, we already see that the R-factor dropped significantly from :math:`R \approx 0.17` to :math:`R \approx 0.095`.
That's not bad, but we can do a bit better yet.

Now that we found a better configuration, we can use the :ref:`bookkeeper utility<bookkeeper>` with the ``--cont`` flag to keep the new configuration and use it as our new starting point, overwriting the old POSCAR and VIBROCC files:

.. code-block:: console

   $ python3 bookkeeper.py --cont #[or ./bookkeeper --cont]

Starting from this configuration, let's optimize with a finer grid.
We change the DISPLACEMENTS accordingly:

.. literalinclude :: /_static/example_systems/Ag(100)/DISPLACEMENTS_fine
   :language: console
   :caption: DISPLACEMENTS with a finer grid

Here we allow :math:`\pm 0.020` Å variation on a :math:`0.004` Å grid.
Additionally, we also allow the topmost atom to change its vibrational amplitude.
This may not seem like much, but this already gives :math:`11^5` grid points (11 per varied parameter) and will take about 3 times as long as the the last run!

.. important::
   Because we changed our reference structure, it is advisable to re-run starting with the reference calculation by setting :ref:`RUN = 1-3 1<run>`.
   Note, we also add a second reference calculation at the end.
   This will remove errors due to the :ref:`tensor LEED approximation<tensor_leed>` from the final result.

Once finished, we get a R-factor of :math:`R = 0.0836`!
To visualize how our optimization went, we can also take a look at the  :ref:`Search-progress.pdf file<searchprogresspdf>` in the ``OUT`` directory:

.. figure:: /_static/example_systems/Ag(100)/search_convergence_plot.png
   :width: 450px
   :align: center

   First page of the file Search-progress.pdf showing convergence of the structure search (top) and development of atomistic parameters (bottom).

The final result of the optimization (POSCAR with coordinates and VIBROCC with vibrational amplitudes) are saved in the ``OUT`` directory.
Interatomic distances and angles can easily be measured in a visualization software such as :term:`VESTA` :cite:p:`mommaVESTAThreedimensionalVisualization2011`.

Next steps
==========

Further optimizing the structure is possible, but not very instructive.
Instead we conclude this example by mentioning two other options on how to proceed with the analysis.

For a more complicated system it may not be clear, which structure parameters are most important.
In this case we could run an :ref:`error calculation<error_calculation>` which can show how much the displacement of any individual atom impacts the R-factor.
The error calculation also provides us with an estimate for the statistical accuracy of the determined parameter values, for details see :ref:`errorspdf`.

Alternatively, we could turn to a :ref:`full-dynamic optimization<fdoptimization>` to also tackle parameters that are not accessible under the tensor LEED approximation such as :math:`V_{0i}`, the unit cell dimensions (not relevant here, since well-known for Ag), or the electron beam incidence angle.

.. [#] The unpublished data was provided courtesy of Lutz Hammer.
