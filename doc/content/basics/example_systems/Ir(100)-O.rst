.. _example_Ir(100)-O:

===============================
Example System: Ir(100)-(2Ã—1)-O
===============================

In this tutorial we go through a ViPErLEED structure analysis for an Ir(100) surface with adsorbed oxygen, creating a (:math:`2\times1`) superstructure.
The structure and analysis is based on Ref. :cite:p:`ferstlStructureOrderingOxygen2016` and the experimental data and input model was provided courtesy of Lutz Hammer .

We will begin by running a reference calculation and a rough structure-optimization.
Following this, we move to a finer search grid and run a :ref:`full-dynamic optimization <fdoptimization>` of the inner potential :math:`V_{0\text{i}}`.
Finally, once we achieve a satisfactory R-factor, we will use the ViPErLEED :ref:`error calculation<error_calculation>` to estimate how much small changes of atomic positions affect the R-factor.
This will give rough margins for the statistical uncertainties of the determined parameters.

.. only:: html

   You can download the input files to follow along :download:`here</_static/example_systems/Ir(100)-O/input_files.zip>`.

.. only:: not html

   You can download the input files to follow along in the online version of the documentation at `viperleed.org <viperleed.org>`__.

.. tip:: 
   If you are new to ViPErLEED, check out :ref:`the more basic tutorial<example_ag_100>` first, which explains the setup in more detail.

Introduction
============

We start from experimental LEED-:math:`I(V)` curves which are saved in the file :ref:`EXPBEAMS.csv<expbeams>`.
As reference structure, we use a :ref:`POSCAR file<poscar>`, containing a hand-made Ir(100) surface, which we hand made from a bulk structure with an additional adsorbed oxygen atom placed at a bridge site, such that each surface iridium atom binds to one oxygen atom.
The height above the surface was chosen to achieve a reasonable Ir-O bond length.
See below for a visualization (using :term:`VESTA` :cite:`mommaVESTAThreedimensionalVisualization2011`) of the structure.
In this visualization, we also drew a plane through the unit cell orthogonal to :math:`c` (at unit cell fraction 0.35).
We will use the :ref:`BULK_LIKE_BELOW` parameter to declare everything below this cut-off "bulk-like."

.. list-table::
    :align: center
    :width: 100%

    * - .. figure:: /_static/example_systems/Ir(100)-O/figures/view_a.png

            POSCAR rendered in :term:`VESTA`, view along :math:`a`.

      - .. figure:: /_static/example_systems/Ir(100)-O/figures/view_b.png

            POSCAR rendered in :term:`VESTA`, view along :math:`b` (slightly off-axis).

      - .. figure:: /_static/example_systems/Ir(100)-O/figures/view_c.png

            POSCAR rendered in :term:`VESTA`, view along :math:`c`.

.. hint::
   Of course there are other possible structural models like adsorption at hollow, top or Ir-sharing bridge sites.
   Even surface reconstructions as e.g. a missing-row reconstruction are conceivable.
   Here, we concentrate exclusively on the correct structural model, which is known from the literature :cite:p:`johnsonUnusualBridgedSite2000,ferstlStructureOrderingOxygen2016`.

   Often the adsorption site (or generally, the structural model) may not be known a priori.
   In that case, at least a rough analysis has to be performed for each reasonable model in order to find the most promising one(s), before further optimization is performed.


PARAMETERS and rough DISPLACEMENTS
==================================

We start by setting up a rudimentary :ref:`PARAMETERS file<parameters>`, very similar to the one described in the tutorial for the :ref:`Ag(100)-(1x1) surface<example_ag_100>`:

.. literalinclude :: /_static/example_systems/Ir(100)-O/PARAMETERS
   :language: console
   :caption: PARAMETERS

GLOBAL PARAMETERS
    At the top of the file, we specify some general settings, such as the energy range to be used and our initial guess for the imaginary part of the inner potential :math:`V_{0\text{i}}`.
    We will run a :ref:`reference calculation<ref-calc>`, :ref:`delta-amplitude<sec_deltas>`, and a :ref:`structure search<sec_search>` back-to-back, so we specify :ref:`RUN = 1-3<run>`.

    To reduce computation time for this example, we also limit the maximum angular momentum quantum number to be used in the calculations by TensErLEED with the :ref:`LMAX<lmax>` parameter.

PARAMETERS FOR INTERPRETING THE POSCAR
    As mentioned above, we let ViPErLEED find the bulk-repeat unit by itself. 
    For this, we set the :ref:`BULK_LIKE_BELOW` parameter at the height where we drew the plane previously.

    Using the :ref:`SITE_DEF<sitedef>` parameter, we specify that the topmost Iridium atoms should be treated separately.
    These Ir atoms are differently coordinated than bulk Ir atoms and thus will presumably have a different vibrational amplitude.
    For completeness, we also specify the site type ``O_ads`` for the adsorbed oxygen atom.
    However, since there is only one oxygen atom in the structure, this will not change the behaviour and we could also skip that line.

PARAMETERS FOR VIBROCC
    Since we don't have a :ref:`VIBROCC file<viboccin>` yet, we need to specify the parameters :ref:`T_DEBYE<t_debye>`, :ref:`T_EXPERIMENT<t_experiment>`, and :ref:`VIBR_AMP_SCALE<VIBR_AMP_SCALE>`.
    Note that we can only give one value for the Debye temperature for both oxygen and iridium.
    The initial vibrational amplitudes will be calculated as explained in the section on :ref:`T_DEBYE<t_debye>`.

.. tip::
    Grouping the settings in the PARAMETERS file as described above is not required, but it helps with readability.


For the delta-amplitudes and structure-optimization, we also need to set up a :ref:`DISPLACEMENTS file<displacements>`.
Since this is the first run starting from a totally un-relaxed model, we begin with a rather large range and a rather rough grid.

.. literalinclude :: /_static/example_systems/Ir(100)-O/DISPLACEMENTS_rough
   :language: console
   :caption: DISPLACEMENTS

By setting multiple search blocks in DISPLACEMENTS, we can tell ViPErLEED to execute them one after the other.
When starting to optimize a new system such as here, it is generally a good idea to start with a geometric optimization perpendicular to the surface (:math:`z`). This is because the LEED :math:`I(V)` curves are most sensitive to out-of-plane displacements.
Here, we then follow up with rough optimizations of in-plane positions and vibrational amplitudes of surface atoms [1]_.
For the in-plane optimization, we use a simplified assignment for all four layers although for 2nd and 4th layer Ir atoms any movement in x-direction is forbidden by symmetry.
ViPErLEED will automatically sort out any symmetry-forbidden displacements, cf. numref:`fig_Ir_O_search_progress_2`.

.. note::
   TensErLEED cannot simultaneously optimize displacements in different directions for a given atom.
   Vibrational amplitudes can be optimized together with one geometric displacement; here we do it separately to speed up the calculation.

With the files set up, we can start the ViPErLEED calculation.
During the first initialization ViPErLEED will generate :ref:`IVBEAMS<ivbeams>` and :ref:`PHASESHIFTS<phaseshifts>`.


.. note:: 
    You will notice that the first time we run a new system, ViPErLEED stops execution after the initialization.
    This is on purpose, and is supposed to give the user a chance to double-check the recognized symmetry and annotated POSCAR.

    You will need to **restart the run manually** after making these checks.

When the run is finished, we will see in the log file that the R-factor has decreased quite a bit.
The first reference calculation gave a values of :math:`R_P \approx 0.55`, but :math:`R_P` has dropped to around :math:`\approx 0.21` over the search - very promising!
We can get a better idea of how the search has converged by taking a look at the file :ref:`Search-progress.pdf<searchprogresspdf>` in the ``SUPP`` directory.

.. _fig_Ir_O_search_progress_1:
.. figure:: /_static/example_systems/Ir(100)-O/figures/progress_1_page_1.pdf
   :width: 70%
   :align: center

   Upper half of page 1 for ``Search-progress.pdf``.

:numref:`fig_Ir_O_search_progress_1` shows a plot of the decreasing R-factor during the various stages of the search.
We clearly see that both geometric optimizations made quick progress in terms of convergence - as should be expected when starting from an unrelaxed surface slab such as here.
The other pages of the file give us some insight into how each atomic parameter developed during the structure optimization.

.. _fig_Ir_O_search_progress_2:
.. figure:: /_static/example_systems/Ir(100)-O/figures/progress_1_page_2.pdf
   :width: 70%
   :align: center

   Page 2-4 of ``Search-progress.pdf`` (white space cropped).

:numref:`fig_Ir_O_search_progress_2` shows that the (:math:`z`) position of the oxygen adsorbate has changed a good amount.
Further, we see that the vibrational amplitude of the oxygen atom has gone down, while the amplitude for iridium has gone up.

.. important::
    We want to accept the optimized positions as the new starting configuration, so we need to replace our old :ref:`POSCAR<poscar>` and :ref:`VIBROCC<viboccin>` files with the optimized ones.
    This can be done either manually or automatically by calling the :ref:`bookkeeper utility<bookkeeper>` with the ``--cont`` flag:

    .. code-block:: console

        $ python3 bookkeeper.py --cont #[or ./bookkeeper --cont]

Fine DISPLACEMENTS and Tensor LEED Error
========================================

The rough optimization has already significantly brought down the R-factor.
We should now continue with a finer search grid.
For this, we use a similar :ref:`DISPLACEMENTS file<displacements>`, but with much smaller range and step size (see below).
We now re-run with :ref:`RUN = 1-3<run>` to perform a fresh reference calculation for the new starting positions.
This is advisable, because parameter deviations during the previous fit were not negligible.

.. literalinclude :: /_static/example_systems/Ir(100)-O/DISPLACEMENTS_fine
   :language: console
   :caption: DISPLACEMENTS

When looking at the log file after the reference calculation, we further notice something important:
The R-factor of the reference calculation (:math:`R_P \approx 0.18`) *is different* from the one we obtained from the superposition calculation at the end of the previous run (:math:`R_P \approx 0.21`).
This comes from the **error of the Tensor LEED approximation** used for the structure-optimization!
Fortunately â€“ in this case â€“ the real R-factor (as obtained from the reference calculation) is lower.
However, this is not always the case.
You should **never** rely on the R-factor produced by the superposition calculation as a final result, but rather run a final reference calculation at the end of your analysis.

Full-dynamic Optimization
=========================

After the finer search run finishes, we see that the R-factor has again dropped quite a lot.
The R-factor is now below 0.1, which already indicates very good agreement, but we can get better yet.
However, before proceeding, we should accept the new best fit structure fit by calling the :ref:`bookkeeper utility<bookkeeper>` with the ``--cont`` flag:

    .. code-block:: console

        $ python3 bookkeeper.py --cont #[or ./bookkeeper --cont]

Now, remember that in the :ref:`PARAMETERS file<parameters>` above, we had to put in an initial guess for the imaginary part of the inner potential :math:`V_{0\text{i}}`.
We would now like to also optimize this global parameter â€“ however it is not accessible in :ref:`the tensor LEED approach<tensor_leed>`, which only can treat perturbations on an atom-by-atom basis.
Instead, we can use the :ref:`full-dynamic optimization<fdoptimization>` to find an optimal value for :math:`V_{0\text{i}}`.

During the :ref:`full-dynamic optimization<fdoptimization>`, multiple reference calculations will be run while the chosen global parameter is varied.
ViPErLEED will then try to determine an optimal value using a parabola fit.
We select :math:`V_{0\text{i}}` for optimization by adding the following line to PARAMETERS:

.. code-block:: console

    OPTIMIZE V0i = step 0.5

We then chose to run the :ref:`full-dynamic optimization<fdoptimization>` by setting the parameter :ref:`RUN = 6<run>` and restarting.
Once finished, the log file will let us know of the optimized value for the chosen parameter.
ViPErLEED also produces a file called ``FD_Optimization.pdf`` in the ``OUT`` directory which contains a visualization of the R-factors calculated for the various values of the parameter and a fit parabola.

.. figure:: /_static/example_systems/Ir(100)-O/figures/FD_Optimization.pdf
   :width: 60%
   :align: center

   ``FD_Optimization.pdf``.

.. note:: 
    ViPErLEED will also automatically add the new, optimized value to the :ref:`PARAMETERS file<parameters>` and comment out the line containing the previous value.

Following the :math:`V_{0\text{i}}` optimization we can also run a final structure-optimization, since the new value for :math:`V_{0\text{i}}` may have slightly affected the optimal positions.
Using a (very fine) :math:`0.002` Ã… grid (``DISPLACEMENTS_very_fine`` in the provided example files) we manage to get a final R-factor of around :math:`R_P \approx 0.088`.

Error calculation
=================

Now that we have found a good structure fit, we can run a ViPErLEED :ref:`error calculation<error_calculation>` to estimate how sensitive the R-factor is to small changes of specific parameters.
As input for the error calculation, we need a :ref:`DISPLACEMENTS file<displacements>` containing the desired range and steps.
The format of the file is the same as used for the delta-amplitudes calculation and structure search.

.. literalinclude :: /_static/example_systems/Ir(100)-O/DISPLACEMENTS_errors
   :language: console
   :caption: DISPLACEMENTS file for the error calculation.


Using this DISPLACEMENTS file, we run the error calculation by selecting the segment :ref:`RUN = 5<run>`.
The :ref:`result <errorspdf>` will again be saved in the ``OUT`` directory.
ViPErLEED generates a plot of the Error curves in ``Errors.pdf`` and stores the raw data in ``Errors.csv``.
:ref:`Errors.pdf<errorspdf>` shows that displacements of surface atoms even by a few pm drastically increase the R-factor.
Here, atom 1 is the oxygen adsorbate and atoms 2 and 3 are the topmost iridium species.

.. figure:: /_static/example_systems/Ir(100)-O/figures/errors_geo.pdf
   :width: 50%
   :align: center

   Part of ``Errors.pdf`` showing the effects of geometric displacements.

.. note::
   The point of intersection between the error curve for a parameter and the horizontal line labeled :math:`R + \textrm{var}(R)` gives a measure for the statistical error :cite:p:`heinzElectronBasedMethods2013` (see also the section on :ref:`Errors.pdf<errorspdf>`).

Similarly, changes in the vibrational amplitude of the surface atoms also strongly affect the R-factor:

.. figure:: /_static/example_systems/Ir(100)-O/figures/errors_vib.pdf
   :width: 50%
   :align: center

   Part of ``Errors.pdf`` showing the effects of changes in vibrational amplitude.

In general error-plots for geometric displacement tend to show a parabolic profile close to the minimum.
Error plots for vibrational amplitude tend to be more asymmetric, as these amplitudes enter the calculation differently (Debye-Waller-factor).

.. warning::
   Error curves are also subject to **errors of the tensor LEED approximation**.
   R-factor values obtained for large deviations should be taken with care.

.. [1] It is not recommended to fit any vibrational amplitude of bulk atoms as long as reliable information about the substrate Debye temperature is available.