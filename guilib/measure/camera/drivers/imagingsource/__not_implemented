############# LIST OF DLL FUNCTIONS NOT IMPLEMENTED IN GrabberDLL #############

# void  IC_ReleaseGrabber(HGRABBER *hGrabber)
# void  IC_CloseLibrary()
# char* IC_GetDeviceName(HGRABBER hGrabber)
# int   IC_SetVideoNorm(HGRABBER hGrabber, char *szNorm)
# int   IC_SetInputChannel(HGRABBER hGrabber, char *szChannel)
# int   IC_PrepareLive(HGRABBER hGrabber, int iShow)
# int   IC_SuspendLive(HGRABBER hGrabber)
# int   IC_IsLive(HGRABBER hGrabber)
# int   IC_IsCameraPropertyAutoAvailable(HGRABBER hGrabber, CAMERA_PROPERTY iProperty)
# int   IC_GetAutoCameraProperty(HGRABBER hGrabber, int iProperty, int *iOnOff)
# int   IC_IsVideoPropertyAvailable(HGRABBER hGrabber, VIDEO_PROPERTY eProperty)
# int   IC_VideoPropertyGetRange(HGRABBER hGrabber, VIDEO_PROPERTY eProperty, long *lMin, long *lMax)
# int   IC_GetVideoProperty(HGRABBER hGrabber, VIDEO_PROPERTY eProperty, long *lValue)
# int   IC_IsVideoPropertyAutoAvailable(HGRABBER hGrabber, VIDEO_PROPERTY eProperty)
# int   IC_GetAutoVideoProperty(HGRABBER hGrabber, int iProperty, int *iOnOff)
# int   IC_SetVideoProperty(HGRABBER hGrabber, VIDEO_PROPERTY eProperty, long lValue)
# int   IC_GetSerialNumber(HGRABBER hGrabber, char* szSerial)
# int   IC_ListDevices(char *szDeviceList, int iSize)
# int   IC_ListDevicesbyIndex(char *szDeviceName, int iSize, int DeviceIndex)
# int   IC_ListVideoFormats(HGRABBER hGrabber, char *szFormatList, int iSize)
# int   IC_ListVideoFormatbyIndex(HGRABBER hGrabber, char *szFormatName, int iSize, int iIndex)
# int   IC_GetDevice(int iIndex)
# int   IC_LoadDeviceStateFromFileEx(HGRABBER hGrabber, char* szFileName, int OpenDevice)
# int   IC_SaveDeviceSettings(HGRABBER hGrabber, char* szFilename)
# int   IC_OpenDeviceBySettings(HGRABBER hGrabber, char* szFilename)
# int   IC_LoadDeviceSettings(HGRABBER hGrabber, char* szFilename)
# int   IC_OpenDevByDisplayName(HGRABBER hGrabber, char *szDisplayname)
# int   IC_GetDisplayName(HGRABBER hGrabber, char *szDisplayname, int iLen)
# int   IC_GetUniqueName(HGRABBER hGrabber, char *szUniquename, int iLen)
# void  IC_RemoveOverlay(HGRABBER hGrabber, int iEnable)
# void  IC_EnableOverlay(HGRABBER hGrabber, int iEnable)
# long  IC_BeginPaint(HGRABBER hGrabber)
# void  IC_EndPaint(HGRABBER hGrabber)
# void  IC_MsgBox(char * szText, char* szTitle)
# int   IC_SetCallbacks(HGRABBER hGrabber, FRAME_READY_CALLBACK	cb, void* x1_argument_in_void_userdata, DEVICE_LOST_CALLBACK dlCB, void* x2_argument_in_void_userdata)
# int   IC_SignalDetected(HGRABBER hGrabber)
# int   IC_SetTriggerMode(HGRABBER hGrabber, char* szMode)
# int   IC_SetTriggerPolarity(GRABBER hGrabber, int iPolarity)
# int   IC_GetExpRegValRange(HGRABBER hGrabber, long *lMin, long *lMax)
# int   IC_GetExpRegVal(HGRABBER hGrabber, long *lValue)
# int   IC_SetExpRegVal(HGRABBER hGrabber, long lValue)
# int   IC_EnableExpRegValAuto(HGRABBER hGrabber, int iOnOff)
# int   IC_GetExpRegValAuto(HGRABBER hGrabber, int *iOnOff)
# int   IC_IsExpAbsValAvailable(HGRABBER hGrabber)
# int   IC_GetExpAbsValRange(HGRABBER hGrabber, float *fMin, float *fMax)
# int   IC_GetExpAbsVal(HGRABBER hGrabber, float *fValue)
# int   IC_SetExpAbsVal(HGRABBER hGrabber,  float fValue)
# int   IC_GetColorEnhancement(HGRABBER hGrabber, int *OnOff)
# int   IC_SetColorEnhancement(HGRABBER hGrabber, int OnOff)
# int   IC_GetAvailableFrameRates(HGRABBER hGrabber, int Index, float *fps)
# int   IC_SetWhiteBalanceAuto(HGRABBER hGrabber, int iOnOff)
# int   IC_SetWhiteBalanceRed(HGRABBER hGrabber, long Value)
# int   IC_SetWhiteBalanceGreen(HGRABBER hGrabber, long Value)
# int   IC_SetWhiteBalanceBlue(HGRABBER hGrabber, long Value)
# int   IC_FocusOnePush(HGRABBER hGrabber)
# int   IC_ShowInternalPropertyPage(HGRABBER hGrabber)
# int   IC_ResetUSBCam(HGRABBER hGrabber)
# int   IC_QueryPropertySet(HGRABBER hGrabber)
# COMMENTED OUT  int   IC_PropertySet_Set
# int   IC_SetDefaultWindowPosition(HGRABBER hGrabber, int Default)
# int   IC_SetWindowPosition(HGRABBER hGrabber, int PosX, int PosY, int Width, int Height)
# int   IC_enumPropertyElements(HGRABBER hGrabber, char* Property, IC_ENUMCB cb, void* data
# int   IC_enumPropertyElementInterfaces(HGRABBER hGrabber, char* Property, char* Element, IC_ENUMCB cb, void* data)
# int   IC_GetPropertyAbsoluteValueRange(HGRABBER hGrabber, char* Property, char *Element, float *Min, float *Max)
# int   IC_GetPropertyMapStrings(HGRABBER hGrabber, char* Property, char *Element, int *StringCount, char **Strings)
# int   IC_GetPropertyMapString(HGRABBER hGrabber, char* Property, char *Element,  char *String)
# int   IC_SetPropertyMapString(HGRABBER hGrabber, char* Property, char *Element,  char *String)
# int   IC_GetAvailableFrameFilterCount()
# int   IC_GetAvailableFrameFilters(char **szFilterList, int iSize)
# int   IC_CreateFrameFilter(char *szFilterName, HFRAMEFILTER *FilterHandle)
# int   IC_AddFrameFilterToDevice(HGRABBER hGrabber, HFRAMEFILTER FilterHandle)
# void  IC_RemoveFrameFilterFromDevice(HGRABBER hGrabber, HFRAMEFILTER FilterHandle)
# void  IC_DeleteFrameFilter(HFRAMEFILTER FilterHandle)
# int   IC_FrameFilterShowDialog(HFRAMEFILTER FilterHandle)
# int   IC_FrameFilterGetParameter(HFRAMEFILTER FilterHandle, char* ParameterName, void* Data)
# int   IC_FrameFilterSetParameterInt(HFRAMEFILTER FilterHandle, char* ParameterName, int Data)
# int   IC_FrameFilterSetParameterFloat(HFRAMEFILTER FilterHandle, char* ParameterName, float Data)
# int   IC_FrameFilterSetParameterBoolean(HFRAMEFILTER FilterHandle, char* ParameterName, int Data)
# int   IC_FrameFilterSetParameterString(HFRAMEFILTER FilterHandle, char* ParameterName, char* Data)
# int   IC_FrameFilterDeviceClear(HGRABBER hGrabber)
# void  IC_enumCodecs(ENUMCODECCB cb, void* data)
# HCODEC   IC_Codec_Create(char* Name)
# void  IC_Codec_Release(HCODEC Codec)
# int   IC_Codec_getName(HCODEC Codec, int l, char* Name)
# int   IC_Codec_hasDialog(HCODEC Codec)
# int   IC_Codec_showDialog(HCODEC Codec)
# int   IC_SetCodec(HGRABBER hlGrabber, HCODEC Codec)
# int   IC_SetAVIFileName(HGRABBER hlGrabber, char * FileName)
# int   IC_enableAVICapturePause(HGRABBER hlGrabber, int Pause)


######################## REMOVED FROM IMPLEMENTATION ##########################

    # TODO: it is unclear what an input channel is! ANALOG INPUT. Probably not useful.
    get_input_channel_count = __dll.IC_GetInputChannelCount
    get_input_channel_count.restype = C.c_int
    get_input_channel_count.argtypes = (GrabberHandlePtr,)
    get_input_channel_count.__doc__ = (
        """Return the number of available input channels for a device.

        Requires a video-capture device to be open.

        Parameters
        ----------
        grabber_handle : GrabberHandlePtr
            Handle to grabber object

        Returns
        -------
        n_channels : int
            The number of channels on success, otherwise NO_DEVICE
            (no video capture device open) or NO_HANDLE (invalid
            grabber_handle)."""
        )

    # TODO: probably not useful
    get_input_channel = __dll.IC_GetInputChannel
    get_input_channel.restype = C.c_char_p
    get_input_channel.argtypes = GrabberHandlePtr, C.c_int
    get_input_channel.__doc__ = (
        """Return the input channel at index as a string.

        A device should be open for this method to succeed. This method
        will fail unless get_input_channel_count() was called before.

        Parameters
        ----------
        grabber_handle : GrabberHandlePtr
            Handle to grabber object
        index : int
            Index of the channel to be returned. index must be between
            0 and get_input_channel_count().

        Returns
        -------
        channel : bytes or None
            The name of the specified input channel (UTF-8). Returns
            None if an error occurred."""
        )

    # TODO: video norm == Analog/PAL/NTSC/SECAM:
    #       https://docs.microsoft.com/en-us/windows/win32/
    #               api/strmif/ne-strmif-analogvideostandard)
    #       unclear if it meks senso to have this.
    get_video_norm_count = __dll.IC_GetVideoNormCount
    get_video_norm_count.restype = C.c_int
    get_video_norm_count.argtypes = (GrabberHandlePtr,)
    get_video_norm_count.__doc__ = (
        """Return the number of the video norms for the current device.

        A device should be open for this method to succeed.

        Parameters
        ----------
        grabber_handle : GrabberHandlePtr
            Handle to grabber object

        Returns
        -------
        n_norms : int
            The number of video norms on success, otherwise NO_DEVICE
            (no video capture device open) or NO_HANDLE (invalid
            grabber_handle)."""
        )

    # TODO: unclear if useful, probably not
    get_video_norm = __dll.IC_GetVideoNorm
    get_video_norm.restype = C.c_char_p
    get_video_norm.argtypes = GrabberHandlePtr, C.c_int
    get_video_norm.__doc__ = (
        """Return the video norm at index as a string.

        This method will fail unless get_video_norm_count() was
        called before.

        Parameters
        ----------
        grabber_handle : GrabberHandlePtr
            Handle to grabber object
        index : int
            Index of the video norm to be returned. index must be
            between 0 and get_video_norm_count().

        Returns
        -------
        video_norm : bytes or None
            The name of the specified video norm (UTF-8). Returns
            None if an error occurred."""
        )

    # TODO: probably not useful
    set_window_handle = __dll.IC_SetHWnd
    set_window_handle.restype = C.c_int
    set_window_handle.argtypes = GrabberHandlePtr, C.c_int
    set_window_handle.__doc__ = (
        """Assign a window handle to display the video in.

        Parameters
        ----------
        grabber_handle : GrabberHandlePtr
            Handle to grabber object
        window_handle : int
            The handle of the window where a live video will be shown.

        Returns
        -------
        ret_val : int
            SUCCESS if an image has been snapped, ERROR if something
            went wrong."""
        )
