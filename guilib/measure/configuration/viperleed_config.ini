[energy_calibration]
# Calibration curve for energy. Use numpy.polynomial.polynomial.Polynomial
# as p = Polynomial(coefficients, domain=domain, window=domain). Then
# one should call set_voltage_and_measure(p(desired_true_energy))
coefficients = (0, 1)
domain = (-10, 1100)

[measurement_settings]
#Settings of measurement
# -----------------------------------------
#energy_max: Maximum energy of DAC in Volt, value that can be cast to float
#dac_settle_time: settle time for the dac, before starting the measurement
#    the adc. Value in milliseconds which can be cast to int.
#dac_first_settle_time: settle time for the dac, when the first value is set
#   to the dac. Value in milliseconds which can be cast to int.
#v_ref_adc: Reference voltage of adc, has to be measured directly at the adc,
#   value in volt, that can be cast to float
#v_ref_dac: Reference voltage of dac, has to be measured directly at the dac
#   value in volt, that can be cast to float
#path: Path to the directory for the csv files with the measurement datas.
#start_energy: energy at which your measurements start
#delta_energy: step size
#end_energy: energy at which your measurements end
#arduino_timeout: 10 seconds because the worst case scenario is that the calibration does 7 of the 8 (0.36*7s) steps and then waits for 5 seconds
#continuous_measurement_x: Decides if the arduino continues to measure and return data
#	0: The arduino will do one measurement cycle and return the data
#	1: The arduino will continue to measure and return data until interrupted
#measurement_time: time between arduino measurements in continuous-measurement mode.
#num_meas_to_average: Number of measurements done before sending the value
#   to the computer. The adc values are summed up and divided with
#   num_meas_to_average to get the mean value. Value which can be cast to
#   int. Allowed values are from 0 - (2**16 - 1).
#	Set to 1 for continuous measurements.
# -----------------------------------------
energy_max = 5
settle_time = 0
first_settle_time = 1000
dac_value_end = 0
v_ref_dac = 2.5
start_energy = 50
delta_energy = 10
end_energy = 60
continuous_measurement_yes = 1
continuous_measurement_no = 0
measurement_time = 0
num_meas_to_average = 10
continuous_measurement_points = 50
continuous_measurement_loops = 20

[leed_hardware]
#contains information regarding the experimental setup for the LEED measurements
#I0_conversion_factor: in Microamps per Volt
I0_conversion_factor = 1

[devices]
# contains the configuration files of all connected controllers and cameras
primary_controller = ('C:/Users/Florian/Documents/Uni/Masterarbeit/ViperLEED/viperleed/guilib/measure/configuration/viperleed_hardware.ini', ('I0',' Isample', 'cold_junction'))
secondary_controllers = ()
cameras = ()