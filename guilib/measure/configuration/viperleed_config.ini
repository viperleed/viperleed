[energy_calibration]
# Calibration curve for energy. Use numpy.polynomial.polynomial.Polynomial
# as p = Polynomial(coefficients, domain=domain, window=domain). Then
# one should call set_voltage_and_measure(p(desired_true_energy))
coefficients = (0, 1)
domain = (-10, 1100)

[measurement_settings]
#Settings of measurement
# -----------------------------------------
#start_energy: energy at which your measurements start
#delta_energy: step size
#end_energy: energy at which your measurements end
#arduino_timeout: 10 seconds because the worst case scenario is that the calibration does 7 of the 8 (0.36*7s) steps and then waits for 5 seconds
#continuous_measurement_x: Decides if the arduino continues to measure and return data
#	0: The arduino will do one measurement cycle and return the data
#	1: The arduino will continue to measure and return data until interrupted
#measurement_time: time between arduino measurements in continuous-measurement mode.
start_energy = 0
delta_energy = 10
end_energy = 500
continuous_measurement_yes = 1
continuous_measurement_no = 0
measurement_time = 0
continuous_measurement_points = 50
continuous_measurement_loops = 20

[leed_hardware]
#contains information regarding the experimental setup for the LEED measurements
#I0_conversion_factor: in Microamps per Volt
I0_conversion_factor = 1

[devices]
# contains the configuration files of all connected controllers and cameras
primary_controller = ('C:/Users/Florian/Documents/Uni/Masterarbeit/ViperLEED/viperleed/guilib/measure/configuration/viperleed_hardware.ini', ('HV','Isample', 'cold_junction'))
secondary_controllers = (('C:/Users/Florian/Documents/Uni/Masterarbeit/ViperLEED/viperleed/guilib/measure/configuration/viperleed_hardware2.ini', ('I0','Isample', 'cold_junction')),)
; secondary_controllers = ()
cameras = ()